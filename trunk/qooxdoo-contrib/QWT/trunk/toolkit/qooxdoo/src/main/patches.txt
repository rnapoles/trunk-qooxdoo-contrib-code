### qx/ui/table/cellrenderer/Html.java
***
    public native String _getContentHtml(Object cellInfo);
    public native java.lang.String _getContentHtml(Object cellInfo);
***
    public native String _getCellClass(Object cellInfo);
    public native java.lang.String _getCellClass(Object cellInfo);
### qx/ui/table/cellrenderer/Abstract.java
***
    public native void createDataCellHtml(Object cellInfo, String htmlArr);
    public native void createDataCellHtml(Object cellInfo, java.lang.String htmlArr);
***
    public native String _getContentHtml(Object cellInfo);
    public native java.lang.String _getContentHtml(Object cellInfo);
***
    public native String _getCellClass(Object cellInfo);
    public native java.lang.String _getCellClass(Object cellInfo);
### qx/ui/table/cellrenderer/String.java
***
    public native String _getContentHtml(Object cellInfo);
    public native java.lang.String _getContentHtml(Object cellInfo);
***
    public native String _getCellClass(Object cellInfo);
    public native java.lang.String _getCellClass(Object cellInfo);
### qx/ui/table/cellrenderer/Date.java
***
    public native String _getCellClass(Object cellInfo);
    public native java.lang.String _getCellClass(Object cellInfo);
### qx/ui/table/cellrenderer/Number.java
***
    public native String _getCellClass(Object cellInfo);
    public native java.lang.String _getCellClass(Object cellInfo);
### qx/ui/table/cellrenderer/Replace.java
***
    public native String _getContentHtml(Object cellInfo);
    public native java.lang.String _getContentHtml(Object cellInfo);
### qx/ui/table/cellrenderer/Password.java
***
    public native String _getContentHtml(Object cellInfo);
    public native java.lang.String _getContentHtml(Object cellInfo);
### qx/ui/table/cellrenderer/Default.java
***
    public native String _getCellClass(Object cellInfo);
    public native java.lang.String _getCellClass(Object cellInfo);
***
    public native String _getContentHtml(Object cellInfo);
    public native java.lang.String _getContentHtml(Object cellInfo);
### qx/ui/table/cellrenderer/Icon.java
***
    public native String _getCellClass(Object cellInfo);
    public native java.lang.String _getCellClass(Object cellInfo);
***
    public native String _getContentHtml(Object cellInfo);
    public native java.lang.String _getContentHtml(Object cellInfo);
### qx/ui/core/ClientDocument.java
+++
    /**
     * TODO: generic solution for static methods
     *
     * @alias
     */
    public native static ClientDocument getInstance();
### qx/core/Target.java
+++
    /**
     * @native
        // #pre(org.qooxdoo.toolkit.qooxdoo.EventListener)
        this.addEventListener(type, function(e) {
            listener.notify(e);
        });
     */
    public native void addJavaEventListener(String type, org.qooxdoo.toolkit.qooxdoo.EventListener listener);

    public void addChangeValueListener(org.qooxdoo.toolkit.qooxdoo.EventListener listener) {
        addJavaEventListener("changeValue", listener);
    }
    public void addExecuteListener(org.qooxdoo.toolkit.qooxdoo.EventListener listener) {
        addJavaEventListener("execute", listener);
    }
    public void addChangeSelectionListener(org.qooxdoo.toolkit.qooxdoo.EventListener listener) {
		addJavaEventListener("changeSelection", listener);    
    }
### qx/util/manager/Value.java
***
public native Object resolveDynamic(String value);
public native java.lang.Object resolveDynamic(String value);
### qx/locale/LocalizedString.java
***
public native String toString_();
public native java.lang.String toString_();
### qx/core/Client.java
***
this._fireBugActive = (window.console && console.log && console.debug && console.assert);
this._fireBugActive = (window.console && console.log && console.debug);
### qx/core/Property.java
***
for (var i=0, a=config.group,
if (typeof _isrhino != 'undefined') { return; } for (var i=0, a=config.group,
### qx/ui/core/Widget.java
***
native void renderPadding(Object changes);
public native void renderPadding(Object changes);
+++
    public static final String AUTO = "auto";

### qx/ui/basic/Image.java
+++
    public static final String PREFIX = "images/";

### qx/ui/tree/Tree.java
***
public class Tree extends TreeFolder
public class Tree<T> extends TreeFolder<T>
+++
    public static <T> Tree<T> create(T root) {
        Tree<T> result;
        
        result = new Tree<T>();
        result.setNode(root);
        result.setLabel(root.toString());
        return result;
    }
### qx/ui/tree/AbstractTreeElement.java
*** 
class AbstractTreeElement extends qx.ui.layout.BoxLayout
class AbstractTreeElement<T> extends qx.ui.layout.BoxLayout
+++

    private T node;
    
    public T getNode() {
        return node;
    }

    public void setNode(T node) {
        this.node = node;
    }

### qx/ui/tree/TreeFile.java
*** 
class TreeFile extends AbstractTreeElement
class TreeFile<T> extends AbstractTreeElement<T>
### qx/ui/tree/TreeFolder.java
*** 
class TreeFolder extends AbstractTreeElement
class TreeFolder<T> extends AbstractTreeElement<T>
+++
    public TreeFile<T> addFile(T node) {
        TreeFile<T> file;
        
        file = new TreeFile<T>();
        file.setNode(node);
        file.setLabel(node.toString());
        file.getLabelObject().setMode("html");
        add(file);
        return file;
    }
    
    public TreeFolder<T> addFolder(T node) {
        TreeFolder<T> folder;
        
        folder = new TreeFolder<T>();
        folder.setNode(node);
        folder.setLabel(node.toString());
        folder.getLabelObject().setMode("html");
        add(folder);
        return folder;
    }
 
### qx/ui/form/ComboBox.java
*** 
public class ComboBox extends qx.ui.layout.HorizontalBoxLayout
public class ComboBox<T> extends qx.ui.layout.HorizontalBoxLayout
+++
    // TODO: ... arguments
    public static <E extends Enum> ComboBox<E> createE(E[] values) {
        ComboBox<E> combo;
        
        combo = new ComboBox<E>();
        for (E v : values) {
            combo.addString(v.name(), v);
        }
        return combo;
    }
 
    // TODO: Collections.asList
    // TODO: ... arguments
    public static <T> ComboBox<T> createT(T[] values) {
        ComboBox<T> combo;
        
        combo = new ComboBox<T>();
        for (T value : values) {
            combo.addValue(value);
        }
        return combo;
    }

    // TODO: ... arguments
    public static <T> ComboBox<T> createList(java.util.List<T> values) {
        ComboBox<T> combo;
        
        combo = new ComboBox<T>();
        for (T value : values) {
            combo.addValue(value);
        }
        return combo;
    }

    //--
    
    //-- Qooxdoo property fields start --
 
    public java.util.List<qx.ui.core.Widget> children() {
        java.util.List<qx.ui.core.Widget> result;
        
        result = new java.util.ArrayList<qx.ui.core.Widget>();
        children(result);
        return result;
    }

    /**
     * @native
        var c = this.getList().getChildren();
        var max = c.length;
        for (var i = 0; i < max; i++) {
          result.add(c[i]);
        }
        return result;
     */
    public native void children(java.util.List<? extends qx.ui.core.Widget> result);

    /** TODO: difference to getValue/setValue */
    public T getSelectedValue() {
        ListItem<?> selected;
        
        selected = (ListItem<?>) getSelected();
        return (T) selected.getValue();
    }

    // TODO: invoke selectionChanged?
    public void setSelectedValue(T value) {
        ListItem<T> item;
        
        item = lookup(value);
        if (item == null) {
            throw new IllegalArgumentException("" + value);
        }
        selected = item;
        setSelected(selected);
    }

    public ListItem<T> lookup(T value) {
        ListItem<T> item;
        
        for (qx.ui.core.Widget child : children()) {
            item = (ListItem<T>) child;
            if (value.equals(item.getValue())) {
                return item;
            }
        }
        return null;
    }
    
    //-- Qooxdoo property access methods end --

    public void addValue(T value) {
        addString(value.toString(), value);
    }

    public void addString(String text, T value) {
        ListItem<T> item;

        item = new ListItem<T>(text, null, value);
        if (selected == null) {
            selected = item;
        }
        add(item);
    }

### qx/ui/form/ListItem.java
*** 
public class ListItem extends qx.ui.basic.Atom
public class ListItem<T> extends qx.ui.basic.Atom
*** 
public native String getValue();
public native T getValue();
***   
public native void setValue(String arg);
public native T setValue(T arg);
### qx/util/range/Range.java
*** 
public native int getMax();
public native Integer getMax();
*** 
public native int getMin();
public native Integer getMin();
*** 
public native boolean getWrap();
public native Boolean getWrap();
*** 
public native void initMax(int arg);
public native void initMax(Object arg);
*** 
public native void initMin(int arg);
public native void initMin(Object arg);
*** 
public native void initWrap(boolean arg);
public native void initWrap(Object arg);
*** 
public native boolean isWrap();
public native Boolean isWrap();
*** 
public native void setMax(int arg);
public native void setMax(Object arg);
*** 
public native void setMin(int arg);
public native void setMin(Object arg);
*** 
public native void setWrap(boolean arg);
public native void setWrap(Object arg);
*** 
public native boolean toggleWrap();
public native Boolean toggleWrap();