<?xml version="1.0" encoding="utf-8"?>
<document>

  <properties>
    <title>Qwt</title>
  </properties>

  <body>
    <section name="Usage">
      <p>This section describes how to build applications with Qwt. </p>
      <subsection name="New Application">
        <p>To create and start a new application <code>hello</code>:</p>
      <source>
cd whatever
mvn qwt:new -Dpackage=org.qooxdoo.hello
cd hello
mvn clean test
mvn qwt:run
firefox http://localhost:8080/hello
      </source>
    </subsection>
    <subsection name="Eclipse">
      <p>Run <code>mvn eclipse:eclipse</code> in your project directory, 
      start Eclipse, define an <code>M2_REPO</code> variable pointing to
      <code>$HOME/.m2/repository</code>, and create a new Project via
      <code>File/New/Java Project/Create from existing source</code>.</p>
    </subsection>
    <subsection name="Distribution">
      <p>Run <code>mvn clean package</code> and distribute the resulting 
      <code>target/yourapp-version.war</code> file.</p>
    </subsection>
    <subsection name="Directory layout">
      <source>
yourapp
  - src/main/java             Java source code
  - src/test/java             JUnit tests
  - target/yourapp-x.y.z.war  your application ready for distribution
  - target/webapp             unpacked application, generated by qwt:run
    - qwt.log                 log file
    - main        
      - repository            JavaScript generated by the compiler 
      - modules.lst           Modules used in index.html            
      - index.html            Html passed to clients
      </source>
    </subsection>
    <subsection name="Eclipse">
      <p>First, run <code>mvn eclipse:eclipse</code> on the command-line to get Eclipse files for your application.
      Then use <code>File|New ...|Java Project</code> and <code>Create Project from existing source</code>.</p>
    </subsection>
    <subsection name="Rebuild">
      <p>You don't have to restart Tomcat if your application changes -- Tomcat automatically detects
        modifications and restarts the application. If tomcat doesn't detect the changes: rerun 
        <code>mvn clean test</code>.</p>
      <p>Advanced: if dependency jars change but the version number doesn't:
        <code>cd dep-project &amp;&amp; mvn install</code>. Tomcat should see the modified jar in your
        application (because it's symlinked) and reload the application. </p>
    </subsection>
    <subsection name="Service Objects">
      <p>To create a new Service Object =SerivceFoo=:</p>
      <ol>
        <li>Add and method <code>initServiceFoo</code> to your client's Main class, taking a single interface argument.</li>
        <li>Define a class <code>ServiceFoo</code> implmenting the interface.</li>
        <li>For every new session, Qwt instantiates <code>ServiceFoo</code> on the server and passes a proxy object 
          implementing the interface to the above method. This happens before <code>createRoot</code> is 
          called.</li>
        <li>Use the proxy in your to invoke service methods executed on the server.</li>
      </ol>
    </subsection>
    <subsection name="JMX">
       <source>
jconsole
        </source>
    </subsection>
    </section>
  </body>
</document>
