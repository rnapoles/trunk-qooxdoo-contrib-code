<?xml version="1.0" encoding='ISO-8859-1'?>
<!-- ยง{{header}}: -->
<!-- Mork Compiler Tool, -->
<!-- Copyright (c) 1998-2003  Michael Hartmeier -->
<!-- Mork is licensed under the terms of the GNU Lesser General Public License. -->
<!-- It is distributed in the hope that it will be useful, but WITHOUT ANY -->
<!-- WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS -->
<!-- FOR A PARTICULAR PURPOSE. See the file license.txt for details. -->
<!-- ยง. -->

<chapter>
<title>Source Code</title>

<sect1>
<title>Overview</title>

<formalpara>
<title>Version numbering</title>
<para>The version numbering scheme is <literal>major.minor</literal>. The minor number is
bumped for normal releases with normal, incremental improvements. The major number is bump for
milestones.</para></formalpara>

<figure>
<title>Directory structure</title>
<programlisting>
mork
|- src/de/mlhartme/mork   Mork library sources
|   |- compiler              compiler
|   |- xml                   XML syntax
|   |- mapping               map symbols to objects
|   |- semantics             attribute grammars
|   |- parser                push-down automatons
|   |- scanner               finite automatons
|   |- grammar               context-free grammars
|   |- regexpr               regular expressions
|   |- classfile             Java class files
|   |- reflect               reflection
|    - util                  data types, misc
|- examples      example applications
|- bin           launch scripts
|- lib           jar files
|- beezle        build system
|- tests
|   |- junit     JUnit test cases
|    - examples  some pathologic stuff
 - doc           documentation
   |- src          DocBook xml sources for the manual
   |- html         HTML manual and javadocs
    - print        pdf manual
</programlisting>
</figure>

<formalpara>
<title>Architecture</title>
<para>Basically, Mork is a Java class library together with some documentation, examples,
a build system (python) and some launch scripts. The packages in the class library a structured
into three layers, with lower layers having no dependencies on upper layers. The lowest layer is
general-purpose, it is not tied to compiler tools. The compiler tool layer is by far the biggest
part. Basically, it implements typical data types described in compiler construction text book.
This layer is not tied to Mork, you could use it to realize other compiler tools. The Mork layer
is the top-most layer, adding Mork-specific stuff.
</para></formalpara>

<figure>
<title>Architecture</title>
<mediaobject>
<imageobject>
<imagedata fileref="library.jpg" format="JPG"/>
</imageobject>
</mediaobject>
</figure>

</sect1>

<sect1>
<title>Example applications</title>

<para>Mork includes a number of example applications. Every example is implemented in a
package of the example's name. Java's <literal>main</literal> method is always placed in
a class called Main. The following steps compile and run the example application
<literal>foo</literal>.
<itemizedlist>
<listitem><para>Optional: build <literal>javadoc</literal>:
  <programlisting>
    cd examples
    mkdir foo/javadoc
    javadoc -d foo/javadoc -sourcepath . foo
  </programlisting></para></listitem>
<listitem><para>Compile the Java files:
  <programlisting>
    cd examples/foo
    javac *.java
  </programlisting></para></listitem>
<listitem><para>Compile the mapper:
  <programlisting>
    mork Mapper.map
  </programlisting></para></listitem>
<listitem><para>Run it:
  <programlisting>
    java foo.Main
  </programlisting>If the example needs arguments, a usage message will be printed.
  </para></listitem>
</itemizedlist>
</para>

<formalpara>
<title>calc</title>
<para>The classic example for compiler tools:
calculate simple arithmetic expression.</para></formalpara>

<formalpara>
<title>command</title>
<para>The application described in the first steps chapter of this manual.
</para></formalpara>

<formalpara>
<title>interpreter</title>
<para>Interpreter for a simple language. The implementation instantiates
classes that resemble a kind of abstract syntax. The methods of these
classes implement the interpreter. Note that no symbol table is necessary,
and that variable references point directly to the referenced variable.
</para></formalpara>

<formalpara>
<title>compiler</title>
<para>Compiler for a simple language. The implementation instantiates
classes similar to those in the interpreter example. But instead of
interpretation methods, these classes have methods to generate Java
byte code.</para></formalpara>

<para>To compile and run a program <literal>Foo.prog</literal>, process
as follows. <itemizedlist>
<listitem><para><literal>java compiler.Main Foo.prog</literal></para></listitem>
<listitem><para><literal>java Foo</literal></para></listitem>
</itemizedlist></para>

<formalpara>
<title><literal>jp</literal></title>
<para>A parser for Java 2, version 1.2. For example, you can run
<literal>jp.Main examples/*/*.java</literal> to parse all examples.
</para></formalpara>

<formalpara>
<title><literal>config</literal></title>
<para>A configuration file in XML syntax.</para></formalpara>

</sect1>

<sect1>
<title>Building Mork</title>

<para>Suppose your Mork directory is <literal>/foo/mork</literal>. To build Mork, proceed as
follows:<orderedlist>
<listitem>
  <para>Make sure you have installed Mork as described in the setup chapter.</para></listitem>
<listitem>
  <para>Make sure the following software in installed on your machine:<itemizedlist>
    <listitem><para>Mork 0.4. Needed to bootstrap Mork. </para></listitem>
    <listitem><para>Python 2 or higher. Already included in most Linux distributions.
      <ulink url="http://www.python.org/">Website</ulink>.
      Adjust in mork/bin/p or mork/bin/p.bat to point to the python interpreter.
      </para></listitem>
  </itemizedlist></para></listitem>
<listitem><para>Optional: if you want to build the manual, make sure the following
  software is installed (please check <literal>/foo/mork/python/mork/config.py</literal>
  for addition version requirements of the various packages): <itemizedlist>
    <listitem><para>Apache <literal>fop</literal>.
      <ulink url="http://xml.apache.org/fop/">Website</ulink></para></listitem>
    <listitem><para>DocBook XML DTD 4.1.
      <ulink url="http://www.oasis-open.org/docbook/xml/">Website</ulink></para></listitem>
    <listitem><para>DocBook Stylesheets
      <ulink url="http://sourceforge.net/projects/docbook/">Website</ulink></para></listitem>
  </itemizedlist></para></listitem>
<listitem><para>Optional: if you want to run the test suite, make sure the following
  software is installed:<itemizedlist>
    <listitem><para>JUnit 3.8. To run the test cases.
      <ulink url="http://www.junit.org/">Website</ulink></para></listitem>
    <listitem><para><literal>xercesSamples</literal> to validate the manual XML files.
      </para></listitem>
    <listitem><para><literal>aspell</literal>.
      <ulink url="http://sourceforge.net/projects/aspell/">Website</ulink>.
      Version .33.5 was used to check Mork 0.3.6</para></listitem>
    <listitem><para><literal>xmlconf</literal> for XML parser tests</para></listitem>
    <listitem><para><literal>PyChecker</literal>
      <ulink url="http://sourceforge.net/projects/pychecker/">Website</ulink>.</para></listitem>
  </itemizedlist></para></listitem>
<listitem><para>Add Mork's python directory to your python path:
  <programlisting>
      export PYTHONPATH=/foo/mork/python:$PYTHONPATH
  </programlisting>Because of this variable, the following steps work anywhere, you
  do not have to enter a particular working directory. </para></listitem>
<listitem><para>Adjust the build configuration file
  <literal>/foo/mork/python/mork/config.py</literal>: <itemizedlist>
    <listitem>
      <para>Run the (experimental!) auto configuration mechanism to guess your
      configuration:<programlisting>
      python bin/configure.py
      </programlisting></para></listitem>
    <listitem><para>Edit <literal>/foo/mork/python/mork/config.py</literal> and adjust the
      individual variable to your environment. You do not have to adjust the variables for XML stuff
      unless you want to build the manual,</para></listitem>
    </itemizedlist></para></listitem>
<listitem><para>Build Mork:
  <programlisting>
      p mork.make.default
  </programlisting></para></listitem>
<listitem><para>Optional: Build the manual:
  <programlisting>
      p mork.manual.default
  </programlisting></para></listitem>
<listitem><para>Optional: Run the test cases:
  <programlisting>
      p mork.test.all
  </programlisting></para></listitem>
</orderedlist></para>


</sect1>

<sect1>
<title>Miscellaneous</title>

<formalpara>
<title>Source conventions</title>
<para>
  <itemizedlist>
    <listitem><para>maximum line length: 100 characters</para></listitem>
    <listitem><para>indentation: 4 spaces, not tabs</para></listitem>
    <listitem><para>newline: Unix convention</para></listitem>
    <listitem><para>a raw <literal>RuntimeException</literal> is thrown if an
      inconsistent state, i.e. a bug, has been detected.</para></listitem>
  </itemizedlist>
</para>
</formalpara>

</sect1>

</chapter>
