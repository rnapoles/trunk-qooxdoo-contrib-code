
Symbols:
StringArrayList {
 0	= "mapper"
 1	= ";"
 2	= "grm"
 3	= "="
 4	= "dtd"
 5	= "import"
 6	= ":"
 7	= ","
 8	= "->"
 9	= "."
 10	= "["
 11	= "]"
 12	= "("
 13	= ")"
 14	= "=>"
 15	= ">"
 16	= "\\\\*"
 17	= "\\\\"
 18	= "\\"
 19	= "//"
 20	= "/"
 21	= Mapper
 22	= MapperName
 23	= SyntaxFile
 24	= Grammar
 25	= Dtd
 26	= Imports
 27	= Import
 28	= Class
 29	= PackageName
 30	= Name
 31	= Constructor
 32	= ClassRef
 33	= MemberRef
 34	= Internal
 35	= Copy
 36	= Definitions
 37	= Group
 38	= Symbol
 39	= StringSymbol
 40	= IdentifierSymbol
 41	= Attribute
 42	= AttributeName
 43	= Visibility
 44	= Implicit
 45	= Explicit
 46	= Path
 47	= ImplicitPath
 48	= LocalPath
 49	= NormalPath
 50	= Step
 51	= Move
 52	= Ups
 53	= Up
 54	= Downs
 55	= Down
 56	= StringLiteral
 57	= Identifier
 58	= WhiteSpace
 59	= EndOfLineComment
 60	= TraditionalComment
}


Grammar:
Mapper	::= MapperName SyntaxFile Imports Definitions
MapperName	::= "mapper" Name ";"
SyntaxFile	::= Dtd
SyntaxFile	::= Grammar
Grammar	::= "grm" "=" StringLiteral ";"
Dtd	::= "dtd" "=" StringLiteral ";"
Imports	::= <61>
Imports	::=
<61>	::= <61> Import
<61>	::= Import
Import	::= "import" PackageName ":" Class <62> ";"
Import	::= "import" PackageName ":" Class ";"
<62>	::= <62> "," Class
<62>	::= "," Class
Class	::= Identifier "->" Identifier
Class	::= Identifier
PackageName	::= Name
Name	::= Identifier <63>
Name	::= Identifier
<63>	::= <63> "." Identifier
<63>	::= "." Identifier
Constructor	::= Copy
Constructor	::= MemberRef
Constructor	::= ClassRef
Constructor	::= Internal
ClassRef	::= Identifier
MemberRef	::= Identifier "." Identifier
Internal	::= "[" Identifier "]"
Copy	::= "(" Identifier ")"
Definitions	::= <64>
Definitions	::=
<64>	::= <64> Group
<64>	::= Group
Group	::= Symbol <65>
<65>	::= <65> Attribute
<65>	::= Attribute
Symbol	::= IdentifierSymbol
Symbol	::= StringSymbol
StringSymbol	::= StringLiteral
IdentifierSymbol	::= Identifier
Attribute	::= AttributeName "=>" Constructor Visibility
AttributeName	::= ":" Identifier
AttributeName	::=
Visibility	::= Explicit
Visibility	::= Implicit
Implicit	::= ";"
Explicit	::= ":" <66> ";"
Explicit	::= ":" ";"
<66>	::= <66> ">" Path
<66>	::= ">" Path
Path	::= NormalPath
Path	::= ImplicitPath
Path	::= LocalPath
ImplicitPath	::= "\\\\*"
LocalPath	::= Identifier
NormalPath	::= <67>
<67>	::= <67> Step
<67>	::= Step
Step	::= Move Identifier
Move	::= Down
Move	::= Up
Move	::= Ups
Move	::= Downs
Ups	::= "\\\\"
Up	::= "\\"
Downs	::= "//"
Down	::= "/"


Automaton:

------------------------------
[state 0]
Mapper	::= . MapperName SyntaxFile Imports Definitions 

MapperName	::= . "mapper" Name ";" 

shift MapperName -> 1
shift "mapper" -> 2
shift Mapper -> 101




------------------------------
[state 1]
Mapper	::= MapperName . SyntaxFile Imports Definitions 

Grammar	::= . "grm" "=" StringLiteral ";" 
Dtd	::= . "dtd" "=" StringLiteral ";" 
SyntaxFile	::= . Grammar 
SyntaxFile	::= . Dtd 

shift SyntaxFile -> 3
shift Dtd -> 4
shift Grammar -> 5
shift "dtd" -> 6
shift "grm" -> 7




------------------------------
[state 2]
MapperName	::= "mapper" . Name ";" 

Name	::= . Identifier 
Name	::= . Identifier <63> 

shift Name -> 8
shift Identifier -> 9




------------------------------
[state 3]
Mapper	::= MapperName SyntaxFile . Imports Definitions 

Import	::= . "import" PackageName ":" Class ";" 
Import	::= . "import" PackageName ":" Class <62> ";" 
<61>	::= . Import 
<61>	::= . <61> Import 
Imports	::= . 
Imports	::= . <61> 

shift Imports -> 10
shift <61> -> 11
shift Import -> 12
shift "import" -> 13

reduce Imports	::= on { StringLiteral Identifier <68> }



------------------------------
[state 4]
SyntaxFile	::= Dtd . 



reduce SyntaxFile	::= Dtd on { "import" StringLiteral Identifier <68> }



------------------------------
[state 5]
SyntaxFile	::= Grammar . 



reduce SyntaxFile	::= Grammar on { "import" StringLiteral Identifier <68> }



------------------------------
[state 6]
Dtd	::= "dtd" . "=" StringLiteral ";" 


shift "=" -> 14




------------------------------
[state 7]
Grammar	::= "grm" . "=" StringLiteral ";" 


shift "=" -> 15




------------------------------
[state 8]
MapperName	::= "mapper" Name . ";" 


shift ";" -> 16




------------------------------
[state 9]
Name	::= Identifier . <63> 
Name	::= Identifier . 

<63>	::= . "." Identifier 
<63>	::= . <63> "." Identifier 

shift <63> -> 17
shift "." -> 18

reduce Name	::= Identifier on { ";" ":" }



------------------------------
[state 10]
Mapper	::= MapperName SyntaxFile Imports . Definitions 

StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Symbol	::= . StringSymbol 
Symbol	::= . IdentifierSymbol 
Group	::= . Symbol <65> 
<64>	::= . Group 
<64>	::= . <64> Group 
Definitions	::= . 
Definitions	::= . <64> 

shift Definitions -> 19
shift <64> -> 20
shift Group -> 21
shift Symbol -> 22
shift IdentifierSymbol -> 23
shift StringSymbol -> 24
shift Identifier -> 25
shift StringLiteral -> 26

reduce Definitions	::= on { <68> }



------------------------------
[state 11]
Imports	::= <61> . 
<61>	::= <61> . Import 

Import	::= . "import" PackageName ":" Class ";" 
Import	::= . "import" PackageName ":" Class <62> ";" 

shift Import -> 27
shift "import" -> 13

reduce Imports	::= <61> on { StringLiteral Identifier <68> }



------------------------------
[state 12]
<61>	::= Import . 



reduce <61>	::= Import on { "import" StringLiteral Identifier <68> }



------------------------------
[state 13]
Import	::= "import" . PackageName ":" Class <62> ";" 
Import	::= "import" . PackageName ":" Class ";" 

Name	::= . Identifier 
Name	::= . Identifier <63> 
PackageName	::= . Name 

shift PackageName -> 28
shift Name -> 29
shift Identifier -> 9




------------------------------
[state 14]
Dtd	::= "dtd" "=" . StringLiteral ";" 


shift StringLiteral -> 30




------------------------------
[state 15]
Grammar	::= "grm" "=" . StringLiteral ";" 


shift StringLiteral -> 31




------------------------------
[state 16]
MapperName	::= "mapper" Name ";" . 



reduce MapperName	::= "mapper" Name ";" on { "grm" "dtd" }



------------------------------
[state 17]
Name	::= Identifier <63> . 
<63>	::= <63> . "." Identifier 


shift "." -> 32

reduce Name	::= Identifier <63> on { ";" ":" }



------------------------------
[state 18]
<63>	::= "." . Identifier 


shift Identifier -> 33




------------------------------
[state 19]
Mapper	::= MapperName SyntaxFile Imports Definitions . 



reduce Mapper	::= MapperName SyntaxFile Imports Definitions on { <68> }



------------------------------
[state 20]
Definitions	::= <64> . 
<64>	::= <64> . Group 

StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Symbol	::= . StringSymbol 
Symbol	::= . IdentifierSymbol 
Group	::= . Symbol <65> 

shift Group -> 34
shift Symbol -> 22
shift IdentifierSymbol -> 23
shift StringSymbol -> 24
shift Identifier -> 25
shift StringLiteral -> 26

reduce Definitions	::= <64> on { <68> }



------------------------------
[state 21]
<64>	::= Group . 



reduce <64>	::= Group on { StringLiteral Identifier <68> }



------------------------------
[state 22]
Group	::= Symbol . <65> 

AttributeName	::= . 
AttributeName	::= . ":" Identifier 
Attribute	::= . AttributeName "=>" Constructor Visibility 
<65>	::= . Attribute 
<65>	::= . <65> Attribute 

shift <65> -> 35
shift Attribute -> 36
shift AttributeName -> 37
shift ":" -> 38

reduce AttributeName	::= on { "=>" }



------------------------------
[state 23]
Symbol	::= IdentifierSymbol . 



reduce Symbol	::= IdentifierSymbol on { ":" "=>" }



------------------------------
[state 24]
Symbol	::= StringSymbol . 



reduce Symbol	::= StringSymbol on { ":" "=>" }



------------------------------
[state 25]
IdentifierSymbol	::= Identifier . 



reduce IdentifierSymbol	::= Identifier on { ":" "=>" }



------------------------------
[state 26]
StringSymbol	::= StringLiteral . 



reduce StringSymbol	::= StringLiteral on { ":" "=>" }



------------------------------
[state 27]
<61>	::= <61> Import . 



reduce <61>	::= <61> Import on { "import" StringLiteral Identifier <68> }



------------------------------
[state 28]
Import	::= "import" PackageName . ":" Class <62> ";" 
Import	::= "import" PackageName . ":" Class ";" 


shift ":" -> 39




------------------------------
[state 29]
PackageName	::= Name . 



reduce PackageName	::= Name on { ":" }



------------------------------
[state 30]
Dtd	::= "dtd" "=" StringLiteral . ";" 


shift ";" -> 40




------------------------------
[state 31]
Grammar	::= "grm" "=" StringLiteral . ";" 


shift ";" -> 41




------------------------------
[state 32]
<63>	::= <63> "." . Identifier 


shift Identifier -> 42




------------------------------
[state 33]
<63>	::= "." Identifier . 



reduce <63>	::= "." Identifier on { ";" ":" "." }



------------------------------
[state 34]
<64>	::= <64> Group . 



reduce <64>	::= <64> Group on { StringLiteral Identifier <68> }



------------------------------
[state 35]
Group	::= Symbol <65> . 
<65>	::= <65> . Attribute 

AttributeName	::= . 
AttributeName	::= . ":" Identifier 
Attribute	::= . AttributeName "=>" Constructor Visibility 

shift Attribute -> 43
shift AttributeName -> 37
shift ":" -> 38

reduce Group	::= Symbol <65> on { StringLiteral Identifier <68> }
reduce AttributeName	::= on { "=>" }



------------------------------
[state 36]
<65>	::= Attribute . 



reduce <65>	::= Attribute on { ":" "=>" StringLiteral Identifier <68> }



------------------------------
[state 37]
Attribute	::= AttributeName . "=>" Constructor Visibility 


shift "=>" -> 44




------------------------------
[state 38]
AttributeName	::= ":" . Identifier 


shift Identifier -> 45




------------------------------
[state 39]
Import	::= "import" PackageName ":" . Class <62> ";" 
Import	::= "import" PackageName ":" . Class ";" 

Class	::= . Identifier 
Class	::= . Identifier "->" Identifier 

shift Class -> 46
shift Identifier -> 47




------------------------------
[state 40]
Dtd	::= "dtd" "=" StringLiteral ";" . 



reduce Dtd	::= "dtd" "=" StringLiteral ";" on { "import" StringLiteral Identifier <68> }



------------------------------
[state 41]
Grammar	::= "grm" "=" StringLiteral ";" . 



reduce Grammar	::= "grm" "=" StringLiteral ";" on { "import" StringLiteral Identifier <68> }



------------------------------
[state 42]
<63>	::= <63> "." Identifier . 



reduce <63>	::= <63> "." Identifier on { ";" ":" "." }



------------------------------
[state 43]
<65>	::= <65> Attribute . 



reduce <65>	::= <65> Attribute on { ":" "=>" StringLiteral Identifier <68> }



------------------------------
[state 44]
Attribute	::= AttributeName "=>" . Constructor Visibility 

Internal	::= . "[" Identifier "]" 
ClassRef	::= . Identifier 
MemberRef	::= . Identifier "." Identifier 
Copy	::= . "(" Identifier ")" 
Constructor	::= . Internal 
Constructor	::= . ClassRef 
Constructor	::= . MemberRef 
Constructor	::= . Copy 

shift Constructor -> 48
shift Copy -> 49
shift MemberRef -> 50
shift ClassRef -> 51
shift Internal -> 52
shift "(" -> 53
shift Identifier -> 54
shift "[" -> 55




------------------------------
[state 45]
AttributeName	::= ":" Identifier . 



reduce AttributeName	::= ":" Identifier on { "=>" }



------------------------------
[state 46]
Import	::= "import" PackageName ":" Class . <62> ";" 
Import	::= "import" PackageName ":" Class . ";" 

<62>	::= . "," Class 
<62>	::= . <62> "," Class 

shift <62> -> 56
shift ";" -> 57
shift "," -> 58




------------------------------
[state 47]
Class	::= Identifier . "->" Identifier 
Class	::= Identifier . 


shift "->" -> 59

reduce Class	::= Identifier on { ";" "," }



------------------------------
[state 48]
Attribute	::= AttributeName "=>" Constructor . Visibility 

Implicit	::= . ";" 
Explicit	::= . ":" ";" 
Explicit	::= . ":" <66> ";" 
Visibility	::= . Implicit 
Visibility	::= . Explicit 

shift Visibility -> 60
shift Explicit -> 61
shift Implicit -> 62
shift ":" -> 63
shift ";" -> 64




------------------------------
[state 49]
Constructor	::= Copy . 



reduce Constructor	::= Copy on { ";" ":" }



------------------------------
[state 50]
Constructor	::= MemberRef . 



reduce Constructor	::= MemberRef on { ";" ":" }



------------------------------
[state 51]
Constructor	::= ClassRef . 



reduce Constructor	::= ClassRef on { ";" ":" }



------------------------------
[state 52]
Constructor	::= Internal . 



reduce Constructor	::= Internal on { ";" ":" }



------------------------------
[state 53]
Copy	::= "(" . Identifier ")" 


shift Identifier -> 65




------------------------------
[state 54]
ClassRef	::= Identifier . 
MemberRef	::= Identifier . "." Identifier 


shift "." -> 66

reduce ClassRef	::= Identifier on { ";" ":" }



------------------------------
[state 55]
Internal	::= "[" . Identifier "]" 


shift Identifier -> 67




------------------------------
[state 56]
Import	::= "import" PackageName ":" Class <62> . ";" 
<62>	::= <62> . "," Class 


shift ";" -> 68
shift "," -> 69




------------------------------
[state 57]
Import	::= "import" PackageName ":" Class ";" . 



reduce Import	::= "import" PackageName ":" Class ";" on { "import" StringLiteral Identifier <68> }



------------------------------
[state 58]
<62>	::= "," . Class 

Class	::= . Identifier 
Class	::= . Identifier "->" Identifier 

shift Class -> 70
shift Identifier -> 47




------------------------------
[state 59]
Class	::= Identifier "->" . Identifier 


shift Identifier -> 71




------------------------------
[state 60]
Attribute	::= AttributeName "=>" Constructor Visibility . 



reduce Attribute	::= AttributeName "=>" Constructor Visibility on { ":" "=>" StringLiteral Identifier <68> }



------------------------------
[state 61]
Visibility	::= Explicit . 



reduce Visibility	::= Explicit on { ":" "=>" StringLiteral Identifier <68> }



------------------------------
[state 62]
Visibility	::= Implicit . 



reduce Visibility	::= Implicit on { ":" "=>" StringLiteral Identifier <68> }



------------------------------
[state 63]
Explicit	::= ":" . <66> ";" 
Explicit	::= ":" . ";" 

<66>	::= . ">" Path 
<66>	::= . <66> ">" Path 

shift ";" -> 72
shift <66> -> 73
shift ">" -> 74




------------------------------
[state 64]
Implicit	::= ";" . 



reduce Implicit	::= ";" on { ":" "=>" StringLiteral Identifier <68> }



------------------------------
[state 65]
Copy	::= "(" Identifier . ")" 


shift ")" -> 75




------------------------------
[state 66]
MemberRef	::= Identifier "." . Identifier 


shift Identifier -> 76




------------------------------
[state 67]
Internal	::= "[" Identifier . "]" 


shift "]" -> 77




------------------------------
[state 68]
Import	::= "import" PackageName ":" Class <62> ";" . 



reduce Import	::= "import" PackageName ":" Class <62> ";" on { "import" StringLiteral Identifier <68> }



------------------------------
[state 69]
<62>	::= <62> "," . Class 

Class	::= . Identifier 
Class	::= . Identifier "->" Identifier 

shift Class -> 78
shift Identifier -> 47




------------------------------
[state 70]
<62>	::= "," Class . 



reduce <62>	::= "," Class on { ";" "," }



------------------------------
[state 71]
Class	::= Identifier "->" Identifier . 



reduce Class	::= Identifier "->" Identifier on { ";" "," }



------------------------------
[state 72]
Explicit	::= ":" ";" . 



reduce Explicit	::= ":" ";" on { ":" "=>" StringLiteral Identifier <68> }



------------------------------
[state 73]
Explicit	::= ":" <66> . ";" 
<66>	::= <66> . ">" Path 


shift ";" -> 79
shift ">" -> 80




------------------------------
[state 74]
<66>	::= ">" . Path 

Downs	::= . "//" 
Path	::= . NormalPath 
Path	::= . ImplicitPath 
Path	::= . LocalPath 
NormalPath	::= . <67> 
ImplicitPath	::= . "\\\\*" 
LocalPath	::= . Identifier 
<67>	::= . <67> Step 
<67>	::= . Step 
Step	::= . Move Identifier 
Move	::= . Down 
Move	::= . Up 
Move	::= . Ups 
Move	::= . Downs 
Down	::= . "/" 
Up	::= . "\\" 
Ups	::= . "\\\\" 

shift Path -> 81
shift "\\\\" -> 82
shift "\\" -> 83
shift "/" -> 84
shift Downs -> 85
shift Ups -> 86
shift Up -> 87
shift Down -> 88
shift Move -> 89
shift Step -> 90
shift <67> -> 91
shift Identifier -> 92
shift "\\\\*" -> 93
shift LocalPath -> 94
shift ImplicitPath -> 95
shift NormalPath -> 96
shift "//" -> 97




------------------------------
[state 75]
Copy	::= "(" Identifier ")" . 



reduce Copy	::= "(" Identifier ")" on { ";" ":" }



------------------------------
[state 76]
MemberRef	::= Identifier "." Identifier . 



reduce MemberRef	::= Identifier "." Identifier on { ";" ":" }



------------------------------
[state 77]
Internal	::= "[" Identifier "]" . 



reduce Internal	::= "[" Identifier "]" on { ";" ":" }



------------------------------
[state 78]
<62>	::= <62> "," Class . 



reduce <62>	::= <62> "," Class on { ";" "," }



------------------------------
[state 79]
Explicit	::= ":" <66> ";" . 



reduce Explicit	::= ":" <66> ";" on { ":" "=>" StringLiteral Identifier <68> }



------------------------------
[state 80]
<66>	::= <66> ">" . Path 

Downs	::= . "//" 
Path	::= . NormalPath 
Path	::= . ImplicitPath 
Path	::= . LocalPath 
NormalPath	::= . <67> 
ImplicitPath	::= . "\\\\*" 
LocalPath	::= . Identifier 
<67>	::= . <67> Step 
<67>	::= . Step 
Step	::= . Move Identifier 
Move	::= . Down 
Move	::= . Up 
Move	::= . Ups 
Move	::= . Downs 
Down	::= . "/" 
Up	::= . "\\" 
Ups	::= . "\\\\" 

shift Path -> 98
shift "\\\\" -> 82
shift "\\" -> 83
shift "/" -> 84
shift Downs -> 85
shift Ups -> 86
shift Up -> 87
shift Down -> 88
shift Move -> 89
shift Step -> 90
shift <67> -> 91
shift Identifier -> 92
shift "\\\\*" -> 93
shift LocalPath -> 94
shift ImplicitPath -> 95
shift NormalPath -> 96
shift "//" -> 97




------------------------------
[state 81]
<66>	::= ">" Path . 



reduce <66>	::= ">" Path on { ";" ">" }



------------------------------
[state 82]
Ups	::= "\\\\" . 



reduce Ups	::= "\\\\" on { Identifier }



------------------------------
[state 83]
Up	::= "\\" . 



reduce Up	::= "\\" on { Identifier }



------------------------------
[state 84]
Down	::= "/" . 



reduce Down	::= "/" on { Identifier }



------------------------------
[state 85]
Move	::= Downs . 



reduce Move	::= Downs on { Identifier }



------------------------------
[state 86]
Move	::= Ups . 



reduce Move	::= Ups on { Identifier }



------------------------------
[state 87]
Move	::= Up . 



reduce Move	::= Up on { Identifier }



------------------------------
[state 88]
Move	::= Down . 



reduce Move	::= Down on { Identifier }



------------------------------
[state 89]
Step	::= Move . Identifier 


shift Identifier -> 99




------------------------------
[state 90]
<67>	::= Step . 



reduce <67>	::= Step on { ";" ">" "\\\\" "\\" "//" "/" }



------------------------------
[state 91]
NormalPath	::= <67> . 
<67>	::= <67> . Step 

Downs	::= . "//" 
Ups	::= . "\\\\" 
Up	::= . "\\" 
Down	::= . "/" 
Move	::= . Downs 
Move	::= . Ups 
Move	::= . Up 
Move	::= . Down 
Step	::= . Move Identifier 

shift Step -> 100
shift Move -> 89
shift Down -> 88
shift Up -> 87
shift Ups -> 86
shift Downs -> 85
shift "/" -> 84
shift "\\" -> 83
shift "\\\\" -> 82
shift "//" -> 97

reduce NormalPath	::= <67> on { ";" ">" }



------------------------------
[state 92]
LocalPath	::= Identifier . 



reduce LocalPath	::= Identifier on { ";" ">" }



------------------------------
[state 93]
ImplicitPath	::= "\\\\*" . 



reduce ImplicitPath	::= "\\\\*" on { ";" ">" }



------------------------------
[state 94]
Path	::= LocalPath . 



reduce Path	::= LocalPath on { ";" ">" }



------------------------------
[state 95]
Path	::= ImplicitPath . 



reduce Path	::= ImplicitPath on { ";" ">" }



------------------------------
[state 96]
Path	::= NormalPath . 



reduce Path	::= NormalPath on { ";" ">" }



------------------------------
[state 97]
Downs	::= "//" . 



reduce Downs	::= "//" on { Identifier }



------------------------------
[state 98]
<66>	::= <66> ">" Path . 



reduce <66>	::= <66> ">" Path on { ";" ">" }



------------------------------
[state 99]
Step	::= Move Identifier . 



reduce Step	::= Move Identifier on { ";" ">" "\\\\" "\\" "//" "/" }



------------------------------
[state 100]
<67>	::= <67> Step . 



reduce <67>	::= <67> Step on { ";" ">" "\\\\" "\\" "//" "/" }



------------------------------
[state 101]


shift <68> -> 102




------------------------------
[state 102]





inline symbols: { }
Scanner

start = 0 end = { 1 2 3 4 5 6 7 8 10 11 12 13 14 15 16 17 19 20 22 23 24 25 26 27 28 29 33 34 35 36 37 38 40 41 42 43 44 45 46 47 }
  0 <null>		[(0)-(8)]->48	[(9)]->20	[(10)]->20	[(11)]->48	[(12)]->20	[(13)]->20	[(14)-(31)]->48	[' ' (32)]->20	['!' (33)]->48	['"' (34)]->18	['#' (35)]->21	['$' (36)]->19	['%' (37)-''' (39)]->48	['(' (40)]->13	[')' (41)]->14	['*' (42)-'+' (43)]->48	[',' (44)]->8	['-' (45)]->9	['.' (46)]->10	['/' (47)]->17	['0' (48)-'9' (57)]->48	[':' (58)]->7	[';' (59)]->2	['<' (60)]->48	['=' (61)]->4	['>' (62)]->15	['?' (63)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)]->11	['\' (92)]->16	[']' (93)]->12	['^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'c' (99)]->19	['d' (100)]->5	['e' (101)-'f' (102)]->19	['g' (103)]->3	['h' (104)]->19	['i' (105)]->6	['j' (106)-'l' (108)]->19	['m' (109)]->1	['n' (110)-'z' (122)]->19	['{' (123)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  1 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)]->22	['b' (98)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  2 { 1 }		[(0)-'?' (65535)]->48
  3 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'q' (113)]->19	['r' (114)]->23	['s' (115)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  4 { 3 }		[(0)-'=' (61)]->48	['>' (62)]->24	['?' (63)-'?' (65535)]->48
  5 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'s' (115)]->19	['t' (116)]->25	['u' (117)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  6 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'l' (108)]->19	['m' (109)]->26	['n' (110)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  7 { 6 }		[(0)-'?' (65535)]->48
  8 { 7 }		[(0)-'?' (65535)]->48
  9 <null>		[(0)-'=' (61)]->48	['>' (62)]->27	['?' (63)-'?' (65535)]->48
  10 { 9 }		[(0)-'?' (65535)]->48
  11 { 10 }		[(0)-'?' (65535)]->48
  12 { 11 }		[(0)-'?' (65535)]->48
  13 { 12 }		[(0)-'?' (65535)]->48
  14 { 13 }		[(0)-'?' (65535)]->48
  15 { 15 }		[(0)-'?' (65535)]->48
  16 { 18 }		[(0)-'[' (91)]->48	['\' (92)]->28	[']' (93)-'?' (65535)]->48
  17 { 20 }		[(0)-')' (41)]->48	['*' (42)]->30	['+' (43)-'.' (46)]->48	['/' (47)]->29	['0' (48)-'?' (65535)]->48
  18 <null>		[(0)-(9)]->32	[(10)]->48	[(11)-(12)]->32	[(13)]->48	[(14)-'!' (33)]->32	['"' (34)]->48	['#' (35)-'[' (91)]->32	['\' (92)]->31	[']' (93)-'?' (65535)]->32
  19 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  20 { 58 }		[(0)-(8)]->48	[(9)]->20	[(10)]->20	[(11)]->48	[(12)]->20	[(13)]->20	[(14)-(31)]->48	[' ' (32)]->20	['!' (33)-'?' (65535)]->48
  21 <null>		[(0)-(9)]->21	[(10)]->33	[(11)-(12)]->21	[(13)]->33	[(14)-'?' (65535)]->21
  22 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'o' (111)]->19	['p' (112)]->34	['q' (113)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  23 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'l' (108)]->19	['m' (109)]->35	['n' (110)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  24 { 14 }		[(0)-'?' (65535)]->48
  25 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'c' (99)]->19	['d' (100)]->36	['e' (101)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  26 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'o' (111)]->19	['p' (112)]->37	['q' (113)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  27 { 8 }		[(0)-'?' (65535)]->48
  28 { 17 }		[(0)-')' (41)]->48	['*' (42)]->38	['+' (43)-'?' (65535)]->48
  29 { 19 }		[(0)-'?' (65535)]->48
  30 <null>		[(0)-')' (41)]->30	['*' (42)]->39	['+' (43)-'?' (65535)]->30
  31 <null>		[(0)-'?' (65535)]->32
  32 <null>		[(0)-(9)]->32	[(10)]->48	[(11)-(12)]->32	[(13)]->48	[(14)-'!' (33)]->32	['"' (34)]->40	['#' (35)-'[' (91)]->32	['\' (92)]->31	[']' (93)-'?' (65535)]->32
  33 { 59 }		[(0)-'?' (65535)]->48
  34 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'o' (111)]->19	['p' (112)]->41	['q' (113)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  35 { 2 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  36 { 4 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  37 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'n' (110)]->19	['o' (111)]->42	['p' (112)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  38 { 16 }		[(0)-'?' (65535)]->48
  39 <null>		[(0)-')' (41)]->30	['*' (42)]->39	['+' (43)-'.' (46)]->30	['/' (47)]->43	['0' (48)-'?' (65535)]->30
  40 { 56 }		[(0)-'?' (65535)]->48
  41 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'d' (100)]->19	['e' (101)]->44	['f' (102)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  42 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'q' (113)]->19	['r' (114)]->45	['s' (115)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  43 { 60 }		[(0)-'?' (65535)]->48
  44 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'q' (113)]->19	['r' (114)]->46	['s' (115)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  45 { 57 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'s' (115)]->19	['t' (116)]->47	['u' (117)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  46 { 0 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  47 { 5 }		[(0)-(8)]->19	[(9)-(13)]->48	[(14)-(27)]->19	[(28)-'#' (35)]->48	['$' (36)]->19	['%' (37)-'/' (47)]->48	['0' (48)-'9' (57)]->19	[':' (58)-'@' (64)]->48	['A' (65)-'Z' (90)]->19	['[' (91)-'^' (94)]->48	['_' (95)]->19	['`' (96)]->48	['a' (97)-'z' (122)]->19	['{' (123)-'~' (126)]->48	['' (127)-'?' (159)]->19	['?' (160)-'?' (161)]->48	['?' (162)-'?' (165)]->19	['?' (166)-'?' (169)]->48	['?' (170)]->19	['?' (171)-'?' (180)]->48	['?' (181)]->19	['?' (182)-'?' (185)]->48	['?' (186)]->19	['?' (187)-'?' (191)]->48	['?' (192)-'?' (214)]->19	['?' (215)]->48	['?' (216)-'?' (246)]->19	['?' (247)]->48	['?' (248)-'?' (255)]->19	['?' (256)-'?' (65535)]->48
  48 <null>		[(0)-'?' (65535)]->48
fa end

scanner modes: 1
 mode 0 { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 }
modes for parser states: 
 0 0
 1 0
 2 0
 3 0
 4 0
 5 0
 6 0
 7 0
 8 0
 9 0
 10 0
 11 0
 12 0
 13 0
 14 0
 15 0
 16 0
 17 0
 18 0
 19 0
 20 0
 21 0
 22 0
 23 0
 24 0
 25 0
 26 0
 27 0
 28 0
 29 0
 30 0
 31 0
 32 0
 33 0
 34 0
 35 0
 36 0
 37 0
 38 0
 39 0
 40 0
 41 0
 42 0
 43 0
 44 0
 45 0
 46 0
 47 0
 48 0
 49 0
 50 0
 51 0
 52 0
 53 0
 54 0
 55 0
 56 0
 57 0
 58 0
 59 0
 60 0
 61 0
 62 0
 63 0
 64 0
 65 0
 66 0
 67 0
 68 0
 69 0
 70 0
 71 0
 72 0
 73 0
 74 0
 75 0
 76 0
 77 0
 78 0
 79 0
 80 0
 81 0
 82 0
 83 0
 84 0
 85 0
 86 0
 87 0
 88 0
 89 0
 90 0
 91 0
 92 0
 93 0
 94 0
 95 0
 96 0
 97 0
 98 0
 99 0
 100 0
 101 0
 102 0


Attribute Grammar

[0]	Mapper	::= MapperName SyntaxFile Imports Definitions
		Mapper[-1].null  <==  (SyntaxFile[1].SyntaxFile)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].null  <==  (Definitions[3].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].merged119  <==  (MapperName[0].merged118)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].Mapper  <==  (Mapper[-1].merged119, Mapper[-1].null, Mapper[-1].null)
			de.mlhartme.mork.compiler.Specification de.mlhartme.mork.compiler.Specification2Tode.mlhartme.mork.mapping.DefinitionArray(java.lang.String, de.mlhartme.mork.compiler.Syntax, java.util.List)
		Mapper[-1].null  <==  (Definitions[3].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].null  <==  (Definitions[3].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].null  <==  (Definitions[3].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].null  <==  (Definitions[3].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].SideEffect  <==  (Mapper[-1].null, Mapper[-1].null, Mapper[-1].null, Mapper[-1].null)
			java.lang.Object sideEffect(java.util.List, java.util.List, java.util.List, java.util.List)
		Mapper[-1].null  <==  (Imports[2].Imports)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].null  <==  (Imports[2].Imports)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].null  <==  (Imports[2].Imports)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].null  <==  (SyntaxFile[1].SymbolTable)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].null  <==  (SyntaxFile[1].Grammar)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].null  <==  (SyntaxFile[1].SymbolTable)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].null)
			java.lang.Object copy(java.lang.Object)
		Mapper[-1].null  <==  (SyntaxFile[1].SymbolTable)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].null)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].Mapper)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].Mapper)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].Mapper)
			java.lang.Object copy(java.lang.Object)
		Definitions[3].null  <==  (Mapper[-1].Mapper)
			java.lang.Object copy(java.lang.Object)

[1]	MapperName	::= "mapper" Name ";"
		MapperName[-1].merged118  <==  (Name[1].Name)
			java.lang.Object copy(java.lang.Object)

[2]	SyntaxFile	::= Dtd
		SyntaxFile[-1].merged121  <==  (Dtd[0].Dtd)
			java.lang.Object copy(java.lang.Object)
		SyntaxFile[-1].SyntaxFile  <==  (SyntaxFile[-1].merged121)
			de.mlhartme.mork.compiler.Syntax Syntax(de.mlhartme.mork.compiler.Syntax)
		SyntaxFile[-1].Grammar  <==  (SyntaxFile[-1].SyntaxFile)
			de.mlhartme.mork.grammar.Grammar getIFGrammar(de.mlhartme.mork.compiler.Syntax)
		SyntaxFile[-1].SymbolTable  <==  (SyntaxFile[-1].SyntaxFile)
			de.mlhartme.mork.util.StringArrayList getIFSymbolTable(de.mlhartme.mork.compiler.Syntax)

[3]	SyntaxFile	::= Grammar
		SyntaxFile[-1].merged121  <==  (Grammar[0].Grammar)
			java.lang.Object copy(java.lang.Object)
		SyntaxFile[-1].SyntaxFile  <==  (SyntaxFile[-1].merged121)
			de.mlhartme.mork.compiler.Syntax Syntax(de.mlhartme.mork.compiler.Syntax)
		SyntaxFile[-1].Grammar  <==  (SyntaxFile[-1].SyntaxFile)
			de.mlhartme.mork.grammar.Grammar getIFGrammar(de.mlhartme.mork.compiler.Syntax)
		SyntaxFile[-1].SymbolTable  <==  (SyntaxFile[-1].SyntaxFile)
			de.mlhartme.mork.util.StringArrayList getIFSymbolTable(de.mlhartme.mork.compiler.Syntax)

[4]	Grammar	::= "grm" "=" StringLiteral ";"
		Grammar[-1].merged123  <==  (StringLiteral[2].null)
			java.lang.Object copy(java.lang.Object)
		Grammar[-1].Grammar  <==  (Grammar[-1].null, Grammar[-1].merged123)
			de.mlhartme.mork.compiler.Syntax loadGrammar(java.lang.Object, java.lang.String)

[5]	Dtd	::= "dtd" "=" StringLiteral ";"
		Dtd[-1].merged125  <==  (StringLiteral[2].null)
			java.lang.Object copy(java.lang.Object)
		Dtd[-1].Dtd  <==  (Dtd[-1].null, Dtd[-1].merged125)
			de.mlhartme.mork.compiler.Syntax loadDtd(java.lang.Object, java.lang.String)

[6]	Imports	::= <61>
		Imports[-1].merged130  <==  (<61>[0].merged131)
			java.lang.Object copy(java.lang.Object)
		Imports[-1].Imports  <==  (Imports[-1].merged130)
			de.mlhartme.mork.mapping.Library de.mlhartme.mork.mapping.Library0Tode.mlhartme.mork.mapping.ImportArray(java.util.List)

[7]	Imports	::=
		Imports[-1].merged130  <==  ()
			java.lang.Object createSequence()
		Imports[-1].Imports  <==  (Imports[-1].merged130)
			de.mlhartme.mork.mapping.Library de.mlhartme.mork.mapping.Library0Tode.mlhartme.mork.mapping.ImportArray(java.util.List)

[8]	<61>	::= <61> Import
		<61>[-1].merged131  <==  (<61>[0].merged131, Import[1].merged132)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)

[9]	<61>	::= Import
		<61>[-1].merged131  <==  (Import[0].merged132)
			java.lang.Object copy(java.lang.Object)

[10]	Import	::= "import" PackageName ":" Class <62> ";"
		Import[-1].merged132  <==  (Class[3].Class, <62>[4].merged133)
			java.lang.Object sequenceAndSequence0createSequenceValue(java.lang.Object, java.lang.Object)
		Import[-1].null  <==  (PackageName[1].PackageName)
			java.lang.Object copy(java.lang.Object)
		Class[3].null  <==  (Import[-1].null)
			java.lang.Object copy(java.lang.Object)
		<62>[4].null  <==  (Import[-1].null)
			java.lang.Object copy(java.lang.Object)

[11]	Import	::= "import" PackageName ":" Class ";"
		Import[-1].merged132  <==  (Class[3].Class)
			java.lang.Object createSequenceValue(java.lang.Object)
		Import[-1].null  <==  (PackageName[1].PackageName)
			java.lang.Object copy(java.lang.Object)
		Class[3].null  <==  (Import[-1].null)
			java.lang.Object copy(java.lang.Object)

[12]	<62>	::= <62> "," Class
		<62>[-1].merged133  <==  (<62>[0].merged133, Class[2].Class)
			java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)
		Class[2].null  <==  (<62>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<62>[0].null  <==  (<62>[-1].null)
			java.lang.Object copy(java.lang.Object)

[13]	<62>	::= "," Class
		<62>[-1].merged133  <==  (Class[1].Class)
			java.lang.Object createSequenceValue(java.lang.Object)
		Class[1].null  <==  (<62>[-1].null)
			java.lang.Object copy(java.lang.Object)

[14]	Class	::= Identifier "->" Identifier
		Class[-1].merged137  <==  (Identifier[0].null)
			java.lang.Object copy(java.lang.Object)
		Class[-1].merged139  <==  (Identifier[2].null)
			java.lang.Object copy(java.lang.Object)
		Class[-1].Class  <==  (Class[-1].null, Class[-1].merged137, Class[-1].merged139)
			de.mlhartme.mork.mapping.Import create(java.lang.String, java.lang.String, java.lang.String)

[15]	Class	::= Identifier
		Class[-1].merged137  <==  (Identifier[0].null)
			java.lang.Object copy(java.lang.Object)
		Class[-1].merged139  <==  ()
			java.lang.Object createOption()
		Class[-1].Class  <==  (Class[-1].null, Class[-1].merged137, Class[-1].merged139)
			de.mlhartme.mork.mapping.Import create(java.lang.String, java.lang.String, java.lang.String)

[16]	PackageName	::= Name
		PackageName[-1].merged135  <==  (Name[0].Name)
			java.lang.Object copy(java.lang.Object)
		PackageName[-1].PackageName  <==  (PackageName[-1].merged135)
			java.lang.String String(java.lang.String)

[17]	Name	::= Identifier <63>
		Name[-1].merged142  <==  (Identifier[0].null, <63>[1].merged143)
			java.lang.Object sequenceAndSequence0createSequenceValue(java.lang.Object, java.lang.Object)
		Name[-1].Name  <==  (Name[-1].merged142)
			java.lang.String name0Tojava.lang.StringArray(java.util.List)

[18]	Name	::= Identifier
		Name[-1].merged142  <==  (Identifier[0].null)
			java.lang.Object createSequenceValue(java.lang.Object)
		Name[-1].Name  <==  (Name[-1].merged142)
			java.lang.String name0Tojava.lang.StringArray(java.util.List)

[19]	<63>	::= <63> "." Identifier
		<63>[-1].merged143  <==  (<63>[0].merged143, Identifier[2].null)
			java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)

[20]	<63>	::= "." Identifier
		<63>[-1].merged143  <==  (Identifier[1].null)
			java.lang.Object createSequenceValue(java.lang.Object)

[21]	Constructor	::= Copy
		Copy[0].null  <==  (Constructor[-1].null)
			java.lang.Object copy(java.lang.Object)
		Constructor[-1].merged164  <==  (Copy[0].Copy)
			java.lang.Object copy(java.lang.Object)

[22]	Constructor	::= MemberRef
		MemberRef[0].null  <==  (Constructor[-1].null)
			java.lang.Object copy(java.lang.Object)
		Constructor[-1].merged164  <==  (MemberRef[0].MemberRef)
			java.lang.Object copy(java.lang.Object)

[23]	Constructor	::= ClassRef
		ClassRef[0].null  <==  (Constructor[-1].null)
			java.lang.Object copy(java.lang.Object)
		Constructor[-1].merged164  <==  (ClassRef[0].ClassRef)
			java.lang.Object copy(java.lang.Object)

[24]	Constructor	::= Internal
		Constructor[-1].merged164  <==  (Internal[0].Internal)
			java.lang.Object copy(java.lang.Object)

[25]	ClassRef	::= Identifier
		ClassRef[-1].merged145  <==  (Identifier[0].null)
			java.lang.Object copy(java.lang.Object)
		ClassRef[-1].ClassRef  <==  (ClassRef[-1].null, ClassRef[-1].merged145)
			de.mlhartme.mork.reflect.Selection lookupClass(de.mlhartme.mork.mapping.Library, java.lang.String)

[26]	MemberRef	::= Identifier "." Identifier
		MemberRef[-1].merged147  <==  (Identifier[0].null)
			java.lang.Object copy(java.lang.Object)
		MemberRef[-1].merged149  <==  (Identifier[2].null)
			java.lang.Object copy(java.lang.Object)
		MemberRef[-1].MemberRef  <==  (MemberRef[-1].null, MemberRef[-1].merged147, MemberRef[-1].merged149)
			de.mlhartme.mork.reflect.Selection lookupMember(de.mlhartme.mork.mapping.Library, java.lang.String, java.lang.String)

[27]	Internal	::= "[" Identifier "]"
		Internal[-1].merged151  <==  (Identifier[1].null)
			java.lang.Object copy(java.lang.Object)
		Internal[-1].Internal  <==  (Internal[-1].merged151)
			de.mlhartme.mork.mapping.Internal de.mlhartme.mork.mapping.Internal(java.lang.String)

[28]	Copy	::= "(" Identifier ")"
		Copy[-1].merged153  <==  (Identifier[1].null)
			java.lang.Object copy(java.lang.Object)
		Copy[-1].Copy  <==  (Copy[-1].null, Copy[-1].merged153)
			de.mlhartme.mork.reflect.Selection copyFunctionRef(de.mlhartme.mork.mapping.Library, java.lang.String)

[29]	Definitions	::= <64>
		Definitions[-1].null  <==  (<64>[0].null)
			java.lang.Object copy(java.lang.Object)
		Definitions[-1].null  <==  (<64>[0].null)
			java.lang.Object copy(java.lang.Object)
		Definitions[-1].null  <==  (<64>[0].null)
			java.lang.Object copy(java.lang.Object)
		Definitions[-1].null  <==  (<64>[0].null)
			java.lang.Object copy(java.lang.Object)
		Definitions[-1].null  <==  (<64>[0].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (Definitions[-1].null)
			java.lang.Object copy(java.lang.Object)

[30]	Definitions	::=
		Definitions[-1].null  <==  ()
			java.lang.Object createSequence()
		Definitions[-1].null  <==  ()
			java.lang.Object createSequence()
		Definitions[-1].null  <==  ()
			java.lang.Object createSequence()
		Definitions[-1].null  <==  ()
			java.lang.Object createSequence()
		Definitions[-1].null  <==  ()
			java.lang.Object createSequence()

[31]	<64>	::= <64> Group
		<64>[-1].null  <==  (<64>[0].null, Group[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<64>[-1].null  <==  (<64>[0].null, Group[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<64>[-1].null  <==  (<64>[0].null, Group[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<64>[-1].null  <==  (<64>[0].null, Group[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<64>[-1].null  <==  (<64>[0].null, Group[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[1].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<64>[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)

[32]	<64>	::= Group
		<64>[-1].null  <==  (Group[0].null)
			java.lang.Object copy(java.lang.Object)
		<64>[-1].null  <==  (Group[0].null)
			java.lang.Object copy(java.lang.Object)
		<64>[-1].null  <==  (Group[0].null)
			java.lang.Object copy(java.lang.Object)
		<64>[-1].null  <==  (Group[0].null)
			java.lang.Object copy(java.lang.Object)
		<64>[-1].null  <==  (Group[0].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[0].null  <==  (<64>[-1].null)
			java.lang.Object copy(java.lang.Object)

[33]	Group	::= Symbol <65>
		Group[-1].null  <==  (<65>[1].null)
			java.lang.Object copy(java.lang.Object)
		Group[-1].null  <==  (<65>[1].null)
			java.lang.Object copy(java.lang.Object)
		Group[-1].null  <==  (<65>[1].null)
			java.lang.Object copy(java.lang.Object)
		Group[-1].null  <==  (<65>[1].null)
			java.lang.Object copy(java.lang.Object)
		Group[-1].null  <==  (<65>[1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[0].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[-1].null  <==  (Symbol[0].Symbol)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[-1].null  <==  (Symbol[0].Symbol)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		Group[-1].null  <==  (Symbol[0].Symbol)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[1].null  <==  (Group[-1].null)
			java.lang.Object copy(java.lang.Object)

[34]	<65>	::= <65> Attribute
		<65>[-1].null  <==  (<65>[0].null, Attribute[1].Attribute)
			java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)
		<65>[-1].null  <==  (<65>[0].null, Attribute[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<65>[-1].null  <==  (<65>[0].null, Attribute[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<65>[-1].null  <==  (<65>[0].null, Attribute[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<65>[-1].null  <==  (<65>[0].null, Attribute[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[1].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<65>[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)

[35]	<65>	::= Attribute
		<65>[-1].null  <==  (Attribute[0].Attribute)
			java.lang.Object createSequenceValue(java.lang.Object)
		<65>[-1].null  <==  (Attribute[0].null)
			java.lang.Object copy(java.lang.Object)
		<65>[-1].null  <==  (Attribute[0].null)
			java.lang.Object copy(java.lang.Object)
		<65>[-1].null  <==  (Attribute[0].null)
			java.lang.Object copy(java.lang.Object)
		<65>[-1].null  <==  (Attribute[0].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[0].null  <==  (<65>[-1].null)
			java.lang.Object copy(java.lang.Object)

[36]	Symbol	::= IdentifierSymbol
		Symbol[-1].merged158  <==  (IdentifierSymbol[0].merged159)
			java.lang.Object copy(java.lang.Object)
		Symbol[-1].Symbol  <==  (Symbol[-1].null, Symbol[-1].merged158)
			int symbolRef(de.mlhartme.mork.util.StringArrayList, java.lang.String)

[37]	Symbol	::= StringSymbol
		Symbol[-1].merged158  <==  (StringSymbol[0].merged157)
			java.lang.Object copy(java.lang.Object)
		Symbol[-1].Symbol  <==  (Symbol[-1].null, Symbol[-1].merged158)
			int symbolRef(de.mlhartme.mork.util.StringArrayList, java.lang.String)

[38]	StringSymbol	::= StringLiteral
		StringSymbol[-1].merged157  <==  (StringLiteral[0].null)
			java.lang.Object copy(java.lang.Object)

[39]	IdentifierSymbol	::= Identifier
		IdentifierSymbol[-1].merged159  <==  (Identifier[0].null)
			java.lang.Object copy(java.lang.Object)

[40]	Attribute	::= AttributeName "=>" Constructor Visibility
		Attribute[-1].null  <==  (Visibility[3].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[-1].null  <==  (Visibility[3].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[-1].null  <==  (Visibility[3].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[-1].null  <==  (Visibility[3].null)
			java.lang.Object copy(java.lang.Object)
		Constructor[2].null  <==  (Attribute[-1].null)
			java.lang.Object copy(java.lang.Object)
		Constructor[2].null  <==  (Attribute[-1].null)
			java.lang.Object copy(java.lang.Object)
		Constructor[2].null  <==  (Attribute[-1].null)
			java.lang.Object copy(java.lang.Object)
		Attribute[-1].merged161  <==  (AttributeName[0].AttributeName)
			java.lang.Object copy(java.lang.Object)
		Attribute[-1].merged165  <==  (Constructor[2].merged164)
			java.lang.Object copy(java.lang.Object)
		Attribute[-1].Attribute  <==  (Attribute[-1].null, Attribute[-1].null, Attribute[-1].null, Attribute[-1].merged161, Attribute[-1].merged165)
			de.mlhartme.mork.mapping.Definition createDefinition(de.mlhartme.mork.grammar.Grammar, de.mlhartme.mork.util.StringArrayList, java.lang.Integer, java.lang.String, java.lang.Object)
		AttributeName[0].null  <==  (Attribute[-1].null)
			java.lang.Object copy(java.lang.Object)
		AttributeName[0].null  <==  (Attribute[-1].null)
			java.lang.Object copy(java.lang.Object)
		Visibility[3].null  <==  (Attribute[-1].null)
			java.lang.Object copy(java.lang.Object)
		Visibility[3].null  <==  (Attribute[-1].Attribute)
			java.lang.Object copy(java.lang.Object)
		Visibility[3].null  <==  (Attribute[-1].null)
			java.lang.Object copy(java.lang.Object)
		Visibility[3].null  <==  (Attribute[-1].Attribute)
			java.lang.Object copy(java.lang.Object)
		Visibility[3].null  <==  (Attribute[-1].null)
			java.lang.Object copy(java.lang.Object)
		Visibility[3].null  <==  (Attribute[-1].null)
			java.lang.Object copy(java.lang.Object)
		Visibility[3].null  <==  (Attribute[-1].Attribute)
			java.lang.Object copy(java.lang.Object)
		Visibility[3].null  <==  (Attribute[-1].null)
			java.lang.Object copy(java.lang.Object)
		Visibility[3].null  <==  (Attribute[-1].Attribute)
			java.lang.Object copy(java.lang.Object)

[41]	AttributeName	::= ":" Identifier
		AttributeName[-1].merged167  <==  (Identifier[1].null)
			java.lang.Object copy(java.lang.Object)
		AttributeName[-1].AttributeName  <==  (AttributeName[-1].null, AttributeName[-1].null, AttributeName[-1].merged167)
			java.lang.String attributeName(de.mlhartme.mork.util.StringArrayList, java.lang.Integer, java.lang.String)

[42]	AttributeName	::=
		AttributeName[-1].merged167  <==  ()
			java.lang.Object createOption()
		AttributeName[-1].AttributeName  <==  (AttributeName[-1].null, AttributeName[-1].null, AttributeName[-1].merged167)
			java.lang.String attributeName(de.mlhartme.mork.util.StringArrayList, java.lang.Integer, java.lang.String)

[43]	Visibility	::= Explicit
		Visibility[-1].null  <==  ()
			java.lang.Object createSequence()
		Visibility[-1].null  <==  (Explicit[0].null)
			java.lang.Object copy(java.lang.Object)
		Visibility[-1].null  <==  (Explicit[0].null)
			java.lang.Object copy(java.lang.Object)
		Visibility[-1].null  <==  (Explicit[0].null)
			java.lang.Object copy(java.lang.Object)
		Explicit[0].null  <==  (Visibility[-1].null)
			java.lang.Object copy(java.lang.Object)
		Explicit[0].null  <==  (Visibility[-1].null)
			java.lang.Object copy(java.lang.Object)
		Explicit[0].null  <==  (Visibility[-1].null)
			java.lang.Object copy(java.lang.Object)
		Explicit[0].null  <==  (Visibility[-1].null)
			java.lang.Object copy(java.lang.Object)
		Explicit[0].null  <==  (Visibility[-1].null)
			java.lang.Object copy(java.lang.Object)
		Explicit[0].null  <==  (Visibility[-1].null)
			java.lang.Object copy(java.lang.Object)
		Explicit[0].null  <==  (Visibility[-1].null)
			java.lang.Object copy(java.lang.Object)

[44]	Visibility	::= Implicit
		Visibility[-1].null  <==  (Implicit[0].Implicit)
			java.lang.Object createSequenceValue(java.lang.Object)
		Visibility[-1].null  <==  ()
			java.lang.Object createSequence()
		Visibility[-1].null  <==  ()
			java.lang.Object createSequence()
		Visibility[-1].null  <==  ()
			java.lang.Object createSequence()
		Implicit[0].null  <==  (Visibility[-1].null)
			java.lang.Object copy(java.lang.Object)
		Implicit[0].null  <==  (Visibility[-1].null)
			java.lang.Object copy(java.lang.Object)

[45]	Implicit	::= ";"
		Implicit[-1].Implicit  <==  (Implicit[-1].null, Implicit[-1].null)
			java.lang.Object implicitPath(de.mlhartme.mork.compiler.Specification, de.mlhartme.mork.mapping.Definition)

[46]	Explicit	::= ":" <66> ";"
		Explicit[-1].null  <==  (<66>[1].null)
			java.lang.Object copy(java.lang.Object)
		Explicit[-1].null  <==  (<66>[1].null)
			java.lang.Object copy(java.lang.Object)
		Explicit[-1].null  <==  (<66>[1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[1].null  <==  (Explicit[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[1].null  <==  (Explicit[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[1].null  <==  (Explicit[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[1].null  <==  (Explicit[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[1].null  <==  (Explicit[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[1].null  <==  (Explicit[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[1].null  <==  (Explicit[-1].null)
			java.lang.Object copy(java.lang.Object)

[47]	Explicit	::= ":" ";"
		Explicit[-1].null  <==  ()
			java.lang.Object createSequence()
		Explicit[-1].null  <==  ()
			java.lang.Object createSequence()
		Explicit[-1].null  <==  ()
			java.lang.Object createSequence()

[48]	<66>	::= <66> ">" Path
		<66>[-1].null  <==  (<66>[0].null, Path[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<66>[-1].null  <==  (<66>[0].null, Path[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<66>[-1].null  <==  (<66>[0].null, Path[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Path[2].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[0].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[2].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[0].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[2].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[0].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[2].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[0].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[2].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[0].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[2].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[0].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[2].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[0].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)

[49]	<66>	::= ">" Path
		<66>[-1].null  <==  (Path[1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[-1].null  <==  (Path[1].null)
			java.lang.Object copy(java.lang.Object)
		<66>[-1].null  <==  (Path[1].null)
			java.lang.Object copy(java.lang.Object)
		Path[1].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[1].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[1].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[1].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[1].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[1].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Path[1].null  <==  (<66>[-1].null)
			java.lang.Object copy(java.lang.Object)

[50]	Path	::= NormalPath
		Path[-1].null  <==  ()
			java.lang.Object createSequence()
		Path[-1].null  <==  ()
			java.lang.Object createSequence()
		Path[-1].null  <==  (NormalPath[0].NormalPath)
			java.lang.Object createSequenceValue(java.lang.Object)
		NormalPath[0].null  <==  (Path[-1].null)
			java.lang.Object copy(java.lang.Object)
		NormalPath[0].null  <==  (Path[-1].null)
			java.lang.Object copy(java.lang.Object)

[51]	Path	::= ImplicitPath
		Path[-1].null  <==  (ImplicitPath[0].ImplicitPath)
			java.lang.Object createSequenceValue(java.lang.Object)
		Path[-1].null  <==  ()
			java.lang.Object createSequence()
		Path[-1].null  <==  ()
			java.lang.Object createSequence()
		ImplicitPath[0].null  <==  (Path[-1].null)
			java.lang.Object copy(java.lang.Object)
		ImplicitPath[0].null  <==  (Path[-1].null)
			java.lang.Object copy(java.lang.Object)

[52]	Path	::= LocalPath
		Path[-1].null  <==  ()
			java.lang.Object createSequence()
		Path[-1].null  <==  (LocalPath[0].LocalPath)
			java.lang.Object createSequenceValue(java.lang.Object)
		Path[-1].null  <==  ()
			java.lang.Object createSequence()
		LocalPath[0].null  <==  (Path[-1].null)
			java.lang.Object copy(java.lang.Object)
		LocalPath[0].null  <==  (Path[-1].null)
			java.lang.Object copy(java.lang.Object)
		LocalPath[0].null  <==  (Path[-1].null)
			java.lang.Object copy(java.lang.Object)

[53]	ImplicitPath	::= "\\\\*"
		ImplicitPath[-1].ImplicitPath  <==  (ImplicitPath[-1].null, ImplicitPath[-1].null)
			java.lang.Object implicitPath(de.mlhartme.mork.compiler.Specification, de.mlhartme.mork.mapping.Definition)

[54]	LocalPath	::= Identifier
		LocalPath[-1].merged169  <==  (Identifier[0].null)
			java.lang.Object copy(java.lang.Object)
		LocalPath[-1].LocalPath  <==  (LocalPath[-1].null, LocalPath[-1].null, LocalPath[-1].null, LocalPath[-1].merged169)
			java.lang.Object localPath(de.mlhartme.mork.compiler.Specification, de.mlhartme.mork.mapping.Definition, java.lang.Integer, java.lang.String)

[55]	NormalPath	::= <67>
		NormalPath[-1].merged172  <==  (<67>[0].merged173)
			java.lang.Object copy(java.lang.Object)
		NormalPath[-1].NormalPath  <==  (NormalPath[-1].null, NormalPath[-1].null, NormalPath[-1].merged172)
			java.lang.Object normalPath2Tojava.lang.ObjectArray(de.mlhartme.mork.mapping.Definition, de.mlhartme.mork.compiler.Specification, java.util.List)

[56]	<67>	::= <67> Step
		<67>[-1].merged173  <==  (<67>[0].merged173, Step[1].Step)
			java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)

[57]	<67>	::= Step
		<67>[-1].merged173  <==  (Step[0].Step)
			java.lang.Object createSequenceValue(java.lang.Object)

[58]	Step	::= Move Identifier
		Step[-1].merged177  <==  (Move[0].merged176)
			java.lang.Object copy(java.lang.Object)
		Step[-1].merged179  <==  (Identifier[1].null)
			java.lang.Object copy(java.lang.Object)
		Step[-1].Step  <==  (Step[-1].merged177, Step[-1].merged179)
			java.lang.Object step(java.lang.Integer, java.lang.String)

[59]	Move	::= Down
		Move[-1].merged176  <==  (Down[0].Down)
			java.lang.Object copy(java.lang.Object)

[60]	Move	::= Up
		Move[-1].merged176  <==  (Up[0].Up)
			java.lang.Object copy(java.lang.Object)

[61]	Move	::= Ups
		Move[-1].merged176  <==  (Ups[0].Ups)
			java.lang.Object copy(java.lang.Object)

[62]	Move	::= Downs
		Move[-1].merged176  <==  (Downs[0].Downs)
			java.lang.Object copy(java.lang.Object)

[63]	Ups	::= "\\\\"
		Ups[-1].Ups  <==  ()
			int UPS()

[64]	Up	::= "\\"
		Up[-1].Up  <==  ()
			int UP()

[65]	Downs	::= "//"
		Downs[-1].Downs  <==  ()
			int DOWNS()

[66]	Down	::= "/"
		Down[-1].Down  <==  ()
			int DOWN()



Visit sequences
prod 0: java.lang.Object copy(java.lang.Object)9$-1(1$2) java.lang.Object copy(java.lang.Object)11$-1(1$2) java.lang.Object copy(java.lang.Object)2$-1(0$1) java.lang.Object copy(java.lang.Object)4$-1(0$0) java.lang.Object copy(java.lang.Object)13$-1(2$1) java.lang.Object copy(java.lang.Object)12$-1(3$1) java.lang.Object copy(java.lang.Object)14$-1(3$1) java.lang.Object copy(java.lang.Object)15$-1(3$1) java.lang.Object copy(java.lang.Object)10$-1(1$2) java.lang.Object copy(java.lang.Object)8$3(12$-1) java.lang.Object copy(java.lang.Object)11$3(15$-1) java.lang.Object copy(java.lang.Object)7$3(11$-1) java.lang.Object copy(java.lang.Object)10$3(14$-1) java.lang.Object copy(java.lang.Object)9$3(13$-1) java.lang.Object copy(java.lang.Object)5$3(9$-1) java.lang.Object copy(java.lang.Object)6$3(10$-1) 3:!0 java.lang.Object copy(java.lang.Object)3$-1(0$3) de.mlhartme.mork.compiler.Specification de.mlhartme.mork.compiler.Specification2Tode.mlhartme.mork.mapping.DefinitionArray(java.lang.String, de.mlhartme.mork.compiler.Syntax, java.util.List)0$-1(4$-1, 2$-1, 3$-1) java.lang.Object copy(java.lang.Object)14$3(0$-1) java.lang.Object copy(java.lang.Object)13$3(0$-1) java.lang.Object copy(java.lang.Object)15$3(0$-1) java.lang.Object copy(java.lang.Object)12$3(0$-1) 3:!0 java.lang.Object copy(java.lang.Object)5$-1(1$3) java.lang.Object copy(java.lang.Object)7$-1(3$3) java.lang.Object copy(java.lang.Object)8$-1(4$3) java.lang.Object copy(java.lang.Object)6$-1(2$3) java.lang.Object sideEffect(java.util.List, java.util.List, java.util.List, java.util.List)1$-1(5$-1, 6$-1, 7$-1, 8$-1)
prod 1: java.lang.Object copy(java.lang.Object)0$-1(0$1)
prod 2: java.lang.Object copy(java.lang.Object)1$-1(0$0) de.mlhartme.mork.compiler.Syntax Syntax(de.mlhartme.mork.compiler.Syntax)0$-1(1$-1) de.mlhartme.mork.util.StringArrayList getIFSymbolTable(de.mlhartme.mork.compiler.Syntax)3$-1(0$-1) de.mlhartme.mork.grammar.Grammar getIFGrammar(de.mlhartme.mork.compiler.Syntax)2$-1(0$-1)
prod 3: java.lang.Object copy(java.lang.Object)1$-1(0$0) de.mlhartme.mork.compiler.Syntax Syntax(de.mlhartme.mork.compiler.Syntax)0$-1(1$-1) de.mlhartme.mork.grammar.Grammar getIFGrammar(de.mlhartme.mork.compiler.Syntax)2$-1(0$-1) de.mlhartme.mork.util.StringArrayList getIFSymbolTable(de.mlhartme.mork.compiler.Syntax)3$-1(0$-1)
prod 4: java.lang.Object copy(java.lang.Object)1$-1(0$2) de.mlhartme.mork.compiler.Syntax loadGrammar(java.lang.Object, java.lang.String)0$-1(2$-1, 1$-1)
prod 5: java.lang.Object copy(java.lang.Object)1$-1(0$2) de.mlhartme.mork.compiler.Syntax loadDtd(java.lang.Object, java.lang.String)0$-1(2$-1, 1$-1)
prod 6: java.lang.Object copy(java.lang.Object)0$-1(0$0) de.mlhartme.mork.mapping.Library de.mlhartme.mork.mapping.Library0Tode.mlhartme.mork.mapping.ImportArray(java.util.List)1$-1(0$-1)
prod 7: java.lang.Object createSequence()0$-1() de.mlhartme.mork.mapping.Library de.mlhartme.mork.mapping.Library0Tode.mlhartme.mork.mapping.ImportArray(java.util.List)1$-1(0$-1)
prod 8: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$1)
prod 9: java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 10: java.lang.Object copy(java.lang.Object)1$-1(1$1) java.lang.Object copy(java.lang.Object)1$3(1$-1) java.lang.Object copy(java.lang.Object)1$4(1$-1) 4:!0 3:!0 java.lang.Object sequenceAndSequence0createSequenceValue(java.lang.Object, java.lang.Object)0$-1(0$3, 0$4)
prod 11: java.lang.Object copy(java.lang.Object)1$-1(1$1) java.lang.Object copy(java.lang.Object)1$3(1$-1) 3:!0 java.lang.Object createSequenceValue(java.lang.Object)0$-1(0$3)
prod 12: 65535:^ java.lang.Object copy(java.lang.Object)1$2(1$-1) java.lang.Object copy(java.lang.Object)1$0(1$-1) 0:!0 2:!0 java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$2)
prod 13: 65535:^ java.lang.Object copy(java.lang.Object)1$1(1$-1) 1:!0 java.lang.Object createSequenceValue(java.lang.Object)0$-1(0$1)
prod 14: 65535:^ java.lang.Object copy(java.lang.Object)2$-1(0$0) java.lang.Object copy(java.lang.Object)3$-1(0$2) de.mlhartme.mork.mapping.Import create(java.lang.String, java.lang.String, java.lang.String)0$-1(1$-1, 2$-1, 3$-1)
prod 15: 65535:^ java.lang.Object copy(java.lang.Object)2$-1(0$0) java.lang.Object createOption()3$-1() de.mlhartme.mork.mapping.Import create(java.lang.String, java.lang.String, java.lang.String)0$-1(1$-1, 2$-1, 3$-1)
prod 16: java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.String String(java.lang.String)1$-1(0$-1)
prod 17: java.lang.Object sequenceAndSequence0createSequenceValue(java.lang.Object, java.lang.Object)1$-1(0$0, 0$1) java.lang.String name0Tojava.lang.StringArray(java.util.List)0$-1(1$-1)
prod 18: java.lang.Object createSequenceValue(java.lang.Object)1$-1(0$0) java.lang.String name0Tojava.lang.StringArray(java.util.List)0$-1(1$-1)
prod 19: java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$2)
prod 20: java.lang.Object createSequenceValue(java.lang.Object)0$-1(0$1)
prod 21: 65535:^ java.lang.Object copy(java.lang.Object)0$0(2$-1) 0:!0 java.lang.Object copy(java.lang.Object)3$-1(2$0)
prod 22: 65535:^ java.lang.Object copy(java.lang.Object)0$0(1$-1) 0:!0 java.lang.Object copy(java.lang.Object)3$-1(3$0)
prod 23: 65535:^ java.lang.Object copy(java.lang.Object)0$0(0$-1) 0:!0 java.lang.Object copy(java.lang.Object)3$-1(2$0)
prod 24: 65535:^ java.lang.Object copy(java.lang.Object)3$-1(1$0)
prod 25: 65535:^ java.lang.Object copy(java.lang.Object)1$-1(0$0) de.mlhartme.mork.reflect.Selection lookupClass(de.mlhartme.mork.mapping.Library, java.lang.String)2$-1(0$-1, 1$-1)
prod 26: 65535:^ java.lang.Object copy(java.lang.Object)2$-1(0$2) java.lang.Object copy(java.lang.Object)1$-1(0$0) de.mlhartme.mork.reflect.Selection lookupMember(de.mlhartme.mork.mapping.Library, java.lang.String, java.lang.String)3$-1(0$-1, 1$-1, 2$-1)
prod 27: java.lang.Object copy(java.lang.Object)0$-1(0$1) de.mlhartme.mork.mapping.Internal de.mlhartme.mork.mapping.Internal(java.lang.String)1$-1(0$-1)
prod 28: 65535:^ java.lang.Object copy(java.lang.Object)1$-1(0$1) de.mlhartme.mork.reflect.Selection copyFunctionRef(de.mlhartme.mork.mapping.Library, java.lang.String)2$-1(0$-1, 1$-1)
prod 29: 65535:^ java.lang.Object copy(java.lang.Object)7$0(7$-1) java.lang.Object copy(java.lang.Object)10$0(10$-1) java.lang.Object copy(java.lang.Object)9$0(9$-1) java.lang.Object copy(java.lang.Object)5$0(5$-1) java.lang.Object copy(java.lang.Object)8$0(8$-1) java.lang.Object copy(java.lang.Object)11$0(11$-1) java.lang.Object copy(java.lang.Object)6$0(6$-1) 0:!0 java.lang.Object copy(java.lang.Object)0$-1(0$0) 65535:^ java.lang.Object copy(java.lang.Object)15$0(15$-1) java.lang.Object copy(java.lang.Object)12$0(12$-1) java.lang.Object copy(java.lang.Object)13$0(13$-1) java.lang.Object copy(java.lang.Object)14$0(14$-1) 0:!0 java.lang.Object copy(java.lang.Object)3$-1(3$0) java.lang.Object copy(java.lang.Object)2$-1(2$0) java.lang.Object copy(java.lang.Object)1$-1(1$0) java.lang.Object copy(java.lang.Object)4$-1(4$0)
prod 30: 65535:^ java.lang.Object createSequence()0$-1() 65535:^ java.lang.Object createSequence()2$-1() java.lang.Object createSequence()1$-1() java.lang.Object createSequence()3$-1() java.lang.Object createSequence()4$-1()
prod 31: 65535:^ java.lang.Object copy(java.lang.Object)6$1(6$-1) java.lang.Object copy(java.lang.Object)12$1(11$-1) java.lang.Object copy(java.lang.Object)8$0(8$-1) java.lang.Object copy(java.lang.Object)5$0(5$-1) java.lang.Object copy(java.lang.Object)10$1(10$-1) java.lang.Object copy(java.lang.Object)9$0(9$-1) java.lang.Object copy(java.lang.Object)11$0(11$-1) java.lang.Object copy(java.lang.Object)10$0(10$-1) java.lang.Object copy(java.lang.Object)7$1(7$-1) java.lang.Object copy(java.lang.Object)5$1(5$-1) java.lang.Object copy(java.lang.Object)7$0(7$-1) java.lang.Object copy(java.lang.Object)8$1(8$-1) java.lang.Object copy(java.lang.Object)6$0(6$-1) java.lang.Object copy(java.lang.Object)9$1(9$-1) 0:!0 1:!0 java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$1) 65535:^ java.lang.Object copy(java.lang.Object)13$0(13$-1) java.lang.Object copy(java.lang.Object)14$1(12$-1) java.lang.Object copy(java.lang.Object)16$1(14$-1) java.lang.Object copy(java.lang.Object)14$0(14$-1) java.lang.Object copy(java.lang.Object)15$1(13$-1) java.lang.Object copy(java.lang.Object)15$0(15$-1) java.lang.Object copy(java.lang.Object)18$1(15$-1) java.lang.Object copy(java.lang.Object)12$0(12$-1) 0:!0 1:!0 java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)1$-1(1$0, 1$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)3$-1(3$0, 3$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)4$-1(4$0, 4$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)2$-1(2$0, 2$1)
prod 32: 65535:^ java.lang.Object copy(java.lang.Object)10$0(10$-1) java.lang.Object copy(java.lang.Object)9$0(9$-1) java.lang.Object copy(java.lang.Object)5$0(5$-1) java.lang.Object copy(java.lang.Object)12$0(11$-1) java.lang.Object copy(java.lang.Object)8$0(8$-1) java.lang.Object copy(java.lang.Object)6$0(6$-1) java.lang.Object copy(java.lang.Object)7$0(7$-1) 0:!0 java.lang.Object copy(java.lang.Object)0$-1(0$0) 65535:^ java.lang.Object copy(java.lang.Object)16$0(14$-1) java.lang.Object copy(java.lang.Object)15$0(13$-1) java.lang.Object copy(java.lang.Object)14$0(12$-1) java.lang.Object copy(java.lang.Object)18$0(15$-1) 0:!0 java.lang.Object copy(java.lang.Object)3$-1(3$0) java.lang.Object copy(java.lang.Object)2$-1(2$0) java.lang.Object copy(java.lang.Object)4$-1(4$0) java.lang.Object copy(java.lang.Object)1$-1(1$0)
prod 33: 65535:^ java.lang.Object copy(java.lang.Object)5$1(5$-1) java.lang.Object copy(java.lang.Object)7$1(7$-1) java.lang.Object copy(java.lang.Object)9$1(10$-1) java.lang.Object copy(java.lang.Object)8$1(9$-1) java.lang.Object copy(java.lang.Object)0$0(8$-1) java.lang.Object copy(java.lang.Object)11$1(12$-1) java.lang.Object copy(java.lang.Object)6$1(6$-1) 0:!0 java.lang.Object copy(java.lang.Object)13$-1(2$0) java.lang.Object copy(java.lang.Object)11$-1(2$0) java.lang.Object copy(java.lang.Object)12$1(13$-1) java.lang.Object copy(java.lang.Object)10$1(11$-1) 1:!0 java.lang.Object copy(java.lang.Object)0$-1(0$1) 65535:^ java.lang.Object copy(java.lang.Object)14$1(15$-1) java.lang.Object copy(java.lang.Object)13$1(14$-1) java.lang.Object copy(java.lang.Object)17$1(18$-1) java.lang.Object copy(java.lang.Object)17$-1(2$0) java.lang.Object copy(java.lang.Object)15$1(16$-1) java.lang.Object copy(java.lang.Object)16$1(17$-1) 1:!0 java.lang.Object copy(java.lang.Object)1$-1(1$1) java.lang.Object copy(java.lang.Object)4$-1(4$1) java.lang.Object copy(java.lang.Object)2$-1(2$1) java.lang.Object copy(java.lang.Object)3$-1(3$1)
prod 34: 65535:^ java.lang.Object copy(java.lang.Object)7$0(7$-1) java.lang.Object copy(java.lang.Object)10$0(10$-1) java.lang.Object copy(java.lang.Object)5$0(5$-1) java.lang.Object copy(java.lang.Object)14$1(12$-1) java.lang.Object copy(java.lang.Object)12$0(12$-1) java.lang.Object copy(java.lang.Object)8$1(8$-1) java.lang.Object copy(java.lang.Object)5$1(5$-1) java.lang.Object copy(java.lang.Object)11$0(11$-1) java.lang.Object copy(java.lang.Object)6$1(6$-1) java.lang.Object copy(java.lang.Object)7$1(7$-1) java.lang.Object copy(java.lang.Object)8$0(8$-1) java.lang.Object copy(java.lang.Object)13$1(11$-1) java.lang.Object copy(java.lang.Object)9$1(9$-1) java.lang.Object copy(java.lang.Object)10$1(10$-1) java.lang.Object copy(java.lang.Object)6$0(6$-1) java.lang.Object copy(java.lang.Object)9$0(9$-1) 0:!0 1:!0 java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$1) 65535:^ java.lang.Object copy(java.lang.Object)14$0(14$-1) java.lang.Object copy(java.lang.Object)15$0(15$-1) java.lang.Object copy(java.lang.Object)18$1(16$-1) java.lang.Object copy(java.lang.Object)16$1(14$-1) java.lang.Object copy(java.lang.Object)17$1(15$-1) java.lang.Object copy(java.lang.Object)16$0(16$-1) java.lang.Object copy(java.lang.Object)15$1(13$-1) java.lang.Object copy(java.lang.Object)19$1(17$-1) java.lang.Object copy(java.lang.Object)17$0(17$-1) java.lang.Object copy(java.lang.Object)13$0(13$-1) 0:!0 1:!0 java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)1$-1(1$0, 1$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)2$-1(2$0, 2$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)3$-1(3$0, 3$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)4$-1(4$0, 4$1)
prod 35: 65535:^ java.lang.Object copy(java.lang.Object)14$0(12$-1) java.lang.Object copy(java.lang.Object)10$0(10$-1) java.lang.Object copy(java.lang.Object)8$0(8$-1) java.lang.Object copy(java.lang.Object)13$0(11$-1) java.lang.Object copy(java.lang.Object)9$0(9$-1) java.lang.Object copy(java.lang.Object)7$0(7$-1) java.lang.Object copy(java.lang.Object)6$0(6$-1) java.lang.Object copy(java.lang.Object)5$0(5$-1) 0:!0 java.lang.Object createSequenceValue(java.lang.Object)0$-1(0$0) 65535:^ java.lang.Object copy(java.lang.Object)16$0(14$-1) java.lang.Object copy(java.lang.Object)15$0(13$-1) java.lang.Object copy(java.lang.Object)19$0(17$-1) java.lang.Object copy(java.lang.Object)18$0(16$-1) java.lang.Object copy(java.lang.Object)17$0(15$-1) 0:!0 java.lang.Object copy(java.lang.Object)3$-1(3$0) java.lang.Object copy(java.lang.Object)1$-1(1$0) java.lang.Object copy(java.lang.Object)2$-1(2$0) java.lang.Object copy(java.lang.Object)4$-1(4$0)
prod 36: 65535:^ java.lang.Object copy(java.lang.Object)1$-1(0$0) int symbolRef(de.mlhartme.mork.util.StringArrayList, java.lang.String)2$-1(0$-1, 1$-1)
prod 37: 65535:^ java.lang.Object copy(java.lang.Object)1$-1(0$0) int symbolRef(de.mlhartme.mork.util.StringArrayList, java.lang.String)2$-1(0$-1, 1$-1)
prod 38: java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 39: java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 40: 65535:^ java.lang.Object copy(java.lang.Object)2$2(7$-1) java.lang.Object copy(java.lang.Object)2$0(14$-1) java.lang.Object copy(java.lang.Object)0$2(5$-1) java.lang.Object copy(java.lang.Object)1$0(13$-1) java.lang.Object copy(java.lang.Object)1$2(6$-1) 2:!0 0:!0 java.lang.Object copy(java.lang.Object)12$-1(3$2) java.lang.Object copy(java.lang.Object)11$-1(0$0) de.mlhartme.mork.mapping.Definition createDefinition(de.mlhartme.mork.grammar.Grammar, de.mlhartme.mork.util.StringArrayList, java.lang.Integer, java.lang.String, java.lang.Object)0$-1(8$-1, 9$-1, 10$-1, 11$-1, 12$-1) java.lang.Object copy(java.lang.Object)12$3(0$-1) java.lang.Object copy(java.lang.Object)5$3(0$-1) java.lang.Object copy(java.lang.Object)10$3(0$-1) java.lang.Object copy(java.lang.Object)7$3(0$-1) 65535:^ java.lang.Object copy(java.lang.Object)11$3(19$-1) java.lang.Object copy(java.lang.Object)6$3(16$-1) java.lang.Object copy(java.lang.Object)8$3(17$-1) java.lang.Object copy(java.lang.Object)4$3(15$-1) java.lang.Object copy(java.lang.Object)9$3(18$-1) 3:!0 java.lang.Object copy(java.lang.Object)4$-1(3$3) java.lang.Object copy(java.lang.Object)1$-1(0$3) java.lang.Object copy(java.lang.Object)2$-1(1$3) java.lang.Object copy(java.lang.Object)3$-1(2$3)
prod 41: 65535:^ java.lang.Object copy(java.lang.Object)3$-1(0$1) java.lang.String attributeName(de.mlhartme.mork.util.StringArrayList, java.lang.Integer, java.lang.String)0$-1(1$-1, 2$-1, 3$-1)
prod 42: 65535:^ java.lang.Object createOption()3$-1() java.lang.String attributeName(de.mlhartme.mork.util.StringArrayList, java.lang.Integer, java.lang.String)0$-1(1$-1, 2$-1, 3$-1)
prod 43: 65535:^ java.lang.Object copy(java.lang.Object)4$0(7$-1) java.lang.Object copy(java.lang.Object)7$0(10$-1) java.lang.Object copy(java.lang.Object)5$0(8$-1) java.lang.Object copy(java.lang.Object)9$0(12$-1) java.lang.Object copy(java.lang.Object)8$0(11$-1) java.lang.Object copy(java.lang.Object)6$0(9$-1) java.lang.Object createSequence()0$-1() java.lang.Object copy(java.lang.Object)3$0(6$-1) 0:!0 java.lang.Object copy(java.lang.Object)2$-1(1$0) java.lang.Object copy(java.lang.Object)3$-1(2$0) java.lang.Object copy(java.lang.Object)1$-1(0$0)
prod 44: 65535:^ java.lang.Object copy(java.lang.Object)2$0(5$-1) java.lang.Object createSequence()3$-1() java.lang.Object createSequence()1$-1() java.lang.Object copy(java.lang.Object)1$0(4$-1) java.lang.Object createSequence()2$-1() 0:!0 java.lang.Object createSequenceValue(java.lang.Object)0$-1(0$0)
prod 45: 65535:^ java.lang.Object implicitPath(de.mlhartme.mork.compiler.Specification, de.mlhartme.mork.mapping.Definition)0$-1(1$-1, 2$-1)
prod 46: 65535:^ java.lang.Object copy(java.lang.Object)5$1(5$-1) java.lang.Object copy(java.lang.Object)9$1(9$-1) java.lang.Object copy(java.lang.Object)7$1(7$-1) java.lang.Object copy(java.lang.Object)8$1(8$-1) java.lang.Object copy(java.lang.Object)3$1(3$-1) java.lang.Object copy(java.lang.Object)4$1(4$-1) java.lang.Object copy(java.lang.Object)6$1(6$-1) 1:!0 java.lang.Object copy(java.lang.Object)0$-1(0$1) java.lang.Object copy(java.lang.Object)1$-1(1$1) java.lang.Object copy(java.lang.Object)2$-1(2$1)
prod 47: 65535:^ java.lang.Object createSequence()2$-1() java.lang.Object createSequence()1$-1() java.lang.Object createSequence()0$-1()
prod 48: 65535:^ java.lang.Object copy(java.lang.Object)7$0(7$-1) java.lang.Object copy(java.lang.Object)6$2(6$-1) java.lang.Object copy(java.lang.Object)5$0(5$-1) java.lang.Object copy(java.lang.Object)5$2(5$-1) java.lang.Object copy(java.lang.Object)4$0(4$-1) java.lang.Object copy(java.lang.Object)4$2(4$-1) java.lang.Object copy(java.lang.Object)6$0(6$-1) java.lang.Object copy(java.lang.Object)8$2(8$-1) java.lang.Object copy(java.lang.Object)9$2(9$-1) java.lang.Object copy(java.lang.Object)3$2(3$-1) java.lang.Object copy(java.lang.Object)9$0(9$-1) java.lang.Object copy(java.lang.Object)8$0(8$-1) java.lang.Object copy(java.lang.Object)7$2(7$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 2:!0 java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)1$-1(1$0, 1$2) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)2$-1(2$0, 2$2) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$2)
prod 49: 65535:^ java.lang.Object copy(java.lang.Object)3$1(3$-1) java.lang.Object copy(java.lang.Object)7$1(7$-1) java.lang.Object copy(java.lang.Object)9$1(9$-1) java.lang.Object copy(java.lang.Object)8$1(8$-1) java.lang.Object copy(java.lang.Object)6$1(6$-1) java.lang.Object copy(java.lang.Object)4$1(4$-1) java.lang.Object copy(java.lang.Object)5$1(5$-1) 1:!0 java.lang.Object copy(java.lang.Object)0$-1(0$1) java.lang.Object copy(java.lang.Object)1$-1(1$1) java.lang.Object copy(java.lang.Object)2$-1(2$1)
prod 50: 65535:^ java.lang.Object copy(java.lang.Object)2$0(9$-1) java.lang.Object copy(java.lang.Object)1$0(8$-1) java.lang.Object createSequence()0$-1() java.lang.Object createSequence()1$-1() 0:!0 java.lang.Object createSequenceValue(java.lang.Object)2$-1(0$0)
prod 51: 65535:^ java.lang.Object createSequence()1$-1() java.lang.Object createSequence()2$-1() java.lang.Object copy(java.lang.Object)2$0(4$-1) java.lang.Object copy(java.lang.Object)1$0(3$-1) 0:!0 java.lang.Object createSequenceValue(java.lang.Object)0$-1(0$0)
prod 52: 65535:^ java.lang.Object copy(java.lang.Object)1$0(5$-1) java.lang.Object createSequence()2$-1() java.lang.Object createSequence()0$-1() java.lang.Object copy(java.lang.Object)2$0(6$-1) java.lang.Object copy(java.lang.Object)3$0(7$-1) 0:!0 java.lang.Object createSequenceValue(java.lang.Object)1$-1(0$0)
prod 53: 65535:^ java.lang.Object implicitPath(de.mlhartme.mork.compiler.Specification, de.mlhartme.mork.mapping.Definition)0$-1(1$-1, 2$-1)
prod 54: 65535:^ java.lang.Object copy(java.lang.Object)4$-1(0$0) java.lang.Object localPath(de.mlhartme.mork.compiler.Specification, de.mlhartme.mork.mapping.Definition, java.lang.Integer, java.lang.String)0$-1(1$-1, 3$-1, 2$-1, 4$-1)
prod 55: 65535:^ java.lang.Object copy(java.lang.Object)3$-1(0$0) java.lang.Object normalPath2Tojava.lang.ObjectArray(de.mlhartme.mork.mapping.Definition, de.mlhartme.mork.compiler.Specification, java.util.List)0$-1(2$-1, 1$-1, 3$-1)
prod 56: java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$1)
prod 57: java.lang.Object createSequenceValue(java.lang.Object)0$-1(0$0)
prod 58: java.lang.Object copy(java.lang.Object)1$-1(0$0) java.lang.Object copy(java.lang.Object)2$-1(0$1) java.lang.Object step(java.lang.Integer, java.lang.String)0$-1(1$-1, 2$-1)
prod 59: java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 60: java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 61: java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 62: java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 63: int UPS()0$-1()
prod 64: int UP()0$-1()
prod 65: int DOWNS()0$-1()
prod 66: int DOWN()0$-1()
