
Symbols:
StringArrayList {
 0	= "["
 1	= "PARSER"
 2	= "]"
 3	= "SCANNER"
 4	= "nopriorities;"
 5	= "white"
 6	= "="
 7	= ";"
 8	= ","
 9	= "::="
 10	= "|"
 11	= "-"
 12	= "("
 13	= ")"
 14	= "*"
 15	= "+"
 16	= "?"
 17	= ":"
 18	= "!"
 19	= ".."
 20	= "/*"
 21	= "*/"
 22	= Grammar
 23	= Parser
 24	= Scanner
 25	= Priorities
 26	= UsePriorities
 27	= NoPriorities
 28	= WhiteOpt
 29	= SymbolSet
 30	= Symbol
 31	= StringSymbol
 32	= IdentifierSymbol
 33	= Rule
 34	= Subject
 35	= RegExpr
 36	= Choice
 37	= Sequence
 38	= Restriction
 39	= Factor
 40	= Operation
 41	= Star
 42	= Plus
 43	= Option
 44	= Times
 45	= Not
 46	= Reference
 47	= Range
 48	= Atom
 49	= Code
 50	= IntegerLiteral
 51	= StringLiteral
 52	= CharacterLiteral
 53	= Identifier
 54	= WhiteSpace
 55	= EndOfLineComment
 56	= TraditionalComment
}


Grammar:
Grammar	::= Parser Scanner
Parser	::= "[" "PARSER" "]" <57>
Scanner	::= "[" "SCANNER" "]" Priorities WhiteOpt <57>
Scanner	::= "[" "SCANNER" "]" Priorities WhiteOpt
<57>	::= <57> Rule
<57>	::= Rule
Priorities	::= NoPriorities
Priorities	::= UsePriorities
UsePriorities	::=
NoPriorities	::= "nopriorities;"
WhiteOpt	::= "white" "=" SymbolSet ";"
WhiteOpt	::=
SymbolSet	::= Symbol <58>
SymbolSet	::= Symbol
SymbolSet	::=
<58>	::= <58> "," Symbol
<58>	::= "," Symbol
Symbol	::= IdentifierSymbol
Symbol	::= StringSymbol
StringSymbol	::= StringLiteral
IdentifierSymbol	::= Identifier
Rule	::= Subject "::=" RegExpr ";"
Subject	::= Symbol
RegExpr	::= Choice
Choice	::= Sequence
Choice	::= Choice "|" Sequence
Sequence	::= <59>
Sequence	::=
<59>	::= <59> Restriction
<59>	::= <59> Factor
<59>	::= Restriction
<59>	::= Factor
Restriction	::= Factor "-" Factor
Factor	::= "(" RegExpr ")"
Factor	::= Reference
Factor	::= Operation
Factor	::= Range
Operation	::= Not
Operation	::= Option
Operation	::= Star
Operation	::= Plus
Operation	::= Times
Star	::= Factor "*"
Plus	::= Factor "+"
Option	::= Factor "?"
Times	::= Factor ":" IntegerLiteral
Not	::= Factor "!"
Reference	::= Symbol
Range	::= Atom ".." Atom
Range	::= Atom
Atom	::= Code
Atom	::= CharacterLiteral
Code	::= IntegerLiteral


Automaton:

------------------------------
[state 0]
Grammar	::= . Parser Scanner 

Parser	::= . "[" "PARSER" "]" <57> 

shift Parser -> 1
shift "[" -> 2
shift Grammar -> 72




------------------------------
[state 1]
Grammar	::= Parser . Scanner 

Scanner	::= . "[" "SCANNER" "]" Priorities WhiteOpt 
Scanner	::= . "[" "SCANNER" "]" Priorities WhiteOpt <57> 

shift Scanner -> 3
shift "[" -> 4




------------------------------
[state 2]
Parser	::= "[" . "PARSER" "]" <57> 


shift "PARSER" -> 5




------------------------------
[state 3]
Grammar	::= Parser Scanner . 



reduce Grammar	::= Parser Scanner on { <60> }



------------------------------
[state 4]
Scanner	::= "[" . "SCANNER" "]" Priorities WhiteOpt <57> 
Scanner	::= "[" . "SCANNER" "]" Priorities WhiteOpt 


shift "SCANNER" -> 6




------------------------------
[state 5]
Parser	::= "[" "PARSER" . "]" <57> 


shift "]" -> 7




------------------------------
[state 6]
Scanner	::= "[" "SCANNER" . "]" Priorities WhiteOpt <57> 
Scanner	::= "[" "SCANNER" . "]" Priorities WhiteOpt 


shift "]" -> 8




------------------------------
[state 7]
Parser	::= "[" "PARSER" "]" . <57> 

StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Symbol	::= . StringSymbol 
Symbol	::= . IdentifierSymbol 
Subject	::= . Symbol 
Rule	::= . Subject "::=" RegExpr ";" 
<57>	::= . Rule 
<57>	::= . <57> Rule 

shift <57> -> 9
shift Rule -> 10
shift Subject -> 11
shift Symbol -> 12
shift IdentifierSymbol -> 13
shift StringSymbol -> 14
shift Identifier -> 15
shift StringLiteral -> 16




------------------------------
[state 8]
Scanner	::= "[" "SCANNER" "]" . Priorities WhiteOpt <57> 
Scanner	::= "[" "SCANNER" "]" . Priorities WhiteOpt 

UsePriorities	::= . 
NoPriorities	::= . "nopriorities;" 
Priorities	::= . UsePriorities 
Priorities	::= . NoPriorities 

shift Priorities -> 17
shift NoPriorities -> 18
shift UsePriorities -> 19
shift "nopriorities;" -> 20

reduce UsePriorities	::= on { "white" StringLiteral Identifier <60> }



------------------------------
[state 9]
Parser	::= "[" "PARSER" "]" <57> . 
<57>	::= <57> . Rule 

StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Symbol	::= . StringSymbol 
Symbol	::= . IdentifierSymbol 
Subject	::= . Symbol 
Rule	::= . Subject "::=" RegExpr ";" 

shift Rule -> 21
shift Subject -> 11
shift Symbol -> 12
shift IdentifierSymbol -> 13
shift StringSymbol -> 14
shift Identifier -> 15
shift StringLiteral -> 16

reduce Parser	::= "[" "PARSER" "]" <57> on { "[" }



------------------------------
[state 10]
<57>	::= Rule . 



reduce <57>	::= Rule on { "[" StringLiteral Identifier <60> }



------------------------------
[state 11]
Rule	::= Subject . "::=" RegExpr ";" 


shift "::=" -> 22




------------------------------
[state 12]
Subject	::= Symbol . 



reduce Subject	::= Symbol on { "::=" }



------------------------------
[state 13]
Symbol	::= IdentifierSymbol . 



reduce Symbol	::= IdentifierSymbol on { ";" "," "::=" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 14]
Symbol	::= StringSymbol . 



reduce Symbol	::= StringSymbol on { ";" "," "::=" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 15]
IdentifierSymbol	::= Identifier . 



reduce IdentifierSymbol	::= Identifier on { ";" "," "::=" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 16]
StringSymbol	::= StringLiteral . 



reduce StringSymbol	::= StringLiteral on { ";" "," "::=" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 17]
Scanner	::= "[" "SCANNER" "]" Priorities . WhiteOpt <57> 
Scanner	::= "[" "SCANNER" "]" Priorities . WhiteOpt 

WhiteOpt	::= . 
WhiteOpt	::= . "white" "=" SymbolSet ";" 

shift WhiteOpt -> 23
shift "white" -> 24

reduce WhiteOpt	::= on { StringLiteral Identifier <60> }



------------------------------
[state 18]
Priorities	::= NoPriorities . 



reduce Priorities	::= NoPriorities on { "white" StringLiteral Identifier <60> }



------------------------------
[state 19]
Priorities	::= UsePriorities . 



reduce Priorities	::= UsePriorities on { "white" StringLiteral Identifier <60> }



------------------------------
[state 20]
NoPriorities	::= "nopriorities;" . 



reduce NoPriorities	::= "nopriorities;" on { "white" StringLiteral Identifier <60> }



------------------------------
[state 21]
<57>	::= <57> Rule . 



reduce <57>	::= <57> Rule on { "[" StringLiteral Identifier <60> }



------------------------------
[state 22]
Rule	::= Subject "::=" . RegExpr ";" 

Code	::= . IntegerLiteral 
StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Atom	::= . CharacterLiteral 
Atom	::= . Code 
Times	::= . Factor ":" IntegerLiteral 
Plus	::= . Factor "+" 
Star	::= . Factor "*" 
Option	::= . Factor "?" 
Not	::= . Factor "!" 
Operation	::= . Not 
Reference	::= . Symbol 
Factor	::= . Range 
Factor	::= . Operation 
Factor	::= . Reference 
Factor	::= . "(" RegExpr ")" 
Restriction	::= . Factor "-" Factor 
<59>	::= . Factor 
<59>	::= . Restriction 
<59>	::= . <59> Factor 
<59>	::= . <59> Restriction 
Sequence	::= . 
Sequence	::= . <59> 
Choice	::= . Choice "|" Sequence 
Choice	::= . Sequence 
RegExpr	::= . Choice 
Operation	::= . Option 
Operation	::= . Star 
Operation	::= . Plus 
Operation	::= . Times 
Range	::= . Atom ".." Atom 
Range	::= . Atom 
Symbol	::= . IdentifierSymbol 
Symbol	::= . StringSymbol 

shift RegExpr -> 25
shift StringSymbol -> 14
shift IdentifierSymbol -> 13
shift Atom -> 26
shift Times -> 27
shift Plus -> 28
shift Star -> 29
shift Option -> 30
shift Choice -> 31
shift Sequence -> 32
shift <59> -> 33
shift Restriction -> 34
shift Factor -> 35
shift "(" -> 36
shift Reference -> 37
shift Operation -> 38
shift Range -> 39
shift Symbol -> 40
shift Not -> 41
shift Code -> 42
shift CharacterLiteral -> 43
shift Identifier -> 15
shift StringLiteral -> 16
shift IntegerLiteral -> 44

reduce Sequence	::= on { ";" "|" }



------------------------------
[state 23]
Scanner	::= "[" "SCANNER" "]" Priorities WhiteOpt . <57> 
Scanner	::= "[" "SCANNER" "]" Priorities WhiteOpt . 

StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Symbol	::= . StringSymbol 
Symbol	::= . IdentifierSymbol 
Subject	::= . Symbol 
Rule	::= . Subject "::=" RegExpr ";" 
<57>	::= . Rule 
<57>	::= . <57> Rule 

shift <57> -> 45
shift Rule -> 10
shift Subject -> 11
shift Symbol -> 12
shift IdentifierSymbol -> 13
shift StringSymbol -> 14
shift Identifier -> 15
shift StringLiteral -> 16

reduce Scanner	::= "[" "SCANNER" "]" Priorities WhiteOpt on { <60> }



------------------------------
[state 24]
WhiteOpt	::= "white" . "=" SymbolSet ";" 


shift "=" -> 46




------------------------------
[state 25]
Rule	::= Subject "::=" RegExpr . ";" 


shift ";" -> 47




------------------------------
[state 26]
Range	::= Atom . ".." Atom 
Range	::= Atom . 


shift ".." -> 48

reduce Range	::= Atom on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 27]
Operation	::= Times . 



reduce Operation	::= Times on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 28]
Operation	::= Plus . 



reduce Operation	::= Plus on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 29]
Operation	::= Star . 



reduce Operation	::= Star on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 30]
Operation	::= Option . 



reduce Operation	::= Option on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 31]
RegExpr	::= Choice . 
Choice	::= Choice . "|" Sequence 


shift "|" -> 49

reduce RegExpr	::= Choice on { ";" ")" }



------------------------------
[state 32]
Choice	::= Sequence . 



reduce Choice	::= Sequence on { ";" "|" ")" }



------------------------------
[state 33]
Sequence	::= <59> . 
<59>	::= <59> . Restriction 
<59>	::= <59> . Factor 

Code	::= . IntegerLiteral 
StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Symbol	::= . IdentifierSymbol 
Range	::= . Atom 
Range	::= . Atom ".." Atom 
Operation	::= . Times 
Operation	::= . Plus 
Operation	::= . Star 
Operation	::= . Option 
Operation	::= . Not 
Reference	::= . Symbol 
Factor	::= . Range 
Factor	::= . Operation 
Factor	::= . Reference 
Factor	::= . "(" RegExpr ")" 
Restriction	::= . Factor "-" Factor 
Symbol	::= . StringSymbol 
Not	::= . Factor "!" 
Option	::= . Factor "?" 
Star	::= . Factor "*" 
Plus	::= . Factor "+" 
Times	::= . Factor ":" IntegerLiteral 
Atom	::= . Code 
Atom	::= . CharacterLiteral 

shift Factor -> 50
shift Restriction -> 51
shift CharacterLiteral -> 43
shift Code -> 42
shift StringSymbol -> 14
shift "(" -> 36
shift Reference -> 37
shift Operation -> 38
shift Range -> 39
shift Symbol -> 40
shift Not -> 41
shift Option -> 30
shift Star -> 29
shift Plus -> 28
shift Times -> 27
shift Atom -> 26
shift IdentifierSymbol -> 13
shift Identifier -> 15
shift StringLiteral -> 16
shift IntegerLiteral -> 44

reduce Sequence	::= <59> on { ";" "|" ")" }



------------------------------
[state 34]
<59>	::= Restriction . 



reduce <59>	::= Restriction on { ";" "|" "(" ")" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 35]
<59>	::= Factor . 
Restriction	::= Factor . "-" Factor 
Star	::= Factor . "*" 
Plus	::= Factor . "+" 
Option	::= Factor . "?" 
Times	::= Factor . ":" IntegerLiteral 
Not	::= Factor . "!" 


shift "-" -> 52
shift ":" -> 53
shift "+" -> 54
shift "!" -> 55
shift "*" -> 56
shift "?" -> 57

reduce <59>	::= Factor on { ";" "|" "(" ")" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 36]
Factor	::= "(" . RegExpr ")" 

Code	::= . IntegerLiteral 
StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Atom	::= . CharacterLiteral 
Atom	::= . Code 
Times	::= . Factor ":" IntegerLiteral 
Plus	::= . Factor "+" 
Star	::= . Factor "*" 
Option	::= . Factor "?" 
Not	::= . Factor "!" 
Operation	::= . Not 
Reference	::= . Symbol 
Factor	::= . Range 
Factor	::= . Operation 
Factor	::= . Reference 
Factor	::= . "(" RegExpr ")" 
Restriction	::= . Factor "-" Factor 
<59>	::= . Factor 
<59>	::= . Restriction 
<59>	::= . <59> Factor 
<59>	::= . <59> Restriction 
Sequence	::= . 
Sequence	::= . <59> 
Choice	::= . Choice "|" Sequence 
Choice	::= . Sequence 
RegExpr	::= . Choice 
Operation	::= . Option 
Operation	::= . Star 
Operation	::= . Plus 
Operation	::= . Times 
Range	::= . Atom ".." Atom 
Range	::= . Atom 
Symbol	::= . IdentifierSymbol 
Symbol	::= . StringSymbol 

shift RegExpr -> 58
shift StringSymbol -> 14
shift IdentifierSymbol -> 13
shift Atom -> 26
shift Times -> 27
shift Plus -> 28
shift Star -> 29
shift Option -> 30
shift Choice -> 31
shift Sequence -> 32
shift <59> -> 33
shift Restriction -> 34
shift Factor -> 35
shift "(" -> 36
shift Reference -> 37
shift Operation -> 38
shift Range -> 39
shift Symbol -> 40
shift Not -> 41
shift Code -> 42
shift CharacterLiteral -> 43
shift Identifier -> 15
shift StringLiteral -> 16
shift IntegerLiteral -> 44

reduce Sequence	::= on { "|" ")" }



------------------------------
[state 37]
Factor	::= Reference . 



reduce Factor	::= Reference on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 38]
Factor	::= Operation . 



reduce Factor	::= Operation on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 39]
Factor	::= Range . 



reduce Factor	::= Range on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 40]
Reference	::= Symbol . 



reduce Reference	::= Symbol on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 41]
Operation	::= Not . 



reduce Operation	::= Not on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 42]
Atom	::= Code . 



reduce Atom	::= Code on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" ".." IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 43]
Atom	::= CharacterLiteral . 



reduce Atom	::= CharacterLiteral on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" ".." IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 44]
Code	::= IntegerLiteral . 



reduce Code	::= IntegerLiteral on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" ".." IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 45]
Scanner	::= "[" "SCANNER" "]" Priorities WhiteOpt <57> . 
<57>	::= <57> . Rule 

StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Symbol	::= . StringSymbol 
Symbol	::= . IdentifierSymbol 
Subject	::= . Symbol 
Rule	::= . Subject "::=" RegExpr ";" 

shift Rule -> 21
shift Subject -> 11
shift Symbol -> 12
shift IdentifierSymbol -> 13
shift StringSymbol -> 14
shift Identifier -> 15
shift StringLiteral -> 16

reduce Scanner	::= "[" "SCANNER" "]" Priorities WhiteOpt <57> on { <60> }



------------------------------
[state 46]
WhiteOpt	::= "white" "=" . SymbolSet ";" 

StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Symbol	::= . StringSymbol 
Symbol	::= . IdentifierSymbol 
SymbolSet	::= . 
SymbolSet	::= . Symbol 
SymbolSet	::= . Symbol <58> 

shift SymbolSet -> 59
shift Symbol -> 60
shift IdentifierSymbol -> 13
shift StringSymbol -> 14
shift Identifier -> 15
shift StringLiteral -> 16

reduce SymbolSet	::= on { ";" }



------------------------------
[state 47]
Rule	::= Subject "::=" RegExpr ";" . 



reduce Rule	::= Subject "::=" RegExpr ";" on { "[" StringLiteral Identifier <60> }



------------------------------
[state 48]
Range	::= Atom ".." . Atom 

Code	::= . IntegerLiteral 
Atom	::= . CharacterLiteral 
Atom	::= . Code 

shift Atom -> 61
shift Code -> 42
shift CharacterLiteral -> 43
shift IntegerLiteral -> 44




------------------------------
[state 49]
Choice	::= Choice "|" . Sequence 

Code	::= . IntegerLiteral 
StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Atom	::= . CharacterLiteral 
Atom	::= . Code 
Times	::= . Factor ":" IntegerLiteral 
Plus	::= . Factor "+" 
Operation	::= . Plus 
Operation	::= . Star 
Operation	::= . Option 
Operation	::= . Not 
Reference	::= . Symbol 
Factor	::= . Range 
Factor	::= . Operation 
Factor	::= . Reference 
Factor	::= . "(" RegExpr ")" 
Restriction	::= . Factor "-" Factor 
<59>	::= . Factor 
<59>	::= . Restriction 
<59>	::= . <59> Factor 
<59>	::= . <59> Restriction 
Sequence	::= . 
Sequence	::= . <59> 
Operation	::= . Times 
Range	::= . Atom ".." Atom 
Range	::= . Atom 
Symbol	::= . IdentifierSymbol 
Symbol	::= . StringSymbol 
Not	::= . Factor "!" 
Option	::= . Factor "?" 
Star	::= . Factor "*" 

shift Sequence -> 62
shift Factor -> 35
shift StringSymbol -> 14
shift IdentifierSymbol -> 13
shift Atom -> 26
shift Times -> 27
shift <59> -> 33
shift Restriction -> 34
shift "(" -> 36
shift Reference -> 37
shift Operation -> 38
shift Range -> 39
shift Symbol -> 40
shift Not -> 41
shift Option -> 30
shift Star -> 29
shift Plus -> 28
shift Code -> 42
shift CharacterLiteral -> 43
shift Identifier -> 15
shift StringLiteral -> 16
shift IntegerLiteral -> 44

reduce Sequence	::= on { ";" "|" ")" }



------------------------------
[state 50]
<59>	::= <59> Factor . 
Restriction	::= Factor . "-" Factor 
Star	::= Factor . "*" 
Plus	::= Factor . "+" 
Option	::= Factor . "?" 
Times	::= Factor . ":" IntegerLiteral 
Not	::= Factor . "!" 


shift "-" -> 52
shift ":" -> 53
shift "+" -> 54
shift "!" -> 55
shift "*" -> 56
shift "?" -> 57

reduce <59>	::= <59> Factor on { ";" "|" "(" ")" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 51]
<59>	::= <59> Restriction . 



reduce <59>	::= <59> Restriction on { ";" "|" "(" ")" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 52]
Restriction	::= Factor "-" . Factor 

Option	::= . Factor "?" 
Not	::= . Factor "!" 
Symbol	::= . StringSymbol 
Symbol	::= . IdentifierSymbol 
Range	::= . Atom 
Range	::= . Atom ".." Atom 
Operation	::= . Times 
Operation	::= . Plus 
Operation	::= . Star 
Operation	::= . Option 
Operation	::= . Not 
Reference	::= . Symbol 
Factor	::= . Range 
Factor	::= . Operation 
Factor	::= . Reference 
Factor	::= . "(" RegExpr ")" 
Star	::= . Factor "*" 
Plus	::= . Factor "+" 
Times	::= . Factor ":" IntegerLiteral 
Atom	::= . Code 
Atom	::= . CharacterLiteral 
IdentifierSymbol	::= . Identifier 
StringSymbol	::= . StringLiteral 
Code	::= . IntegerLiteral 

shift Factor -> 63
shift IntegerLiteral -> 44
shift StringLiteral -> 16
shift Identifier -> 15
shift CharacterLiteral -> 43
shift Code -> 42
shift "(" -> 36
shift Reference -> 37
shift Operation -> 38
shift Range -> 39
shift Symbol -> 40
shift Not -> 41
shift Option -> 30
shift Star -> 29
shift Plus -> 28
shift Times -> 27
shift Atom -> 26
shift IdentifierSymbol -> 13
shift StringSymbol -> 14




------------------------------
[state 53]
Times	::= Factor ":" . IntegerLiteral 


shift IntegerLiteral -> 64




------------------------------
[state 54]
Plus	::= Factor "+" . 



reduce Plus	::= Factor "+" on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 55]
Not	::= Factor "!" . 



reduce Not	::= Factor "!" on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 56]
Star	::= Factor "*" . 



reduce Star	::= Factor "*" on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 57]
Option	::= Factor "?" . 



reduce Option	::= Factor "?" on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 58]
Factor	::= "(" RegExpr . ")" 


shift ")" -> 65




------------------------------
[state 59]
WhiteOpt	::= "white" "=" SymbolSet . ";" 


shift ";" -> 66




------------------------------
[state 60]
SymbolSet	::= Symbol . <58> 
SymbolSet	::= Symbol . 

<58>	::= . "," Symbol 
<58>	::= . <58> "," Symbol 

shift <58> -> 67
shift "," -> 68

reduce SymbolSet	::= Symbol on { ";" }



------------------------------
[state 61]
Range	::= Atom ".." Atom . 



reduce Range	::= Atom ".." Atom on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 62]
Choice	::= Choice "|" Sequence . 



reduce Choice	::= Choice "|" Sequence on { ";" "|" ")" }



------------------------------
[state 63]
Restriction	::= Factor "-" Factor . 
Star	::= Factor . "*" 
Plus	::= Factor . "+" 
Option	::= Factor . "?" 
Times	::= Factor . ":" IntegerLiteral 
Not	::= Factor . "!" 


shift ":" -> 53
shift "+" -> 54
shift "!" -> 55
shift "*" -> 56
shift "?" -> 57

reduce Restriction	::= Factor "-" Factor on { ";" "|" "(" ")" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 64]
Times	::= Factor ":" IntegerLiteral . 



reduce Times	::= Factor ":" IntegerLiteral on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 65]
Factor	::= "(" RegExpr ")" . 



reduce Factor	::= "(" RegExpr ")" on { ";" "|" "-" "(" ")" "*" "+" "?" ":" "!" IntegerLiteral StringLiteral CharacterLiteral Identifier }



------------------------------
[state 66]
WhiteOpt	::= "white" "=" SymbolSet ";" . 



reduce WhiteOpt	::= "white" "=" SymbolSet ";" on { StringLiteral Identifier <60> }



------------------------------
[state 67]
SymbolSet	::= Symbol <58> . 
<58>	::= <58> . "," Symbol 


shift "," -> 69

reduce SymbolSet	::= Symbol <58> on { ";" }



------------------------------
[state 68]
<58>	::= "," . Symbol 

StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Symbol	::= . StringSymbol 
Symbol	::= . IdentifierSymbol 

shift Symbol -> 70
shift IdentifierSymbol -> 13
shift StringSymbol -> 14
shift Identifier -> 15
shift StringLiteral -> 16




------------------------------
[state 69]
<58>	::= <58> "," . Symbol 

StringSymbol	::= . StringLiteral 
IdentifierSymbol	::= . Identifier 
Symbol	::= . StringSymbol 
Symbol	::= . IdentifierSymbol 

shift Symbol -> 71
shift IdentifierSymbol -> 13
shift StringSymbol -> 14
shift Identifier -> 15
shift StringLiteral -> 16




------------------------------
[state 70]
<58>	::= "," Symbol . 



reduce <58>	::= "," Symbol on { ";" "," }



------------------------------
[state 71]
<58>	::= <58> "," Symbol . 



reduce <58>	::= <58> "," Symbol on { ";" "," }



------------------------------
[state 72]


shift <60> -> 73




------------------------------
[state 73]





inline symbols: { 20 21 }
Scanner

start = 0 end = { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 21 24 25 28 29 30 31 33 35 40 42 43 44 45 46 47 48 49 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 }
  0 <null>		[(0)-(8)]->71	[(9)]->25	[(10)]->25	[(11)]->71	[(12)]->25	[(13)]->25	[(14)-(31)]->71	[' ' (32)]->25	['!' (33)]->18	['"' (34)]->22	['#' (35)]->26	['$' (36)]->24	['%' (37)-'&' (38)]->71	[''' (39)]->23	['(' (40)]->13	[')' (41)]->14	['*' (42)]->15	['+' (43)]->16	[',' (44)]->9	['-' (45)]->12	['.' (46)]->19	['/' (47)]->27	['0' (48)]->20	['1' (49)-'9' (57)]->21	[':' (58)]->10	[';' (59)]->8	['<' (60)]->71	['=' (61)]->7	['>' (62)]->71	['?' (63)]->17	['@' (64)]->71	['A' (65)-'O' (79)]->24	['P' (80)]->2	['Q' (81)-'R' (82)]->24	['S' (83)]->4	['T' (84)-'Z' (90)]->24	['[' (91)]->1	['\' (92)]->71	[']' (93)]->3	['^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'m' (109)]->24	['n' (110)]->5	['o' (111)-'v' (118)]->24	['w' (119)]->6	['x' (120)-'z' (122)]->24	['{' (123)]->71	['|' (124)]->11	['}' (125)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  1 { 0 }		[(0)-'?' (65535)]->71
  2 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)]->28	['B' (66)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  3 { 2 }		[(0)-'?' (65535)]->71
  4 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'B' (66)]->24	['C' (67)]->29	['D' (68)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  5 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'n' (110)]->24	['o' (111)]->30	['p' (112)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  6 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'g' (103)]->24	['h' (104)]->31	['i' (105)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  7 { 6 }		[(0)-'?' (65535)]->71
  8 { 7 }		[(0)-'?' (65535)]->71
  9 { 8 }		[(0)-'?' (65535)]->71
  10 { 17 }		[(0)-'9' (57)]->71	[':' (58)]->32	[';' (59)-'?' (65535)]->71
  11 { 10 }		[(0)-'?' (65535)]->71
  12 { 11 }		[(0)-'?' (65535)]->71
  13 { 12 }		[(0)-'?' (65535)]->71
  14 { 13 }		[(0)-'?' (65535)]->71
  15 { 14 }		[(0)-'?' (65535)]->71
  16 { 15 }		[(0)-'?' (65535)]->71
  17 { 16 }		[(0)-'?' (65535)]->71
  18 { 18 }		[(0)-'?' (65535)]->71
  19 <null>		[(0)-'-' (45)]->71	['.' (46)]->33	['/' (47)-'?' (65535)]->71
  20 { 50 }		[(0)-'/' (47)]->71	['0' (48)-'7' (55)]->35	['8' (56)-'W' (87)]->71	['X' (88)]->34	['Y' (89)-'w' (119)]->71	['x' (120)]->34	['y' (121)-'?' (65535)]->71
  21 { 50 }		[(0)-'/' (47)]->71	['0' (48)-'9' (57)]->21	[':' (58)-'?' (65535)]->71
  22 <null>		[(0)-(9)]->37	[(10)]->71	[(11)-(12)]->37	[(13)]->71	[(14)-'!' (33)]->37	['"' (34)]->71	['#' (35)-'[' (91)]->37	['\' (92)]->36	[']' (93)-'?' (65535)]->37
  23 <null>		[(0)-(9)]->39	[(10)]->71	[(11)-(12)]->39	[(13)]->71	[(14)-'&' (38)]->39	[''' (39)]->71	['(' (40)-'[' (91)]->39	['\' (92)]->38	[']' (93)-'?' (65535)]->39
  24 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  25 { 54 }		[(0)-(8)]->71	[(9)]->25	[(10)]->25	[(11)]->71	[(12)]->25	[(13)]->25	[(14)-(31)]->71	[' ' (32)]->25	['!' (33)-'?' (65535)]->71
  26 <null>		[(0)-(9)]->26	[(10)]->40	[(11)-(12)]->26	[(13)]->40	[(14)-'?' (65535)]->26
  27 <null>		[(0)-')' (41)]->71	['*' (42)]->41	['+' (43)-'?' (65535)]->71
  28 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Q' (81)]->24	['R' (82)]->42	['S' (83)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  29 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)]->43	['B' (66)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  30 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'o' (111)]->24	['p' (112)]->44	['q' (113)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  31 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'h' (104)]->24	['i' (105)]->45	['j' (106)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  32 <null>		[(0)-'<' (60)]->71	['=' (61)]->46	['>' (62)-'?' (65535)]->71
  33 { 19 }		[(0)-'?' (65535)]->71
  34 <null>		[(0)-'/' (47)]->71	['0' (48)-'9' (57)]->47	[':' (58)-'@' (64)]->71	['A' (65)-'F' (70)]->47	['G' (71)-'`' (96)]->71	['a' (97)-'f' (102)]->47	['g' (103)-'?' (65535)]->71
  35 { 50 }		[(0)-'/' (47)]->71	['0' (48)-'7' (55)]->35	['8' (56)-'?' (65535)]->71
  36 <null>		[(0)-'?' (65535)]->37
  37 <null>		[(0)-(9)]->37	[(10)]->71	[(11)-(12)]->37	[(13)]->71	[(14)-'!' (33)]->37	['"' (34)]->48	['#' (35)-'[' (91)]->37	['\' (92)]->36	[']' (93)-'?' (65535)]->37
  38 <null>		[(0)-'?' (65535)]->39
  39 <null>		[(0)-(9)]->39	[(10)]->71	[(11)-(12)]->39	[(13)]->71	[(14)-'&' (38)]->39	[''' (39)]->49	['(' (40)-'[' (91)]->39	['\' (92)]->38	[']' (93)-'?' (65535)]->39
  40 { 55 }		[(0)-'?' (65535)]->71
  41 <null>		[(0)-')' (41)]->41	['*' (42)]->50	['+' (43)-'?' (65535)]->41
  42 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'R' (82)]->24	['S' (83)]->51	['T' (84)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  43 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'M' (77)]->24	['N' (78)]->52	['O' (79)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  44 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'q' (113)]->24	['r' (114)]->53	['s' (115)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  45 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'s' (115)]->24	['t' (116)]->54	['u' (117)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  46 { 9 }		[(0)-'?' (65535)]->71
  47 { 50 }		[(0)-'/' (47)]->71	['0' (48)-'9' (57)]->47	[':' (58)-'@' (64)]->71	['A' (65)-'F' (70)]->47	['G' (71)-'`' (96)]->71	['a' (97)-'f' (102)]->47	['g' (103)-'?' (65535)]->71
  48 { 51 }		[(0)-'?' (65535)]->71
  49 { 52 }		[(0)-'?' (65535)]->71
  50 <null>		[(0)-')' (41)]->41	['*' (42)]->50	['+' (43)-'.' (46)]->41	['/' (47)]->55	['0' (48)-'?' (65535)]->41
  51 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'D' (68)]->24	['E' (69)]->56	['F' (70)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  52 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'M' (77)]->24	['N' (78)]->57	['O' (79)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  53 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'h' (104)]->24	['i' (105)]->58	['j' (106)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  54 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'d' (100)]->24	['e' (101)]->59	['f' (102)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  55 { 56 }		[(0)-'?' (65535)]->71
  56 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Q' (81)]->24	['R' (82)]->60	['S' (83)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  57 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'D' (68)]->24	['E' (69)]->61	['F' (70)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  58 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'n' (110)]->24	['o' (111)]->62	['p' (112)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  59 { 5 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  60 { 1 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  61 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Q' (81)]->24	['R' (82)]->63	['S' (83)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  62 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'q' (113)]->24	['r' (114)]->64	['s' (115)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  63 { 3 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  64 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'h' (104)]->24	['i' (105)]->65	['j' (106)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  65 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'s' (115)]->24	['t' (116)]->66	['u' (117)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  66 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'h' (104)]->24	['i' (105)]->67	['j' (106)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  67 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'d' (100)]->24	['e' (101)]->68	['f' (102)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  68 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'r' (114)]->24	['s' (115)]->69	['t' (116)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  69 { 53 }		[(0)-(8)]->24	[(9)-(13)]->71	[(14)-(27)]->24	[(28)-'#' (35)]->71	['$' (36)]->24	['%' (37)-'/' (47)]->71	['0' (48)-'9' (57)]->24	[':' (58)]->71	[';' (59)]->70	['<' (60)-'@' (64)]->71	['A' (65)-'Z' (90)]->24	['[' (91)-'^' (94)]->71	['_' (95)]->24	['`' (96)]->71	['a' (97)-'z' (122)]->24	['{' (123)-'~' (126)]->71	['' (127)-'?' (159)]->24	['?' (160)-'?' (161)]->71	['?' (162)-'?' (165)]->24	['?' (166)-'?' (169)]->71	['?' (170)]->24	['?' (171)-'?' (180)]->71	['?' (181)]->24	['?' (182)-'?' (185)]->71	['?' (186)]->24	['?' (187)-'?' (191)]->71	['?' (192)-'?' (214)]->24	['?' (215)]->71	['?' (216)-'?' (246)]->24	['?' (247)]->71	['?' (248)-'?' (255)]->24	['?' (256)-'?' (65535)]->71
  70 { 4 }		[(0)-'?' (65535)]->71
  71 <null>		[(0)-'?' (65535)]->71
fa end

scanner modes: 1
 mode 0 { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 }
modes for parser states: 
 0 0
 1 0
 2 0
 3 0
 4 0
 5 0
 6 0
 7 0
 8 0
 9 0
 10 0
 11 0
 12 0
 13 0
 14 0
 15 0
 16 0
 17 0
 18 0
 19 0
 20 0
 21 0
 22 0
 23 0
 24 0
 25 0
 26 0
 27 0
 28 0
 29 0
 30 0
 31 0
 32 0
 33 0
 34 0
 35 0
 36 0
 37 0
 38 0
 39 0
 40 0
 41 0
 42 0
 43 0
 44 0
 45 0
 46 0
 47 0
 48 0
 49 0
 50 0
 51 0
 52 0
 53 0
 54 0
 55 0
 56 0
 57 0
 58 0
 59 0
 60 0
 61 0
 62 0
 63 0
 64 0
 65 0
 66 0
 67 0
 68 0
 69 0
 70 0
 71 0
 72 0
 73 0


Attribute Grammar

[0]	Grammar	::= Parser Scanner
		Grammar[-1].null  <==  (Parser[0].null, Scanner[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Grammar[-1].null  <==  (Parser[0].null)
			java.lang.Object copy(java.lang.Object)
		Grammar[-1].null  <==  (Scanner[1].null)
			java.lang.Object copy(java.lang.Object)
		Grammar[-1].merged5  <==  (Scanner[1].merged4)
			java.lang.Object copy(java.lang.Object)
		Grammar[-1].merged11  <==  (Scanner[1].merged10)
			java.lang.Object copy(java.lang.Object)
		Grammar[-1].Grammar  <==  (Grammar[-1].grammarSymbolTable, Grammar[-1].null, Grammar[-1].merged5, Grammar[-1].merged11, Grammar[-1].null, Grammar[-1].null)
			de.mlhartme.mork.compiler.GrammarSyntax grammarSyntax1Tode.mlhartme.mork.grammar.RuleArray4Tode.mlhartme.mork.grammar.RuleArray(de.mlhartme.mork.util.StringArrayList, java.util.List, java.lang.Boolean, de.mlhartme.mork.util.IntBitSet, java.util.List, java.util.List)
		Grammar[-1].null  <==  (Parser[0].null, Scanner[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Grammar[-1].null  <==  (Parser[0].null, Scanner[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Grammar[-1].grammarSymbolTable  <==  (Grammar[-1].null, Grammar[-1].null)
			de.mlhartme.mork.util.StringArrayList symbolTable0Tojava.lang.StringArray1Tojava.lang.StringArray(java.util.List, java.util.List)
		Scanner[1].null  <==  (Grammar[-1].grammarSymbolTable)
			java.lang.Object copy(java.lang.Object)
		Parser[0].null  <==  (Grammar[-1].grammarSymbolTable)
			java.lang.Object copy(java.lang.Object)
		Scanner[1].null  <==  (Grammar[-1].grammarSymbolTable)
			java.lang.Object copy(java.lang.Object)
		Parser[0].null  <==  (Grammar[-1].grammarSymbolTable)
			java.lang.Object copy(java.lang.Object)

[1]	Parser	::= "[" "PARSER" "]" <57>
		Parser[-1].null  <==  (<57>[3].null)
			java.lang.Object copy(java.lang.Object)
		Parser[-1].null  <==  (<57>[3].null)
			java.lang.Object copy(java.lang.Object)
		Parser[-1].null  <==  (<57>[3].null)
			java.lang.Object copy(java.lang.Object)
		Parser[-1].null  <==  (<57>[3].null)
			java.lang.Object copy(java.lang.Object)
		<57>[3].null  <==  (Parser[-1].null)
			java.lang.Object copy(java.lang.Object)
		<57>[3].null  <==  (Parser[-1].null)
			java.lang.Object copy(java.lang.Object)

[2]	Scanner	::= "[" "SCANNER" "]" Priorities WhiteOpt <57>
		Scanner[-1].null  <==  (WhiteOpt[4].null, <57>[5].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Scanner[-1].null  <==  (<57>[5].null)
			java.lang.Object copy(java.lang.Object)
		Scanner[-1].merged4  <==  (Priorities[3].merged3)
			java.lang.Object copy(java.lang.Object)
		Scanner[-1].merged10  <==  (WhiteOpt[4].merged9)
			java.lang.Object copy(java.lang.Object)
		Scanner[-1].null  <==  (WhiteOpt[4].null, <57>[5].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Scanner[-1].null  <==  (<57>[5].null)
			java.lang.Object copy(java.lang.Object)
		WhiteOpt[4].null  <==  (Scanner[-1].null)
			java.lang.Object copy(java.lang.Object)
		<57>[5].null  <==  (Scanner[-1].null)
			java.lang.Object copy(java.lang.Object)
		WhiteOpt[4].null  <==  (Scanner[-1].null)
			java.lang.Object copy(java.lang.Object)
		<57>[5].null  <==  (Scanner[-1].null)
			java.lang.Object copy(java.lang.Object)

[3]	Scanner	::= "[" "SCANNER" "]" Priorities WhiteOpt
		Scanner[-1].null  <==  (WhiteOpt[4].null)
			java.lang.Object copy(java.lang.Object)
		Scanner[-1].null  <==  ()
			java.lang.Object createSequence()
		Scanner[-1].merged4  <==  (Priorities[3].merged3)
			java.lang.Object copy(java.lang.Object)
		Scanner[-1].merged10  <==  (WhiteOpt[4].merged9)
			java.lang.Object copy(java.lang.Object)
		Scanner[-1].null  <==  (WhiteOpt[4].null)
			java.lang.Object copy(java.lang.Object)
		Scanner[-1].null  <==  ()
			java.lang.Object createSequence()
		WhiteOpt[4].null  <==  (Scanner[-1].null)
			java.lang.Object copy(java.lang.Object)
		WhiteOpt[4].null  <==  (Scanner[-1].null)
			java.lang.Object copy(java.lang.Object)

[4]	<57>	::= <57> Rule
		<57>[-1].null  <==  (<57>[0].null, Rule[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<57>[-1].null  <==  (<57>[0].null, Rule[1].Rule)
			java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)
		<57>[-1].null  <==  (<57>[0].null, Rule[1].Rule)
			java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)
		<57>[-1].null  <==  (<57>[0].null, Rule[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<57>[-1].null  <==  (<57>[0].null, Rule[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Rule[1].null  <==  (<57>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<57>[0].null  <==  (<57>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Rule[1].null  <==  (<57>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<57>[0].null  <==  (<57>[-1].null)
			java.lang.Object copy(java.lang.Object)

[5]	<57>	::= Rule
		<57>[-1].null  <==  (Rule[0].null)
			java.lang.Object copy(java.lang.Object)
		<57>[-1].null  <==  (Rule[0].Rule)
			java.lang.Object createSequenceValue(java.lang.Object)
		<57>[-1].null  <==  (Rule[0].Rule)
			java.lang.Object createSequenceValue(java.lang.Object)
		<57>[-1].null  <==  (Rule[0].null)
			java.lang.Object copy(java.lang.Object)
		<57>[-1].null  <==  (Rule[0].null)
			java.lang.Object copy(java.lang.Object)
		Rule[0].null  <==  (<57>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Rule[0].null  <==  (<57>[-1].null)
			java.lang.Object copy(java.lang.Object)

[6]	Priorities	::= NoPriorities
		Priorities[-1].merged3  <==  (NoPriorities[0].NoPriorities)
			java.lang.Object copy(java.lang.Object)

[7]	Priorities	::= UsePriorities
		Priorities[-1].merged3  <==  (UsePriorities[0].UsePriorities)
			java.lang.Object copy(java.lang.Object)

[8]	UsePriorities	::=
		UsePriorities[-1].UsePriorities  <==  ()
			java.lang.Boolean TRUE()

[9]	NoPriorities	::= "nopriorities;"
		NoPriorities[-1].NoPriorities  <==  ()
			java.lang.Boolean FALSE()

[10]	WhiteOpt	::= "white" "=" SymbolSet ";"
		WhiteOpt[-1].null  <==  (SymbolSet[2].null)
			java.lang.Object copy(java.lang.Object)
		WhiteOpt[-1].merged9  <==  (SymbolSet[2].SymbolSet)
			java.lang.Object copy(java.lang.Object)
		WhiteOpt[-1].null  <==  (SymbolSet[2].null)
			java.lang.Object copy(java.lang.Object)
		SymbolSet[2].null  <==  (WhiteOpt[-1].null)
			java.lang.Object copy(java.lang.Object)
		SymbolSet[2].null  <==  (WhiteOpt[-1].null)
			java.lang.Object copy(java.lang.Object)

[11]	WhiteOpt	::=
		WhiteOpt[-1].null  <==  ()
			java.lang.Object createSequence()
		WhiteOpt[-1].merged9  <==  ()
			java.lang.Object createOption()
		WhiteOpt[-1].null  <==  ()
			java.lang.Object createSequence()

[12]	SymbolSet	::= Symbol <58>
		SymbolSet[-1].null  <==  (Symbol[0].null, <58>[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		SymbolSet[-1].null  <==  (Symbol[0].null, <58>[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		SymbolSet[-1].merged15  <==  (Symbol[0].merged16, <58>[1].merged17)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		SymbolSet[-1].SymbolSet  <==  (SymbolSet[-1].merged15)
			de.mlhartme.mork.util.IntBitSet symbolSet0TointArray(java.util.List)
		Symbol[0].null  <==  (SymbolSet[-1].null)
			java.lang.Object copy(java.lang.Object)
		<58>[1].null  <==  (SymbolSet[-1].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[0].null  <==  (SymbolSet[-1].null)
			java.lang.Object copy(java.lang.Object)
		<58>[1].null  <==  (SymbolSet[-1].null)
			java.lang.Object copy(java.lang.Object)

[13]	SymbolSet	::= Symbol
		SymbolSet[-1].null  <==  (Symbol[0].null)
			java.lang.Object copy(java.lang.Object)
		SymbolSet[-1].null  <==  (Symbol[0].null)
			java.lang.Object copy(java.lang.Object)
		SymbolSet[-1].merged15  <==  (Symbol[0].merged16)
			java.lang.Object copy(java.lang.Object)
		SymbolSet[-1].SymbolSet  <==  (SymbolSet[-1].merged15)
			de.mlhartme.mork.util.IntBitSet symbolSet0TointArray(java.util.List)
		Symbol[0].null  <==  (SymbolSet[-1].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[0].null  <==  (SymbolSet[-1].null)
			java.lang.Object copy(java.lang.Object)

[14]	SymbolSet	::=
		SymbolSet[-1].null  <==  ()
			java.lang.Object createSequence()
		SymbolSet[-1].null  <==  ()
			java.lang.Object createSequence()
		SymbolSet[-1].merged15  <==  ()
			java.lang.Object createSequence()
		SymbolSet[-1].SymbolSet  <==  (SymbolSet[-1].merged15)
			de.mlhartme.mork.util.IntBitSet symbolSet0TointArray(java.util.List)

[15]	<58>	::= <58> "," Symbol
		<58>[-1].null  <==  (<58>[0].null, Symbol[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<58>[-1].null  <==  (<58>[0].null, Symbol[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<58>[-1].merged17  <==  (<58>[0].merged17, Symbol[2].merged16)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Symbol[2].null  <==  (<58>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<58>[0].null  <==  (<58>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[2].null  <==  (<58>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<58>[0].null  <==  (<58>[-1].null)
			java.lang.Object copy(java.lang.Object)

[16]	<58>	::= "," Symbol
		<58>[-1].null  <==  (Symbol[1].null)
			java.lang.Object copy(java.lang.Object)
		<58>[-1].null  <==  (Symbol[1].null)
			java.lang.Object copy(java.lang.Object)
		<58>[-1].merged17  <==  (Symbol[1].merged16)
			java.lang.Object copy(java.lang.Object)
		Symbol[1].null  <==  (<58>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[1].null  <==  (<58>[-1].null)
			java.lang.Object copy(java.lang.Object)

[17]	Symbol	::= IdentifierSymbol
		Symbol[-1].null  <==  ()
			java.lang.Object createSequence()
		Symbol[-1].null  <==  ()
			java.lang.Object createSequence()
		Symbol[-1].null  <==  (IdentifierSymbol[0].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[-1].merged16  <==  (IdentifierSymbol[0].IdentifierSymbol)
			java.lang.Object createSequenceValue(java.lang.Object)
		IdentifierSymbol[0].null  <==  (Symbol[-1].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[-1].merged23  <==  (IdentifierSymbol[0].IdentifierSymbol)
			java.lang.Object copy(java.lang.Object)
		Symbol[-1].merged104  <==  (IdentifierSymbol[0].IdentifierSymbol)
			java.lang.Object copy(java.lang.Object)

[18]	Symbol	::= StringSymbol
		Symbol[-1].null  <==  (StringSymbol[0].Keyword)
			java.lang.Object createSequenceValue(java.lang.Object)
		Symbol[-1].null  <==  (StringSymbol[0].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[-1].null  <==  ()
			java.lang.Object createSequence()
		Symbol[-1].merged16  <==  (StringSymbol[0].StringSymbol)
			java.lang.Object createSequenceValue(java.lang.Object)
		StringSymbol[0].null  <==  (Symbol[-1].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[-1].merged23  <==  (StringSymbol[0].StringSymbol)
			java.lang.Object copy(java.lang.Object)
		Symbol[-1].merged104  <==  (StringSymbol[0].StringSymbol)
			java.lang.Object copy(java.lang.Object)

[19]	StringSymbol	::= StringLiteral
		StringSymbol[-1].null  <==  (StringLiteral[0].null)
			java.lang.Object createSequenceValue(java.lang.Object)
		StringSymbol[-1].null  <==  (StringLiteral[0].null)
			java.lang.Object copy(java.lang.Object)
		StringSymbol[-1].StringSymbol  <==  (StringSymbol[-1].null, StringSymbol[-1].null)
			int symbolRef(de.mlhartme.mork.util.StringArrayList, java.lang.String)
		StringSymbol[-1].null  <==  (StringLiteral[0].null)
			java.lang.Object copy(java.lang.Object)
		StringSymbol[-1].Keyword  <==  (StringSymbol[-1].StringSymbol, StringSymbol[-1].null)
			[Ljava.lang.Object; keyword(java.lang.Integer, java.lang.String)

[20]	IdentifierSymbol	::= Identifier
		IdentifierSymbol[-1].null  <==  (Identifier[0].null)
			java.lang.Object createSequenceValue(java.lang.Object)
		IdentifierSymbol[-1].merged19  <==  (Identifier[0].null)
			java.lang.Object copy(java.lang.Object)
		IdentifierSymbol[-1].IdentifierSymbol  <==  (IdentifierSymbol[-1].null, IdentifierSymbol[-1].merged19)
			int symbolRef(de.mlhartme.mork.util.StringArrayList, java.lang.String)

[21]	Rule	::= Subject "::=" RegExpr ";"
		Rule[-1].null  <==  (Subject[0].null, RegExpr[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Rule[-1].null  <==  (Subject[0].null, RegExpr[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Rule[-1].null  <==  (Subject[0].null)
			java.lang.Object copy(java.lang.Object)
		Subject[0].null  <==  (Rule[-1].null)
			java.lang.Object copy(java.lang.Object)
		RegExpr[2].null  <==  (Rule[-1].null)
			java.lang.Object copy(java.lang.Object)
		Subject[0].null  <==  (Rule[-1].null)
			java.lang.Object copy(java.lang.Object)
		RegExpr[2].null  <==  (Rule[-1].null)
			java.lang.Object copy(java.lang.Object)
		Rule[-1].merged25  <==  (Subject[0].merged24)
			java.lang.Object copy(java.lang.Object)
		Rule[-1].merged29  <==  (RegExpr[2].merged28)
			java.lang.Object copy(java.lang.Object)
		Rule[-1].Rule  <==  (Rule[-1].merged25, Rule[-1].merged29)
			de.mlhartme.mork.grammar.Rule de.mlhartme.mork.grammar.Rule(java.lang.Integer, de.mlhartme.mork.regexpr.RegExpr)

[22]	Subject	::= Symbol
		Subject[-1].null  <==  (Symbol[0].null)
			java.lang.Object copy(java.lang.Object)
		Subject[-1].null  <==  (Symbol[0].null)
			java.lang.Object copy(java.lang.Object)
		Subject[-1].null  <==  (Symbol[0].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[0].null  <==  (Subject[-1].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[0].null  <==  (Subject[-1].null)
			java.lang.Object copy(java.lang.Object)
		Subject[-1].merged24  <==  (Symbol[0].merged23)
			java.lang.Object copy(java.lang.Object)

[23]	RegExpr	::= Choice
		RegExpr[-1].null  <==  (Choice[0].null)
			java.lang.Object copy(java.lang.Object)
		RegExpr[-1].null  <==  (Choice[0].null)
			java.lang.Object copy(java.lang.Object)
		Choice[0].null  <==  (RegExpr[-1].null)
			java.lang.Object copy(java.lang.Object)
		Choice[0].null  <==  (RegExpr[-1].null)
			java.lang.Object copy(java.lang.Object)
		RegExpr[-1].merged28  <==  (Choice[0].Choice)
			java.lang.Object copy(java.lang.Object)
		RegExpr[-1].merged42  <==  (Choice[0].Choice)
			java.lang.Object createSequenceValue(java.lang.Object)
		RegExpr[-1].merged48  <==  (Choice[0].Choice)
			java.lang.Object copy(java.lang.Object)
		RegExpr[-1].merged56  <==  (Choice[0].Choice)
			java.lang.Object copy(java.lang.Object)
		RegExpr[-1].merged64  <==  (Choice[0].Choice)
			java.lang.Object copy(java.lang.Object)
		RegExpr[-1].merged72  <==  (Choice[0].Choice)
			java.lang.Object copy(java.lang.Object)
		RegExpr[-1].merged80  <==  (Choice[0].Choice)
			java.lang.Object copy(java.lang.Object)
		RegExpr[-1].merged88  <==  (Choice[0].Choice)
			java.lang.Object copy(java.lang.Object)
		RegExpr[-1].merged98  <==  (Choice[0].Choice)
			java.lang.Object copy(java.lang.Object)

[24]	Choice	::= Sequence
		Choice[-1].null  <==  (Sequence[0].null)
			java.lang.Object copy(java.lang.Object)
		Choice[-1].null  <==  (Sequence[0].null)
			java.lang.Object copy(java.lang.Object)
		Sequence[0].null  <==  (Choice[-1].null)
			java.lang.Object copy(java.lang.Object)
		Sequence[0].null  <==  (Choice[-1].null)
			java.lang.Object copy(java.lang.Object)
		Choice[-1].merged31  <==  ()
			java.lang.Object createOption()
		Choice[-1].merged33  <==  (Sequence[0].Sequence)
			java.lang.Object copy(java.lang.Object)
		Choice[-1].Choice  <==  (Choice[-1].merged31, Choice[-1].merged33)
			de.mlhartme.mork.regexpr.RegExpr createLeftOptional(de.mlhartme.mork.regexpr.RegExpr, de.mlhartme.mork.regexpr.RegExpr)

[25]	Choice	::= Choice "|" Sequence
		Choice[-1].null  <==  (Choice[0].null, Sequence[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Choice[-1].null  <==  (Choice[0].null, Sequence[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Sequence[2].null  <==  (Choice[-1].null)
			java.lang.Object copy(java.lang.Object)
		Choice[0].null  <==  (Choice[-1].null)
			java.lang.Object copy(java.lang.Object)
		Sequence[2].null  <==  (Choice[-1].null)
			java.lang.Object copy(java.lang.Object)
		Choice[0].null  <==  (Choice[-1].null)
			java.lang.Object copy(java.lang.Object)
		Choice[-1].merged31  <==  (Choice[0].Choice)
			java.lang.Object copy(java.lang.Object)
		Choice[-1].merged33  <==  (Sequence[2].Sequence)
			java.lang.Object copy(java.lang.Object)
		Choice[-1].Choice  <==  (Choice[-1].merged31, Choice[-1].merged33)
			de.mlhartme.mork.regexpr.RegExpr createLeftOptional(de.mlhartme.mork.regexpr.RegExpr, de.mlhartme.mork.regexpr.RegExpr)

[26]	Sequence	::= <59>
		Sequence[-1].null  <==  (<59>[0].null)
			java.lang.Object copy(java.lang.Object)
		Sequence[-1].null  <==  (<59>[0].null)
			java.lang.Object copy(java.lang.Object)
		<59>[0].null  <==  (Sequence[-1].null)
			java.lang.Object copy(java.lang.Object)
		<59>[0].null  <==  (Sequence[-1].null)
			java.lang.Object copy(java.lang.Object)
		Sequence[-1].merged39  <==  (<59>[0].merged40)
			java.lang.Object copy(java.lang.Object)
		Sequence[-1].Sequence  <==  (Sequence[-1].merged39)
			de.mlhartme.mork.regexpr.Sequence de.mlhartme.mork.regexpr.Sequence0Tode.mlhartme.mork.regexpr.RegExprArray(java.util.List)

[27]	Sequence	::=
		Sequence[-1].null  <==  ()
			java.lang.Object createSequence()
		Sequence[-1].null  <==  ()
			java.lang.Object createSequence()
		Sequence[-1].merged39  <==  ()
			java.lang.Object createSequence()
		Sequence[-1].Sequence  <==  (Sequence[-1].merged39)
			de.mlhartme.mork.regexpr.Sequence de.mlhartme.mork.regexpr.Sequence0Tode.mlhartme.mork.regexpr.RegExprArray(java.util.List)

[28]	<59>	::= <59> Restriction
		<59>[-1].null  <==  (<59>[0].null, Restriction[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<59>[-1].null  <==  (<59>[0].null, Restriction[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<59>[0].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Restriction[1].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<59>[0].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Restriction[1].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<59>[-1].merged40  <==  (<59>[0].merged40, Restriction[1].Restriction)
			java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)

[29]	<59>	::= <59> Factor
		<59>[-1].null  <==  (<59>[0].null, Factor[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		<59>[-1].null  <==  (<59>[0].null, Factor[1].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Factor[1].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<59>[0].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[1].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<59>[0].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<59>[-1].merged40  <==  (<59>[0].merged40, Factor[1].merged41)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)

[30]	<59>	::= Restriction
		<59>[-1].null  <==  (Restriction[0].null)
			java.lang.Object copy(java.lang.Object)
		<59>[-1].null  <==  (Restriction[0].null)
			java.lang.Object copy(java.lang.Object)
		Restriction[0].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Restriction[0].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<59>[-1].merged40  <==  (Restriction[0].Restriction)
			java.lang.Object createSequenceValue(java.lang.Object)

[31]	<59>	::= Factor
		<59>[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		<59>[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (<59>[-1].null)
			java.lang.Object copy(java.lang.Object)
		<59>[-1].merged40  <==  (Factor[0].merged41)
			java.lang.Object copy(java.lang.Object)

[32]	Restriction	::= Factor "-" Factor
		Restriction[-1].null  <==  (Factor[0].null, Factor[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Restriction[-1].null  <==  (Factor[0].null, Factor[2].null)
			java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)
		Factor[0].null  <==  (Restriction[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[2].null  <==  (Restriction[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Restriction[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[2].null  <==  (Restriction[-1].null)
			java.lang.Object copy(java.lang.Object)
		Restriction[-1].merged50  <==  (Factor[0].merged49)
			java.lang.Object copy(java.lang.Object)
		Restriction[-1].merged58  <==  (Factor[2].merged57)
			java.lang.Object copy(java.lang.Object)
		Restriction[-1].Restriction  <==  (Restriction[-1].merged50, Restriction[-1].merged58)
			de.mlhartme.mork.regexpr.Without de.mlhartme.mork.regexpr.Without(de.mlhartme.mork.regexpr.RegExpr, de.mlhartme.mork.regexpr.RegExpr)

[33]	Factor	::= "(" RegExpr ")"
		Factor[-1].null  <==  (RegExpr[1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].null  <==  (RegExpr[1].null)
			java.lang.Object copy(java.lang.Object)
		RegExpr[1].null  <==  (Factor[-1].null)
			java.lang.Object copy(java.lang.Object)
		RegExpr[1].null  <==  (Factor[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged41  <==  (RegExpr[1].merged42)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged49  <==  (RegExpr[1].merged48)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged57  <==  (RegExpr[1].merged56)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged65  <==  (RegExpr[1].merged64)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged73  <==  (RegExpr[1].merged72)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged81  <==  (RegExpr[1].merged80)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged89  <==  (RegExpr[1].merged88)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged99  <==  (RegExpr[1].merged98)
			java.lang.Object copy(java.lang.Object)

[34]	Factor	::= Reference
		Factor[-1].null  <==  (Reference[0].null)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].null  <==  (Reference[0].null)
			java.lang.Object copy(java.lang.Object)
		Reference[0].null  <==  (Factor[-1].null)
			java.lang.Object copy(java.lang.Object)
		Reference[0].null  <==  (Factor[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged41  <==  (Reference[0].Reference)
			java.lang.Object createSequenceValue(java.lang.Object)
		Factor[-1].merged49  <==  (Reference[0].Reference)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged57  <==  (Reference[0].Reference)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged65  <==  (Reference[0].Reference)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged73  <==  (Reference[0].Reference)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged81  <==  (Reference[0].Reference)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged89  <==  (Reference[0].Reference)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged99  <==  (Reference[0].Reference)
			java.lang.Object copy(java.lang.Object)

[35]	Factor	::= Operation
		Factor[-1].null  <==  (Operation[0].null)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].null  <==  (Operation[0].null)
			java.lang.Object copy(java.lang.Object)
		Operation[0].null  <==  (Factor[-1].null)
			java.lang.Object copy(java.lang.Object)
		Operation[0].null  <==  (Factor[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged41  <==  (Operation[0].merged43)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged49  <==  (Operation[0].merged51)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged57  <==  (Operation[0].merged59)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged65  <==  (Operation[0].merged67)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged73  <==  (Operation[0].merged75)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged81  <==  (Operation[0].merged83)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged89  <==  (Operation[0].merged91)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged99  <==  (Operation[0].merged101)
			java.lang.Object copy(java.lang.Object)

[36]	Factor	::= Range
		Factor[-1].null  <==  ()
			java.lang.Object createSequence()
		Factor[-1].null  <==  ()
			java.lang.Object createSequence()
		Factor[-1].merged41  <==  (Range[0].Range)
			java.lang.Object createSequenceValue(java.lang.Object)
		Factor[-1].merged49  <==  (Range[0].Range)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged57  <==  (Range[0].Range)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged65  <==  (Range[0].Range)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged73  <==  (Range[0].Range)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged81  <==  (Range[0].Range)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged89  <==  (Range[0].Range)
			java.lang.Object copy(java.lang.Object)
		Factor[-1].merged99  <==  (Range[0].Range)
			java.lang.Object copy(java.lang.Object)

[37]	Operation	::= Not
		Operation[-1].null  <==  (Not[0].null)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].null  <==  (Not[0].null)
			java.lang.Object copy(java.lang.Object)
		Not[0].null  <==  (Operation[-1].null)
			java.lang.Object copy(java.lang.Object)
		Not[0].null  <==  (Operation[-1].null)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged43  <==  (Not[0].Not)
			java.lang.Object createSequenceValue(java.lang.Object)
		Operation[-1].merged51  <==  (Not[0].Not)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged59  <==  (Not[0].Not)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged67  <==  (Not[0].Not)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged75  <==  (Not[0].Not)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged83  <==  (Not[0].Not)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged91  <==  (Not[0].Not)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged101  <==  (Not[0].Not)
			java.lang.Object copy(java.lang.Object)

[38]	Operation	::= Option
		Operation[-1].null  <==  (Option[0].null)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].null  <==  (Option[0].null)
			java.lang.Object copy(java.lang.Object)
		Option[0].null  <==  (Operation[-1].null)
			java.lang.Object copy(java.lang.Object)
		Option[0].null  <==  (Operation[-1].null)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged43  <==  (Option[0].Option)
			java.lang.Object createSequenceValue(java.lang.Object)
		Operation[-1].merged51  <==  (Option[0].Option)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged59  <==  (Option[0].Option)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged67  <==  (Option[0].Option)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged75  <==  (Option[0].Option)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged83  <==  (Option[0].Option)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged91  <==  (Option[0].Option)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged101  <==  (Option[0].Option)
			java.lang.Object copy(java.lang.Object)

[39]	Operation	::= Star
		Operation[-1].null  <==  (Star[0].null)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].null  <==  (Star[0].null)
			java.lang.Object copy(java.lang.Object)
		Star[0].null  <==  (Operation[-1].null)
			java.lang.Object copy(java.lang.Object)
		Star[0].null  <==  (Operation[-1].null)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged43  <==  (Star[0].Star)
			java.lang.Object createSequenceValue(java.lang.Object)
		Operation[-1].merged51  <==  (Star[0].Star)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged59  <==  (Star[0].Star)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged67  <==  (Star[0].Star)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged75  <==  (Star[0].Star)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged83  <==  (Star[0].Star)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged91  <==  (Star[0].Star)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged101  <==  (Star[0].Star)
			java.lang.Object copy(java.lang.Object)

[40]	Operation	::= Plus
		Operation[-1].null  <==  (Plus[0].null)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].null  <==  (Plus[0].null)
			java.lang.Object copy(java.lang.Object)
		Plus[0].null  <==  (Operation[-1].null)
			java.lang.Object copy(java.lang.Object)
		Plus[0].null  <==  (Operation[-1].null)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged43  <==  (Plus[0].Plus)
			java.lang.Object createSequenceValue(java.lang.Object)
		Operation[-1].merged51  <==  (Plus[0].Plus)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged59  <==  (Plus[0].Plus)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged67  <==  (Plus[0].Plus)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged75  <==  (Plus[0].Plus)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged83  <==  (Plus[0].Plus)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged91  <==  (Plus[0].Plus)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged101  <==  (Plus[0].Plus)
			java.lang.Object copy(java.lang.Object)

[41]	Operation	::= Times
		Operation[-1].null  <==  (Times[0].null)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].null  <==  (Times[0].null)
			java.lang.Object copy(java.lang.Object)
		Times[0].null  <==  (Operation[-1].null)
			java.lang.Object copy(java.lang.Object)
		Times[0].null  <==  (Operation[-1].null)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged43  <==  (Times[0].Times)
			java.lang.Object createSequenceValue(java.lang.Object)
		Operation[-1].merged51  <==  (Times[0].Times)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged59  <==  (Times[0].Times)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged67  <==  (Times[0].Times)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged75  <==  (Times[0].Times)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged83  <==  (Times[0].Times)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged91  <==  (Times[0].Times)
			java.lang.Object copy(java.lang.Object)
		Operation[-1].merged101  <==  (Times[0].Times)
			java.lang.Object copy(java.lang.Object)

[42]	Star	::= Factor "*"
		Star[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Star[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Star[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Star[-1].null)
			java.lang.Object copy(java.lang.Object)
		Star[-1].merged66  <==  (Factor[0].merged65)
			java.lang.Object copy(java.lang.Object)
		Star[-1].Star  <==  (Star[-1].merged66)
			de.mlhartme.mork.regexpr.RegExpr createStar(de.mlhartme.mork.regexpr.RegExpr)

[43]	Plus	::= Factor "+"
		Plus[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Plus[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Plus[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Plus[-1].null)
			java.lang.Object copy(java.lang.Object)
		Plus[-1].merged74  <==  (Factor[0].merged73)
			java.lang.Object copy(java.lang.Object)
		Plus[-1].Plus  <==  (Plus[-1].merged74)
			de.mlhartme.mork.regexpr.Loop de.mlhartme.mork.regexpr.Loop(de.mlhartme.mork.regexpr.RegExpr)

[44]	Option	::= Factor "?"
		Option[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Option[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Option[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Option[-1].null)
			java.lang.Object copy(java.lang.Object)
		Option[-1].merged82  <==  (Factor[0].merged81)
			java.lang.Object copy(java.lang.Object)
		Option[-1].Option  <==  (Option[-1].merged82)
			de.mlhartme.mork.regexpr.Choice createOption(de.mlhartme.mork.regexpr.RegExpr)

[45]	Times	::= Factor ":" IntegerLiteral
		Times[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Times[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Times[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Times[-1].null)
			java.lang.Object copy(java.lang.Object)
		Times[-1].merged90  <==  (Factor[0].merged89)
			java.lang.Object copy(java.lang.Object)
		Times[-1].merged93  <==  (IntegerLiteral[2].IntegerLiteral)
			java.lang.Object copy(java.lang.Object)
		Times[-1].Times  <==  (Times[-1].merged90, Times[-1].merged93)
			de.mlhartme.mork.regexpr.Sequence createTimes(de.mlhartme.mork.regexpr.RegExpr, java.lang.Integer)
		IntegerLiteral[2].IntegerLiteral  <==  (IntegerLiteral[2].null)
			java.lang.Integer decode(java.lang.String)

[46]	Not	::= Factor "!"
		Not[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Not[-1].null  <==  (Factor[0].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Not[-1].null)
			java.lang.Object copy(java.lang.Object)
		Factor[0].null  <==  (Not[-1].null)
			java.lang.Object copy(java.lang.Object)
		Not[-1].merged100  <==  (Factor[0].merged99)
			java.lang.Object copy(java.lang.Object)
		Not[-1].Not  <==  (Not[-1].merged100)
			de.mlhartme.mork.regexpr.Choice createNot(de.mlhartme.mork.regexpr.RegExpr)

[47]	Reference	::= Symbol
		Reference[-1].null  <==  (Symbol[0].null)
			java.lang.Object copy(java.lang.Object)
		Reference[-1].null  <==  (Symbol[0].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[0].null  <==  (Reference[-1].null)
			java.lang.Object copy(java.lang.Object)
		Symbol[0].null  <==  (Reference[-1].null)
			java.lang.Object copy(java.lang.Object)
		Reference[-1].merged105  <==  (Symbol[0].merged104)
			java.lang.Object copy(java.lang.Object)
		Reference[-1].Reference  <==  (Reference[-1].merged105)
			de.mlhartme.mork.regexpr.Symbol de.mlhartme.mork.regexpr.Symbol(java.lang.Integer)

[48]	Range	::= Atom ".." Atom
		Range[-1].merged109  <==  (Atom[0].merged108)
			java.lang.Object copy(java.lang.Object)
		Range[-1].merged113  <==  (Atom[2].merged112)
			java.lang.Object copy(java.lang.Object)
		Range[-1].Range  <==  (Range[-1].merged109, Range[-1].merged113)
			de.mlhartme.mork.regexpr.Range range(java.lang.Character, java.lang.Character)

[49]	Range	::= Atom
		Range[-1].merged109  <==  (Atom[0].merged108)
			java.lang.Object copy(java.lang.Object)
		Range[-1].merged113  <==  ()
			java.lang.Object createOption()
		Range[-1].Range  <==  (Range[-1].merged109, Range[-1].merged113)
			de.mlhartme.mork.regexpr.Range range(java.lang.Character, java.lang.Character)

[50]	Atom	::= Code
		Atom[-1].merged108  <==  (Code[0].Code)
			java.lang.Object copy(java.lang.Object)
		Atom[-1].merged112  <==  (Code[0].Code)
			java.lang.Object copy(java.lang.Object)

[51]	Atom	::= CharacterLiteral
		Atom[-1].merged108  <==  (CharacterLiteral[0].CharacterLiteral)
			java.lang.Object copy(java.lang.Object)
		Atom[-1].merged112  <==  (CharacterLiteral[0].CharacterLiteral)
			java.lang.Object copy(java.lang.Object)
		CharacterLiteral[0].CharacterLiteral  <==  (CharacterLiteral[0].null)
			char parseChar(java.lang.String)

[52]	Code	::= IntegerLiteral
		Code[-1].merged115  <==  (IntegerLiteral[0].IntegerLiteral)
			java.lang.Object copy(java.lang.Object)
		Code[-1].Code  <==  (Code[-1].merged115)
			char toChar(java.lang.Integer)
		IntegerLiteral[0].IntegerLiteral  <==  (IntegerLiteral[0].null)
			java.lang.Integer decode(java.lang.String)



Visit sequences
prod 0: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)8$-1(3$0, 5$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)7$-1(2$0, 4$1) de.mlhartme.mork.util.StringArrayList symbolTable0Tojava.lang.StringArray1Tojava.lang.StringArray(java.util.List, java.util.List)1$-1(7$-1, 8$-1) java.lang.Object copy(java.lang.Object)7$1(1$-1) java.lang.Object copy(java.lang.Object)5$0(1$-1) java.lang.Object copy(java.lang.Object)4$0(1$-1) java.lang.Object copy(java.lang.Object)6$1(1$-1) 0:!0 1:!0 java.lang.Object copy(java.lang.Object)6$-1(3$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)2$-1(0$0, 0$1) java.lang.Object copy(java.lang.Object)4$-1(1$1) java.lang.Object copy(java.lang.Object)5$-1(2$1) java.lang.Object copy(java.lang.Object)3$-1(1$0) de.mlhartme.mork.compiler.GrammarSyntax grammarSyntax1Tode.mlhartme.mork.grammar.RuleArray4Tode.mlhartme.mork.grammar.RuleArray(de.mlhartme.mork.util.StringArrayList, java.util.List, java.lang.Boolean, de.mlhartme.mork.util.IntBitSet, java.util.List, java.util.List)0$-1(1$-1, 3$-1, 5$-1, 6$-1, 4$-1, 2$-1)
prod 1: java.lang.Object copy(java.lang.Object)2$-1(3$3) java.lang.Object copy(java.lang.Object)3$-1(4$3) 65535:^ java.lang.Object copy(java.lang.Object)5$3(4$-1) java.lang.Object copy(java.lang.Object)6$3(5$-1) 3:!0 java.lang.Object copy(java.lang.Object)0$-1(0$3) java.lang.Object copy(java.lang.Object)1$-1(1$3)
prod 2: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)4$-1(2$4, 3$5) java.lang.Object copy(java.lang.Object)5$-1(4$5) 65535:^ java.lang.Object copy(java.lang.Object)3$4(6$-1) java.lang.Object copy(java.lang.Object)4$4(7$-1) java.lang.Object copy(java.lang.Object)6$5(7$-1) java.lang.Object copy(java.lang.Object)5$5(6$-1) java.lang.Object copy(java.lang.Object)2$-1(0$3) 4:!0 5:!0 java.lang.Object copy(java.lang.Object)3$-1(1$4) java.lang.Object copy(java.lang.Object)1$-1(2$5) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$4, 0$5)
prod 3: java.lang.Object createSequence()5$-1() java.lang.Object copy(java.lang.Object)4$-1(2$4) 65535:^ java.lang.Object copy(java.lang.Object)3$4(6$-1) java.lang.Object copy(java.lang.Object)2$-1(0$3) java.lang.Object copy(java.lang.Object)4$4(7$-1) java.lang.Object createSequence()1$-1() 4:!0 java.lang.Object copy(java.lang.Object)3$-1(1$4) java.lang.Object copy(java.lang.Object)0$-1(0$4)
prod 4: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)3$-1(3$0, 2$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)4$-1(4$0, 3$1) 65535:^ java.lang.Object copy(java.lang.Object)4$1(5$-1) java.lang.Object copy(java.lang.Object)5$0(5$-1) java.lang.Object copy(java.lang.Object)5$1(6$-1) java.lang.Object copy(java.lang.Object)6$0(6$-1) 0:!0 1:!0 java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)1$-1(1$0, 1$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$1) java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)2$-1(2$0, 1$1)
prod 5: java.lang.Object copy(java.lang.Object)4$-1(3$0) java.lang.Object copy(java.lang.Object)3$-1(2$0) 65535:^ java.lang.Object copy(java.lang.Object)5$0(6$-1) java.lang.Object copy(java.lang.Object)4$0(5$-1) 0:!0 java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object createSequenceValue(java.lang.Object)1$-1(1$0) java.lang.Object createSequenceValue(java.lang.Object)2$-1(1$0)
prod 6: java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 7: java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 8: java.lang.Boolean TRUE()0$-1()
prod 9: java.lang.Boolean FALSE()0$-1()
prod 10: java.lang.Object copy(java.lang.Object)2$-1(2$2) 65535:^ java.lang.Object copy(java.lang.Object)5$2(4$-1) java.lang.Object copy(java.lang.Object)4$2(3$-1) 2:!0 java.lang.Object copy(java.lang.Object)1$-1(1$2) java.lang.Object copy(java.lang.Object)0$-1(0$2)
prod 11: java.lang.Object createSequence()2$-1() 65535:^ java.lang.Object createOption()1$-1() java.lang.Object createSequence()0$-1()
prod 12: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)2$-1(1$0, 1$1) 65535:^ java.lang.Object copy(java.lang.Object)3$1(4$-1) java.lang.Object copy(java.lang.Object)4$1(5$-1) java.lang.Object copy(java.lang.Object)5$0(5$-1) java.lang.Object copy(java.lang.Object)4$0(4$-1) 0:!0 1:!0 java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)3$-1(3$0, 2$1) de.mlhartme.mork.util.IntBitSet symbolSet0TointArray(java.util.List)1$-1(3$-1)
prod 13: java.lang.Object copy(java.lang.Object)2$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)5$0(5$-1) java.lang.Object copy(java.lang.Object)4$0(4$-1) 0:!0 java.lang.Object copy(java.lang.Object)3$-1(3$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) de.mlhartme.mork.util.IntBitSet symbolSet0TointArray(java.util.List)1$-1(3$-1)
prod 14: java.lang.Object createSequence()2$-1() 65535:^ java.lang.Object createSequence()3$-1() java.lang.Object createSequence()0$-1() de.mlhartme.mork.util.IntBitSet symbolSet0TointArray(java.util.List)1$-1(3$-1)
prod 15: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)1$-1(1$0, 1$2) 65535:^ java.lang.Object copy(java.lang.Object)4$2(3$-1) java.lang.Object copy(java.lang.Object)4$0(4$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)5$2(4$-1) 0:!0 2:!0 java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$2) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)2$-1(2$0, 3$2)
prod 16: java.lang.Object copy(java.lang.Object)1$-1(1$1) 65535:^ java.lang.Object copy(java.lang.Object)5$1(4$-1) java.lang.Object copy(java.lang.Object)4$1(3$-1) 1:!0 java.lang.Object copy(java.lang.Object)0$-1(0$1) java.lang.Object copy(java.lang.Object)2$-1(3$1)
prod 17: java.lang.Object createSequence()1$-1() java.lang.Object copy(java.lang.Object)2$-1(0$0) 65535:^ java.lang.Object createSequence()0$-1() java.lang.Object copy(java.lang.Object)2$0(5$-1) 0:!0 java.lang.Object copy(java.lang.Object)7$-1(1$0) java.lang.Object createSequenceValue(java.lang.Object)3$-1(1$0) java.lang.Object copy(java.lang.Object)6$-1(1$0)
prod 18: java.lang.Object createSequence()2$-1() java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)3$0(4$-1) 0:!0 java.lang.Object createSequenceValue(java.lang.Object)3$-1(2$0) java.lang.Object createSequenceValue(java.lang.Object)0$-1(0$0) java.lang.Object copy(java.lang.Object)7$-1(2$0) java.lang.Object copy(java.lang.Object)6$-1(2$0)
prod 19: java.lang.Object createSequenceValue(java.lang.Object)1$-1(0$0) 65535:^ java.lang.Object copy(java.lang.Object)5$-1(0$0) java.lang.Object copy(java.lang.Object)4$-1(0$0) int symbolRef(de.mlhartme.mork.util.StringArrayList, java.lang.String)2$-1(3$-1, 4$-1) [Ljava.lang.Object; keyword(java.lang.Integer, java.lang.String)0$-1(2$-1, 5$-1)
prod 20: java.lang.Object createSequenceValue(java.lang.Object)0$-1(0$0) 65535:^ java.lang.Object copy(java.lang.Object)3$-1(0$0) int symbolRef(de.mlhartme.mork.util.StringArrayList, java.lang.String)1$-1(2$-1, 3$-1)
prod 21: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)2$-1(1$0, 1$2) java.lang.Object copy(java.lang.Object)3$-1(2$0) 65535:^ java.lang.Object copy(java.lang.Object)3$2(5$-1) java.lang.Object copy(java.lang.Object)4$0(5$-1) java.lang.Object copy(java.lang.Object)2$2(4$-1) java.lang.Object copy(java.lang.Object)3$0(4$-1) 0:!0 2:!0 java.lang.Object copy(java.lang.Object)7$-1(4$2) java.lang.Object copy(java.lang.Object)6$-1(5$0) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$2) de.mlhartme.mork.grammar.Rule de.mlhartme.mork.grammar.Rule(java.lang.Integer, de.mlhartme.mork.regexpr.RegExpr)1$-1(6$-1, 7$-1)
prod 22: java.lang.Object copy(java.lang.Object)1$-1(1$0) java.lang.Object copy(java.lang.Object)2$-1(2$0) 65535:^ java.lang.Object copy(java.lang.Object)5$0(4$-1) java.lang.Object copy(java.lang.Object)4$0(3$-1) 0:!0 java.lang.Object copy(java.lang.Object)5$-1(6$0) java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 23: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) 0:!0 java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object createSequenceValue(java.lang.Object)5$-1(4$0) java.lang.Object copy(java.lang.Object)8$-1(4$0) java.lang.Object copy(java.lang.Object)6$-1(4$0) java.lang.Object copy(java.lang.Object)7$-1(4$0) java.lang.Object copy(java.lang.Object)4$-1(4$0) java.lang.Object copy(java.lang.Object)9$-1(4$0) java.lang.Object copy(java.lang.Object)11$-1(4$0) java.lang.Object copy(java.lang.Object)12$-1(4$0) java.lang.Object copy(java.lang.Object)10$-1(4$0)
prod 24: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object createOption()5$-1() 0:!0 java.lang.Object copy(java.lang.Object)6$-1(4$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) de.mlhartme.mork.regexpr.RegExpr createLeftOptional(de.mlhartme.mork.regexpr.RegExpr, de.mlhartme.mork.regexpr.RegExpr)4$-1(5$-1, 6$-1)
prod 25: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)1$-1(1$0, 1$2) 65535:^ java.lang.Object copy(java.lang.Object)3$2(3$-1) java.lang.Object copy(java.lang.Object)2$2(2$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 2:!0 java.lang.Object copy(java.lang.Object)6$-1(4$2) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$2) java.lang.Object copy(java.lang.Object)5$-1(4$0) de.mlhartme.mork.regexpr.RegExpr createLeftOptional(de.mlhartme.mork.regexpr.RegExpr, de.mlhartme.mork.regexpr.RegExpr)4$-1(5$-1, 6$-1)
prod 26: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 java.lang.Object copy(java.lang.Object)5$-1(4$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) de.mlhartme.mork.regexpr.Sequence de.mlhartme.mork.regexpr.Sequence0Tode.mlhartme.mork.regexpr.RegExprArray(java.util.List)4$-1(5$-1)
prod 27: java.lang.Object createSequence()1$-1() 65535:^ java.lang.Object createSequence()0$-1() java.lang.Object createSequence()5$-1() de.mlhartme.mork.regexpr.Sequence de.mlhartme.mork.regexpr.Sequence0Tode.mlhartme.mork.regexpr.RegExprArray(java.util.List)4$-1(5$-1)
prod 28: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)1$-1(1$0, 1$1) 65535:^ java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$1(3$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)2$1(2$-1) 0:!0 1:!0 java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$1) java.lang.Object sequenceAndValue0copy(java.lang.Object, java.lang.Object)4$-1(4$0, 4$1)
prod 29: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)1$-1(1$0, 1$1) 65535:^ java.lang.Object copy(java.lang.Object)3$1(3$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)2$1(2$-1) 0:!0 1:!0 java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$1) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)4$-1(4$0, 4$1)
prod 30: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object createSequenceValue(java.lang.Object)4$-1(4$0)
prod 31: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) 0:!0 java.lang.Object copy(java.lang.Object)4$-1(4$0) java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 32: java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)1$-1(1$0, 1$2) 65535:^ java.lang.Object copy(java.lang.Object)3$2(3$-1) java.lang.Object copy(java.lang.Object)2$2(2$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 2:!0 java.lang.Object copy(java.lang.Object)6$-1(6$2) java.lang.Object sequenceAndSequence0copy(java.lang.Object, java.lang.Object)0$-1(0$0, 0$2) java.lang.Object copy(java.lang.Object)5$-1(5$0) de.mlhartme.mork.regexpr.Without de.mlhartme.mork.regexpr.Without(de.mlhartme.mork.regexpr.RegExpr, de.mlhartme.mork.regexpr.RegExpr)4$-1(5$-1, 6$-1)
prod 33: java.lang.Object copy(java.lang.Object)1$-1(1$1) 65535:^ java.lang.Object copy(java.lang.Object)3$1(3$-1) java.lang.Object copy(java.lang.Object)2$1(2$-1) 1:!0 java.lang.Object copy(java.lang.Object)4$-1(5$1) java.lang.Object copy(java.lang.Object)9$-1(10$1) java.lang.Object copy(java.lang.Object)10$-1(11$1) java.lang.Object copy(java.lang.Object)0$-1(0$1) java.lang.Object copy(java.lang.Object)7$-1(8$1) java.lang.Object copy(java.lang.Object)5$-1(6$1) java.lang.Object copy(java.lang.Object)11$-1(12$1) java.lang.Object copy(java.lang.Object)6$-1(7$1) java.lang.Object copy(java.lang.Object)8$-1(9$1)
prod 34: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 java.lang.Object copy(java.lang.Object)6$-1(4$0) java.lang.Object copy(java.lang.Object)8$-1(4$0) java.lang.Object copy(java.lang.Object)5$-1(4$0) java.lang.Object copy(java.lang.Object)7$-1(4$0) java.lang.Object copy(java.lang.Object)9$-1(4$0) java.lang.Object copy(java.lang.Object)10$-1(4$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object createSequenceValue(java.lang.Object)4$-1(4$0) java.lang.Object copy(java.lang.Object)11$-1(4$0)
prod 35: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 java.lang.Object copy(java.lang.Object)9$-1(9$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object copy(java.lang.Object)8$-1(8$0) java.lang.Object copy(java.lang.Object)4$-1(4$0) java.lang.Object copy(java.lang.Object)6$-1(6$0) java.lang.Object copy(java.lang.Object)7$-1(7$0) java.lang.Object copy(java.lang.Object)11$-1(11$0) java.lang.Object copy(java.lang.Object)10$-1(10$0) java.lang.Object copy(java.lang.Object)5$-1(5$0)
prod 36: java.lang.Object createSequence()1$-1() 65535:^ java.lang.Object copy(java.lang.Object)5$-1(0$0) java.lang.Object copy(java.lang.Object)8$-1(0$0) java.lang.Object createSequenceValue(java.lang.Object)4$-1(0$0) java.lang.Object createSequence()0$-1() java.lang.Object copy(java.lang.Object)7$-1(0$0) java.lang.Object copy(java.lang.Object)11$-1(0$0) java.lang.Object copy(java.lang.Object)6$-1(0$0) java.lang.Object copy(java.lang.Object)10$-1(0$0) java.lang.Object copy(java.lang.Object)9$-1(0$0)
prod 37: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) 0:!0 java.lang.Object copy(java.lang.Object)8$-1(4$0) java.lang.Object copy(java.lang.Object)9$-1(4$0) java.lang.Object createSequenceValue(java.lang.Object)4$-1(4$0) java.lang.Object copy(java.lang.Object)7$-1(4$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object copy(java.lang.Object)11$-1(4$0) java.lang.Object copy(java.lang.Object)6$-1(4$0) java.lang.Object copy(java.lang.Object)10$-1(4$0) java.lang.Object copy(java.lang.Object)5$-1(4$0)
prod 38: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) 0:!0 java.lang.Object createSequenceValue(java.lang.Object)4$-1(4$0) java.lang.Object copy(java.lang.Object)5$-1(4$0) java.lang.Object copy(java.lang.Object)8$-1(4$0) java.lang.Object copy(java.lang.Object)7$-1(4$0) java.lang.Object copy(java.lang.Object)10$-1(4$0) java.lang.Object copy(java.lang.Object)11$-1(4$0) java.lang.Object copy(java.lang.Object)6$-1(4$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object copy(java.lang.Object)9$-1(4$0)
prod 39: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 java.lang.Object createSequenceValue(java.lang.Object)4$-1(4$0) java.lang.Object copy(java.lang.Object)5$-1(4$0) java.lang.Object copy(java.lang.Object)6$-1(4$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object copy(java.lang.Object)7$-1(4$0) java.lang.Object copy(java.lang.Object)11$-1(4$0) java.lang.Object copy(java.lang.Object)8$-1(4$0) java.lang.Object copy(java.lang.Object)9$-1(4$0) java.lang.Object copy(java.lang.Object)10$-1(4$0)
prod 40: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 java.lang.Object copy(java.lang.Object)6$-1(4$0) java.lang.Object copy(java.lang.Object)8$-1(4$0) java.lang.Object createSequenceValue(java.lang.Object)4$-1(4$0) java.lang.Object copy(java.lang.Object)7$-1(4$0) java.lang.Object copy(java.lang.Object)11$-1(4$0) java.lang.Object copy(java.lang.Object)10$-1(4$0) java.lang.Object copy(java.lang.Object)9$-1(4$0) java.lang.Object copy(java.lang.Object)5$-1(4$0) java.lang.Object copy(java.lang.Object)0$-1(0$0)
prod 41: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object copy(java.lang.Object)10$-1(4$0) java.lang.Object copy(java.lang.Object)6$-1(4$0) java.lang.Object copy(java.lang.Object)8$-1(4$0) java.lang.Object copy(java.lang.Object)7$-1(4$0) java.lang.Object createSequenceValue(java.lang.Object)4$-1(4$0) java.lang.Object copy(java.lang.Object)5$-1(4$0) java.lang.Object copy(java.lang.Object)9$-1(4$0) java.lang.Object copy(java.lang.Object)11$-1(4$0)
prod 42: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object copy(java.lang.Object)5$-1(7$0) de.mlhartme.mork.regexpr.RegExpr createStar(de.mlhartme.mork.regexpr.RegExpr)4$-1(5$-1)
prod 43: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) 0:!0 java.lang.Object copy(java.lang.Object)5$-1(8$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) de.mlhartme.mork.regexpr.Loop de.mlhartme.mork.regexpr.Loop(de.mlhartme.mork.regexpr.RegExpr)4$-1(5$-1)
prod 44: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) 0:!0 java.lang.Object copy(java.lang.Object)5$-1(9$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) de.mlhartme.mork.regexpr.Choice createOption(de.mlhartme.mork.regexpr.RegExpr)4$-1(5$-1)
prod 45: java.lang.Integer decode(java.lang.String)0$2(1$2) java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)6$-1(0$2) java.lang.Object copy(java.lang.Object)3$0(3$-1) java.lang.Object copy(java.lang.Object)2$0(2$-1) 0:!0 java.lang.Object copy(java.lang.Object)5$-1(10$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) de.mlhartme.mork.regexpr.Sequence createTimes(de.mlhartme.mork.regexpr.RegExpr, java.lang.Integer)4$-1(5$-1, 6$-1)
prod 46: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)2$0(2$-1) java.lang.Object copy(java.lang.Object)3$0(3$-1) 0:!0 java.lang.Object copy(java.lang.Object)5$-1(11$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) de.mlhartme.mork.regexpr.Choice createNot(de.mlhartme.mork.regexpr.RegExpr)4$-1(5$-1)
prod 47: java.lang.Object copy(java.lang.Object)1$-1(1$0) 65535:^ java.lang.Object copy(java.lang.Object)4$0(2$-1) java.lang.Object copy(java.lang.Object)5$0(3$-1) 0:!0 java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object copy(java.lang.Object)5$-1(7$0) de.mlhartme.mork.regexpr.Symbol de.mlhartme.mork.regexpr.Symbol(java.lang.Integer)4$-1(5$-1)
prod 48: java.lang.Object copy(java.lang.Object)1$-1(0$0) java.lang.Object copy(java.lang.Object)2$-1(1$2) de.mlhartme.mork.regexpr.Range range(java.lang.Character, java.lang.Character)0$-1(1$-1, 2$-1)
prod 49: java.lang.Object createOption()2$-1() java.lang.Object copy(java.lang.Object)1$-1(0$0) de.mlhartme.mork.regexpr.Range range(java.lang.Character, java.lang.Character)0$-1(1$-1, 2$-1)
prod 50: java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object copy(java.lang.Object)1$-1(0$0)
prod 51: char parseChar(java.lang.String)0$0(1$0) java.lang.Object copy(java.lang.Object)0$-1(0$0) java.lang.Object copy(java.lang.Object)1$-1(0$0)
prod 52: java.lang.Integer decode(java.lang.String)0$0(1$0) java.lang.Object copy(java.lang.Object)1$-1(0$0) char toChar(java.lang.Integer)0$-1(1$-1)
