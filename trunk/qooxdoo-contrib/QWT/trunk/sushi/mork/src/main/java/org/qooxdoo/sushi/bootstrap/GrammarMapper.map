# ************************************************************************
#   
#   qooxdoo - the new era of web development
#   
#   http://qooxdoo.org
#   
#   Copyright:
#     2006-2008 1&1 Internet AG, Germany, http://www.1and1.org
#   
#   License:
#     LGPL: http://www.gnu.org/licenses/lgpl.html
#     EPL: http://www.eclipse.org/org/documents/epl-v10.php
#     See the LICENSE file in the project's top-level directory for details.
#   
#   Authors:
#     * Michael Hartmeier (mlhartme)
#   
# ************************************************************************

mapper org.qooxdoo.sushi.bootstrap.GrammarMapper;

grm = "grammar.grm";

import org.qooxdoo.sushi.regexpr:
    Choice, Loop, Sequence, Symbol, Range, Without;
import org.qooxdoo.sushi.grammar:
    Rule;
import org.qooxdoo.sushi.compiler:
    GrammarSyntax, Stubs;
import org.qooxdoo.sushi.semantics:
    BuiltIn;
import java.lang:
    Boolean, Integer, String;


#
# overall structure
Grammar             => Stubs.grammarSyntax ;
 :grammarSymbolTable   => Stubs.symbolTable:
                         > Grammar
                         > //StringSymbol
                         > //IdentifierSymbol;
SymbolSet           => Stubs.symbolSet;
UsePriorities       => Boolean.TRUE;
NoPriorities        => Boolean.FALSE;

#
# symbols

StringSymbol        => Stubs.symbolRef:
                         > \\*
                         > Keyword ;
 :Keyword           => Stubs.keyword: > \\Grammar;
IdentifierSymbol    => Stubs.symbolRef;

#
# regular expressions

Rule                => Rule: >\\Parser\\Grammar > \\Scanner\\Grammar;  # TODO
Choice              => Choice.createLeftOptional;
Sequence            => Sequence;
Restriction         => Without;
Star                => Loop.createStar;
Plus                => Loop;
Option              => Choice.createOption;
Times               => Sequence.createTimes;
Not                 => Choice.createNot;
Reference           => Symbol;
Range               => Stubs.range;
Code                => Stubs.toChar;

#
# lexical elements

IntegerLiteral      => Integer.decode;
                    => [text] : > IntegerLiteral;
CharacterLiteral    => BuiltIn.parseChar;
                    => [text] : > CharacterLiteral;
StringLiteral       => [text] :
                         > \\Keyword > \\StringSymbol
                         > \\StringSymbol\\grammarSymbolTable;
Identifier          => [text]:
                         > \\*
                         > \\Subject\\grammarSymbolTable;
