# ยง{{header}}:
#
# This is file src/de/mlhartme/mork/bootstrap/MapperMapper.map,
# Mork version 0.6 Copyright (c) 1998-2002  Michael Hartmeier
# Mork is licensed under the terms of the GNU Lesser General Public License.
# It is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the file license.txt for details.
#
# ยง.

mapper de.mlhartme.mork.bootstrap.MapperMapper;

grm = "mapper.grm";

import de.mlhartme.mork.bootstrap:
    Stubs04;
import de.mlhartme.mork.mapping:
    Import, Internal, Library, Path;
import de.mlhartme.mork.compiler:
    GrammarSyntax, Specification, Stubs, Syntax;
import de.mlhartme.mork.semantics:
    BuiltIn;
import java.lang:
    Boolean, Integer, String;

#
# overall structure

Mapper              => Specification:
                         > //Implicit
                         > //ImplicitPath
                         > //LocalPath
                         > //NormalPath;
SyntaxFile          => (Syntax):
                         > \\Mapper
                         > Grammar
                         > SymbolTable;
  :Grammar          => Stubs.getIFGrammar:
                         > \\Mapper//Attribute;
  :SymbolTable      => Stubs.getIFSymbolTable:
                         > \\Mapper//Symbol
                         > \\Mapper//AttributeName
                         > \\Mapper//Attribute;
Grammar             => Stubs04.loadGrammar;
Dtd                 => Stubs04.loadDtd;
Imports             => Library:
                         > \\Mapper//ClassRef
                         > \\Mapper//MemberRef
                         > \\Mapper//Copy;
PackageName         => (String):
                         > \\Import//Class;
Class               => Import.create;
Name                => Stubs.name;

#
# constructors

ClassRef            => Library.lookupClass;
MemberRef           => Library.lookupMember;
Internal            => Internal;
Copy                => Stubs.copyFunctionRef;

#
# mapping

Symbol              => Stubs.symbolRef:
                         > \\Group//Attribute
                         > \\Group//AttributeName
                         > \\Group//LocalPath;
Attribute           => Stubs.createDefinition:
                         > \\Mapper
                         > //NormalPath
                         > //LocalPath
                         > //Implicit
                         > //ImplicitPath;
AttributeName       => Stubs.attributeName;

#
# paths

Implicit            => Stubs.implicitPath: ;
ImplicitPath        => Stubs.implicitPath: ;
LocalPath           => Stubs.localPath: ;
NormalPath          => Stubs.normalPath: ;
Step                => Stubs.step;
Downs               => Path.DOWNS;
Down                => Path.DOWN;
Ups                 => Path.UPS;
Up                  => Path.UP;

#
# lexical elements

StringLiteral       => [text];
Identifier          => [text];
