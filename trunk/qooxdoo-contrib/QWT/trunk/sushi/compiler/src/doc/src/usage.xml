<?xml version="1.0" encoding='ISO-8859-1'?>
<chapter>
<title>Usage</title>

<para>This chapter explains how to work with mapper objects in your applications. The first
section outlines the most important steps. This is followed by a kind method reference
of the mapper class. Finally, the last section describes the runtime environment required to
use a mapper. </para>

<sect1>
<title>Overview</title>

<para>Using a mapper in an application involves creation and running. Suppose the mapper
name was <literal>foo.Mapper</literal>. The following code fragment create a
<literal>foo.Mapper</literal> instance and runs it on the file <literal>xy</literal>.
</para>

<example>
<title>Mapper usage</title>
<programlisting>
import org.qooxdoo.sushi.mapping.Mapper;

Mapper mapper;
Object[] result;
int i;

mapper = new Mapper("foo.Mapper");
result = mapper.run("xy");
if (result != null) {
    System.out.println("success");
    for (i = 0; i &lt; result.length; i++) {
        System.out.println("\t" + result[i]);
    }
} else {
    System.out.println("error(s), aborted");
}
</programlisting>
</example>

<para>If the file <literal>xy</literal> is mapped without errors, the returned object array
is printed. Otherwise, <literal>run</literal> prints an error message and returns
<literal>null</literal>. Except for Java IO problems, all error messages include the
current source position.</para>

</sect1>

<sect1>
<title>The <literal>Mapper</literal> class</title>

<para>The class <literal>org.qooxdoo.sushi.mapping.Mapper</literal> forms the main API
used by applications. The following describes the most important constructors and methods.
This description is sufficient for normal use. See the API documentation for more details.
</para>

<formalpara>
<title><literal>Mapper</literal> vs. Generated classes</title>
<para>Note that <literal>Mapper</literal> is not a generated classes. How does this class know the
specific mapping? And what about the classes actually generated by Mork?
Simple - <literal>Mapper</literal> loads the generated classes. <literal>Mapper</literal>'s
purpose is to wrap the generated classes with a fancy API. And to reduce duplicated code since
major parts of the mapper code do not depend on the specific mapping. The generated classes
encapsulate the application-specific parts of the code, but the <literal>Mapper</literal>
class hides them from the application.</para></formalpara>

<formalpara>
<title>Advanced note</title>
<para>Note that the <literal>Mapper</literal> class solves a subtle circular dependency problem.
Suppose some class <literal>A</literal> in some application directly uses a class
<literal>G</literal> generated by running Mork on a mapper file <literal>M</literal>. To compile
<literal>A</literal>, <literal>G</literal> has to exist, and thus, <literal>M</literal> must have
been compiled. But run Mork on <literal>M</literal>, all Java classes <literal>C</literal> that
define constructors referenced from <literal>M</literal> must have been compiled. This is a
circular dependency if <literal>A</literal> defines constructors or if there is only a single
Java-compile step to compile all Java classes. The <literal>Mapper</literal> class works around
this problem by using Java reflection to refer to generated classes. As far as I know, there is no
performance drawback.</para></formalpara>

<formalpara>
<title>Threading</title>
<para>Mapper objects are not thread-safe. If your code uses multiple threads you have to
synchronize them to make sure that at most one thread at a time executes within a given mapper
object. </para></formalpara>

<sect2>
<title>Constructor</title>

<para>
<literal>Mapper(String name)</literal>
</para>

<para>Instantiates the mapper with the specified name. The <literal>name</literal> argument
specifies the mapper name as defined in the mapper file. You can create any number of mapper
objects, even instances with the same mapper name. However, most applications will use a single
mapper object since a given object may be run any number of times.</para>

<formalpara>
<title><literal>CLASSPATH</literal></title>
<para>The specified <literal>name</literal> is used to locate the mapper classes generated by
Mork. Class loading is performed using the class loader that loaded the <literal>Mapper</literal>
class. In most cases, this is the system class loader which searches the class along the
application's <literal>CLASSPATH</literal>. As a result, the same rules for setting the
<literal>CLASSPATH</literal> and placing class files apply to class files generated by Mork and
class files generated by the Java compiler.</para></formalpara>

<formalpara>
<title>Class loading</title>
<para>Generated classes a loaded on demand, they are not loaded unless actually used. In most
cases, they are loaded as part of one of the various <literal>run</literal> methods. The purpose
is to allow applications to instantiate all <literal>Mapper</literal> objects they might need
without wasting time to load classes not actually needed. Time for class loading is an issue
since generated classes might get quite large.</para></formalpara>

<formalpara>
<title><literal>IllegalStateException</literal></title>
<para>An <literal>IllegalStateException</literal> is thrown if the generated classes cannot be
loaded (e.g. because of an internal <literal>ClassNotFoundException</literal>). Usually, this
indicates a typo in the specified mapper name or a <literal>CLASSPATH</literal> problem. If you
get an <literal>IllegalStateException</literal>, check your <literal>CLASSPATH</literal> and make
sure that the mapper was compiled properly with the appropriate version of Mork. Note: an unchecked
exception is thrown because the caller is not expected to catch and recover from this problem. I
can see only good reason for catching the exceptions: to report an internal application error and
quit.</para></formalpara>

</sect2>

<sect2>
<title><literal>setErrorHander</literal></title>

<para><literal>setErrorHandler(de.mlhartme.mork.mapping.ErrorHandler)</literal></para>

<para>Defines the error handler used by <literal>run</literal> to report errors. The
<literal>ErrorHandler</literal> documentation below explains the various types of errors.
</para>

<formalpara>
<title>Default error handler</title>
<para>If <literal>setErrorHandler</literal> is not used to explicitly define an error handler,
<literal>run</literal> uses a default error handler. The default error handler prints all errors
to <literal>System.err</literal>. All error messages includes the position where the problem
occurred.  This behavior is sufficient for may applications. Especially if you start with a new
application, it is save to ignore <literal>setErrorHandler</literal> an rely on the default error
handler. </para></formalpara>

</sect2>

<sect2>
<title><literal>setEnvironment</literal></title>

<para><literal>setEnvironment(Object)</literal></para>

<para>Defines the mapper's environment object. Use <literal>YourSymbol : [env];</literal> to access
this object from your mapper file.</para>

</sect2>

<sect2>
<title><literal>run</literal></title>

<para><literal>run(Object context, Reader src)</literal></para>

<para>Runs the mapper on the specified stream. <literal>run</literal> performs syntactic analysis
(i.e. scanning and parsing) and mapping into Java objects. If <literal>run</literal> does not
detect errors, it returns the Java objects of the start symbol. The context argument specifies a
name for the reader, <literal>context.toString()</literal> is used to report error positions and
is typically a file name. The <literal>src</literal> argument is internally wrapped by a buffer,
the is no need to pass some kind of buffered reader.</para>

<formalpara>
<title>Error handling</title>
<para>If <literal>run</literal> detects an error (e.g. a syntax errors), this problem is
reported to the errors handler defined via <literal>setErrorHandler</literal>. After reporting
the error, <literal>run</literal> is terminated, returning <literal>null</literal> to the caller.
Note that the first errors terminates <literal>run</literal>, there is currently no way to recover,
mapping result in one error at most.</para></formalpara>

<formalpara>
<title>Advanced issues</title>
<para>(1) A mapper can be run more than once, it is not necessary to create a new mapper to run it
on a second stream. (2) Run is not thread-save, the caller has to make sure that only one thread
enters the method at a given time. </para></formalpara>

<formalpara>
<title>Unchecked exceptions</title>
<para><literal>run</literal> does not catch unchecked exceptions thrown in constructors. Thus,
any unchecked exception thrown by a constructor causes the Java virtual machine to terminate
<literal>run</literal> abruptly and propagates the exception o the caller. In my opinion,
unchecked exceptions should not be catched. Usually, there is no way for an application to recover
from an unchecked exception because it is either some virtual machine problem (e.g. out of memory)
or an internal error in the application. In both bases the application should be terminated.
</para></formalpara>

<formalpara>
<title>Cyclic dependencies</title>
<para><literal>run</literal> throws an unchecked exception <literal>CyclicDependencies</literal>
if the attribute grammar used internally has a cyclic dependency. This indicates a problem
with the mapper specification, not with the stream processed by the mapper. To correct this problem,
the underlying map file has to be fixed. <literal>CyclicDependencies</literal> is an
unchecked exception because the application has to be fixed, applications are not expected to
recover from this problem.</para></formalpara>

</sect2>

<sect2>
<title><literal>run</literal></title>

<para><literal>public Object[] run(String fileName)</literal></para>

<para>Convenience method to map files. Opens <literal>fileName</literal> as a
<literal>FileReader</literal> and invokes <literal>run(Object context, Reader src)</literal>,
passing <literal>fileName</literal> and the <literal>FileReader</literal> object as argument.
As usual, a relative <literal>fileName</literal> is interpreted relative to the current working
directory. The <literal>FileReader</literal> object will always be closed when returning from the
method, even if the mapper throws an unchecked exception. </para>

</sect2>

</sect1>

<sect1>
<title>The <literal>ErrorHandler</literal> interface</title>

<para><literal>de.mlhartme.mork.mapping.ErrorHandler</literal></para>

<para>Error handling is work in progress. If you have a choice, please rely on the
default error handling. Avoid implementing you own error handler since the interface
is expected to change. Similarly, this documentation is preliminary. It concentrates
on the various error types (which I consider more stables), it does not explain individual
methods of the interface. If you have to implement an error handler, the source code of
<literal>de.mlhartme.mork.mapping.PrintStreamErrorHandler</literal> might provide
some help.</para>

<formalpara>
<title>Exceptions</title>
<para><literal>ErrorHandler</literal> distinguishes various error types, where each type of error
reported by a different exception. Different exceptions resemble the various modules involved in
mapping. Every module reports errors to the <literal>run</literal> method by throwing his individual
exception. <literal>run</literal> catches these exceptions and reports them to the registered error
handler. The following exceptions are distinguished:
<itemizedlist>
  <listitem><formalpara><title><literal>IOException</literal></title>
    <para>Indicates an IO problem in Java's IO classes. These classes feed characters to the
    scanner.</para></formalpara></listitem>
  <listitem><formalpara><title><literal>IllegalToken</literal></title>
    <para>Indicates a scanner problem, aka a lexical error.</para></formalpara></listitem>
  <listitem><formalpara><title><literal>SyntaxError</literal></title>
    <para>Indicates a parser problem, aka a syntax error.</para></formalpara></listitem>
  <listitem><formalpara><title><literal>SemanticError</literal></title>
    <para>Indicates a problem while mapping into Java objects, aka a semantic error.
    </para></formalpara></listitem>
</itemizedlist></para></formalpara>

<para>Note: The terms lexical error, syntax error and semantic error resemble compiler construction
terminology. These terms are kept even though they conflicts with Java terminology, where
errors usually indicate a problem in the virtual machine. Both <literal>SyntaxError</literal> and
<literal>SemanticError</literal> are derived from Java's <literal>java.lang.Exception</literal>
class.</para>

<formalpara>
<title>Position</title>
<para><literal>IllegalToken</literal>, <literal>SyntaxError</literal> and
<literal>SemanticError</literal> have a position field that stores the position in the input
stream where the problem occurred. The source code for <literal>PrintStreamErrorHandler</literal>
demonstrates how to use this field to report problems to the user.</para></formalpara>

<formalpara>
<title>Semantic errors</title>
<para>A <literal>SemanticError</literal> exception is thrown if a constructor invoked
by the mapper throws a checked exception. <literal>SemanticError</literal> has a field
with the original exception thrown by the constructor and the position of the symbol that
triggered the constructor. The term semantic error is compiler construction terminology.
A typical semantic error is an undefined identifier or a type mismatch. Constructors are
expected to check for semantic errors like undefined identifiers and throw a checked exception
to indicate problems. </para></formalpara>

</sect1>

<sect1>
<title>Deployment</title>

<para>As long as you applications on your development system, you can skip this section:
all Mork classes needed to run the application have been set up by installing Mork on
the development system. This section applies if you want to (manually or automatically)
deploy applications on a system where Mork is not installed.
</para>

<formalpara>
<title>Runtime environment</title>
<para>Two things have to be installed on a system to run an application: a Java runtime
environment, version 1.2 or higher, and the Mork classes in <literal>lib/mork.jar</literal>.
If the application is executed, Mork classes have to be available in its
<literal>CLASSPATH</literal>. This can be done by globally adding the jar file to the
<literal>CLASSPATH</literal> in some initialization script or by providing an application
launch script that defines the <literal>CLASSPATH</literal> for the application only.
</para></formalpara>

<formalpara>
<title>Optimizations</title>
<para><literal>lib/mork.jar</literal> includes quite a few classes that are need by Mork only,
their are not necessary to run applications. If you want to dig into re-compiling Mork, here
are some tips how to reduce the size of the jar file.
<itemizedlist>
  <listitem><para>Omit classes from the library that are not used by a
    mapper. Most notably, you don't need Mork's
    <literal>compiler</literal> and <literal>classfile</literal>
    packages. If possible, use a packaging tool to automatically remove
    classes/methods not needed by your application. </para></listitem>
  <listitem><para>Re-compile Mork without debug and line number information
     (<literal>javac</literal>: omit the -g option, add the -O option).</para></listitem>
  <listitem><para>Use a better compiler. For example, Jikes 0.53 produces
     significantly smaller class files than Blackdown JDK 1.2 pre 2 <literal>javac</literal>.
     </para></listitem>
</itemizedlist></para></formalpara>

</sect1>

</chapter>
