<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<property name="allElementsFile" value="${builder}/allElements.xml"/>
	
	<!-- The update site directory is the directory where the  plugins and features -->
	<!-- are located after they are unzipped in target assembleUpdateSite-->
	<property name="updateSiteDirectory" value="${buildDirectory}/I.feature/eclipse"/>

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>
	
	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<svn javahl="false">
			<export srcurl="${map}" revision="${revision}" destpath="${buildDirectory}/maps" force="true"/>
		</svn>
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<antcall target="assembleUpdateSite"/>
		<antcall target="removeOldUpdateSite"/>
		<antcall target="uploadUpdateSite"/>

		<!--
		<antcall target="test" />
		-->
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->

	<target name="assembleUpdateSite">
		<unzip src="${buildDirectory}/I.feature/org.qooxdoo.qxdt.feature-feature.zip"
		       dest="${buildDirectory}/I.feature/"/>
		<unzip src="${buildDirectory}/I.feature/org.eclipse.wst.jsdt.feature-feature.zip"
		       dest="${buildDirectory}/I.feature/"/>
		<antcall target="generateSiteXML"/>
		<antcall target="copyNewAndNoteworthy"/>
	</target>
	
	<target name="copyNewAndNoteworthy">
		<copy todir="${updateSiteDirectory}">
		    <fileset dir="${buildDirectory}/features/org.qooxdoo.qxdt.feature/publish"/>
		</copy>
	</target>
	
	
	<target name="generateSiteXML">
		<copy file="${buildDirectory}/features/org.qooxdoo.qxdt.feature/templates/site.xml" todir="${updateSiteDirectory}"/>
		
		<!-- Find the qxdt feature file -->
		<fileset dir="${updateSiteDirectory}/features" id="qooxdooJarId">
	        <include name="**/org.qooxdoo.qxdt.feature*.jar"/>
	    </fileset>
		<!-- -->
		<!-- Find the property of qooxdooJar by removing the path prefix -->
	    <pathconvert pathsep="${FILE_SEP}" property="qooxdooJar" refid="qooxdooJarId">
            <map from="${updateSiteDirectory}/features/" to=""/>
		</pathconvert>
		
		<!-- Find the property of qooxdooJarVersion by removing the filename prefix -->
		<pathconvert pathsep="${FILE_SEP}" property="qooxdooJarVersion" refid="qooxdooJarId">
                <map from="${updateSiteDirectory}/features/org.qooxdoo.qxdt.feature_" to=""/>
        </pathconvert>

		<!-- Find the jsdt feature file -->
		<fileset dir="${updateSiteDirectory}/features" id="jsdtJarId">
	        <include name="**/org.eclipse.wst.jsdt*.jar"/>
	    </fileset>
		<!-- Find the property of jsdtJar by removing the path prefix -->
	    <pathconvert pathsep="${FILE_SEP}" property="jsdtJar" refid="jsdtJarId">
            <map from="${updateSiteDirectory}/features/" to=""/>
		</pathconvert>
		<!-- Find the property of jsdtJarVersion by removing the filename prefix -->
		<pathconvert pathsep="${FILE_SEP}" property="jsdtJarVersion" refid="jsdtJarId">
                <map from="${updateSiteDirectory}/features/org.eclipse.wst.jsdt.feature_" to=""/>
        </pathconvert>
		
		<!-- Do the actual replacements in the site.xml -->
		<replace file="${updateSiteDirectory}/site.xml" token="QOOXDOO_VERSION" value="${qooxdooJarVersion}"/>
		<replace file="${updateSiteDirectory}/site.xml" token="JSDT_VERSION" value="${jsdtJarVersion}"/>
		<!-- The replacement workaround with pathconvert and map is not able to remove postfix ".jar" -->
		<replace file="${updateSiteDirectory}/site.xml" token=".jar" value=""/>

		<replace file="${updateSiteDirectory}/site.xml" token="QOOXDOO_JAR" value="${qooxdooJar}"/>
		<replace file="${updateSiteDirectory}/site.xml" token="JSDT_JAR" value="${jsdtJar}"/>
		<echo message="update site dir: ${updateSiteDirectory}"/>
	</target>
	
	<target name="uploadUpdateSite">
		<echo message="Uploading local directory ${updateSiteDirectory} to ${uploadLocation}"></echo>
		 <scp todir="${uploadLocation}" keyfile="${keyfile}" passphrase="${passphrase}" sftp="true" verbose="true">
		    <fileset dir="${updateSiteDirectory}"/>
		  </scp>
	</target>
	
    <target name="removeRemoteDirectoryContent">
            
    </target>

	<target name="removeOldUpdateSite">
		<echo message="Removing old update site on server using command 'rm ${uploadDirectory}/plugins/*.jar'"></echo>
		<sshexec host="${uploadHost}" 
			     username="${uploadUser}"
			     keyfile="${keyfile}"
			     passphrase="${passphrase}"
			     command="rm ${uploadDirectory}/plugins/*"/>
		<echo message="Removing old update site on server using command 'rm ${uploadDirectory}/features/*.jar'"></echo>
		<sshexec host="${uploadHost}" 
			     username="${uploadUser}"
			     keyfile="${keyfile}"
			     passphrase="${passphrase}"
			     command="rm ${uploadDirectory}/features/*"/>
	</target>
	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
		<property name="testDirectory" value="${buildDirectory}/tests"/>
		<!-- Extract Eclipse SDK + Test Framework + Test Feature -->
		<untar src="${user.home}/downloads/eclipse-SDK-3.3-linux-gtk.tar.gz"
		       dest="${testDirectory}"
		       compression="gzip"/>
		<unzip src="${user.home}/downloads/eclipse-test-framework-3.3.zip"
		       dest="${testDirectory}"/>
		<unzip src="${buildDirectory}/I.feature/com.yoxos.yim.test-feature.zip"
		       dest="${testDirectory}"/>
		<!-- Run Tests -->
		<ant antfile="${user.home}/yim.rcp/runtests.xml">
		  <property name="os"   value="linux"/>
		  <property name="ws"   value="gtk"/>
	      <property name="arch" value="x86"/>
		  <property name="reportDir" 
		  	        value="${buildDirectory}/I.feature/testreports"/>
		  <property name="test-workspace" value="${testDirectory}/workspace"/>
		  <property name="eclipse-home"   value="${testDirectory}/eclipse"/>
          <property name="extra-vmargs" 
				    value="-Declipse.pluginCustomization=${buildDirectory}/features/com.yoxos.yim.test/plugin_customization.ini"/>

		</ant>
		<!-- remove test Directory  -->
	    <!-- <delete dir="${testDirectory}" quiet="true"/-->
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
