/* ***
 
#asset(htmleditor/icon/*)
#asset(icon/${qx.icontheme}/16/apps/*)
 
*/

/**
 * Browses a remote filesystem for files, showing thumbnail previews (which are generated by the server)
 * and allows the user to select an image to return to the calling code
 */
qx.Class.define("htmleditor.FilePicker", {
	extend : qx.ui.window.Window,
	
	properties: {
		rootFolder: { 
			check: "htmleditor.IFolder",
			nullable: true,
			apply: "_applyRootFolder"
		},
		
		showFullSizeImages: {
			check: "Boolean",
			nullable: false,
			init: false,
			apply: "_applyFullSizeImages"
		}
	},
	
	events: {
		"openFile":		"qx.event.type.Data"
	},
	
	construct: function(rootFolder, caption, icon) {
		if (!caption)
			caption = "File Browser";
		this.base(arguments, caption, icon);
		this.setLayout(new qx.ui.layout.VBox(2));

		/*
		 * Create the toolbar
		 */
		var toolbar = new qx.ui.toolbar.ToolBar();
		this.add(toolbar, {flex: 0});
		
		this.__tbbParentFolder = new qx.ui.toolbar.Button("Parent Folder", "htmleditor/icon/16/htmleditor/file-picker/parent-folder.png");
		this.__tbbParentFolder.addListener("execute", function(e) {
			this.__currentFolder = this.__currentFolder.getParentFolder();
			this.refresh();
		}, this);
		toolbar.add(this.__tbbParentFolder);
		
		var btn = new qx.ui.toolbar.Button("Refresh", "htmleditor/icon/16/htmleditor/file-picker/refresh.png");
		btn.addListener("execute", function(e) {
			this.refresh();
		}, this);
		toolbar.add(btn);
		
		this.__tbbOpenFile = new qx.ui.toolbar.Button("Open File", "htmleditor/icon/16/htmleditor/file-picker/open-file.png");
		this.__tbbOpenFile.addListener("execute", function(e) {
			if (this.__currentItem)
				this.fireDataEvent("openFile", this.__currentItem.getFile());
		}, this);
		toolbar.add(this.__tbbOpenFile);
		
		/*
		 * Create the composite for listing files in
		 */
		this.__lister = new qx.ui.container.Composite(new flowlayout.FlowLayout(5));
		this.add(this.__lister, {flex: 1});
		
		if (rootFolder)
			this.setRootFolder(rootFolder);
	},
	
	members: {
		/** {Composite} the composite that file items are added to */
		__lister : undefined,
		
		/** {Button} toolbar button for "goto parent folder" */
		__tbbParentFolder : undefined,
		
		/** {Button} toolbar button for "open file" */
		__tbbOpenFile : undefined,
		
		/** {IFolder} The current folder */
		__currentFolder : undefined,
		
		/** {Array of Image} the pictures which are currently on display */
		__items : [],
		
		/** {FileItem} the currently selected item */
		__currentItem : undefined,
		
		/** {Boolean} whether we've been shown yet */
		__shown : false,
		
		/**
		 * Refreshes the display
		 */
		refresh: function() {
			if (!this.__shown)
				return;
			this.debug("Refreshing...");
			
			// Remove existing items
			for (var i = 0; i < this.__items.length; i++)
				this.__lister.remove(this.__items[i]);
			this.__items = [];
			
			// Check we have a "current" folder
			if (!this.__currentFolder)
				this.__currentFolder = this.getRootFolder();
				
			// Reset UI feedback
			this.__currentItem = undefined;
			this.__tbbOpenFile.setEnabled(false);
			this.__tbbParentFolder.setEnabled(this.__currentFolder != this.getRootFolder());
			
			// Get the files
			var files = this.__currentFolder && this.__currentFolder.listFiles();
			if (!files)
				this.add(new qx.ui.basic.Label("No files"));
			else {
				for (var i = 0; i < files.length; i++) {
					var file = files[i];
					
					// If it's not a folder then it must be an image
					if (!qx.Class.implementsInterface(file.constructor, htmleditor.IFolder)) {
						var ct = file.getContentType();
						if (!ct || ct.substr(0, 6) != "image/")
							continue;
					}
					
					// Create a new item
					var item = new htmleditor.FileItem(file, this.getShowFullSizeImages());
					item.addListener("select", this.__onSelectFile, this);
					item.addListener("open", this.__onOpenFile, this);
					
					// Save it
					this.__lister.add(item);
					this.__items[this.__items.length] = item;
				}
			}
		},
		
		/**
		 * Shows the window and triggers a refresh.
		 * @override
		 */
		show: function() {
			this.base(arguments);
			this.__shown = true;
			this.refresh();
		},
		
		/**
		 * Called when a file is single-clicked
		 */
		__onSelectFile: function(event) {
			var display = event.getCurrentTarget();
			if (this.__currentItem)
				this.__currentItem.setActive(false);
			this.__currentItem = display;
			display.setActive(true);
			this.__tbbOpenFile.setEnabled(true);
		},
		
		/**
		 * Called when a file is double-clicked
		 */
		__onOpenFile: function(event) {
			var file = event.getCurrentTarget().getFile();
			this.debug(file.getName());
			
			if (qx.Class.implementsInterface(file.constructor, htmleditor.IFolder)) {
				this.__currentFolder = file;
				this.refresh();
			} else
				this.fireDataEvent("openFile", file);
		},
		
		/**
		 * Called to set the rootFolder property
		 */
		_applyRootFolder: function(value, old) {
			if (value != old) {
				this.__currentFolder = value;
				this.refresh();
			}
		},
		
		/**
		 * Called to set the fullSizeImages property
		 */
		_applyFullSizeImages: function(value, old) {
			if (value != old) {
				this.refresh();
			}
		}
	}
});
