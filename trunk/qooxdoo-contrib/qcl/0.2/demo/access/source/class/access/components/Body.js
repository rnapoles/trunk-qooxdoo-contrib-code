/**
 * Generated by QxTransformer v.0.4. 
 * Author Christian Boulanger
 */

/*------------------------------------------------------------------------------

 ------------------------------------------------------------------------------*/
qx.Class.define("access.components.Body", {
	extend : qx.ui.container.Composite,

	construct : function() {
		this.base(arguments);
		this.__qxtCreateUI();
	},

	members : {
		__qxtCreateUI : function() {

			var qxVbox1 = new qx.ui.layout.VBox(null, null, null);

			var qxComposite1 = this;
			this.setLayout(qxVbox1)

			var qxHbox1 = new qx.ui.layout.HBox(10, null, null);

			var qxComposite2 = new qx.ui.container.Composite();
			qxComposite2.setLayout(qxHbox1)

			qxComposite1.add(qxComposite2);

			qxHbox1.setSpacing(10);

			var qxGroupBox1 = new qx.ui.groupbox.GroupBox("User Data", null);

			qxGroupBox1.setLegend("User Data");

			qxComposite2.add(qxGroupBox1, {
						flex : 1
					});

			var qxVbox2 = new qx.ui.layout.VBox(5, null, null);

			qxVbox2.setSpacing(5);

			qxGroupBox1.setLayout(qxVbox2);

			var qxLabel1 = new qx.ui.basic.Label(null);

			qxLabel1.setWidth(200);
			qxLabel1.setAllowStretchX(true);
			qxLabel1.setRich(true);

			qxLabel1
					.setValue("                                    <h4>Login data </h4>                   <ul>                    <li>User1: user1/user1</li>                    <li>User2: user2/user2</li>                    <li>Manager: user3/user3</li>                    <li>Administrator: admin/admin</li>                   </ul>                   <p>Click on \"Login\" to log in as one of these users.</p>                   <p>Also note that you can reload the page and still be logged in with                   the same user.</p>                                      <h4>Current user</h4>                                   ");

			qxGroupBox1.add(qxLabel1, {
						flex : 1
					});

			var qxGrid1 = new qx.ui.layout.Grid(null, null);

			var qxComposite3 = new qx.ui.container.Composite();
			qxComposite3.setLayout(qxGrid1)

			qxGroupBox1.add(qxComposite3);

			qxGrid1.setSpacing(5);

			qxGrid1.setColumnMinWidth(0, 100);
			qxGrid1.setColumnFlex(1, 2);

			var qxLabel2 = new qx.ui.basic.Label("Username:");

			qxLabel2.setValue("Username:");

			qxComposite3.add(qxLabel2, {
						row : 0,
						column : 0
					});

			var qxLabel3 = new qx.ui.basic.Label(null);

			qxComposite3.add(qxLabel3, {
						row : 0,
						column : 1
					});

			this.getApplication().bind(
					"accessManager.userManager.activeUser.username", qxLabel3,
					"value", {});

			var qxLabel4 = new qx.ui.basic.Label("Full name:");

			qxLabel4.setValue("Full name:");

			qxComposite3.add(qxLabel4, {
						row : 1,
						column : 0
					});

			var qxLabel5 = new qx.ui.basic.Label(null);

			qxComposite3.add(qxLabel5, {
						row : 1,
						column : 1
					});

			this.getApplication().bind(
					"accessManager.userManager.activeUser.fullname", qxLabel5,
					"value", {});

			var qxLabel6 = new qx.ui.basic.Label("Permissions:");

			qxLabel6.setValue("Permissions:");

			qxComposite3.add(qxLabel6, {
						row : 2,
						column : 0
					});

			var qxLabel7 = new qx.ui.basic.Label(null);

			qxLabel7.setRich(true);

			qxComposite3.add(qxLabel7, {
						row : 2,
						column : 1
					});

			this.getApplication().bind("accessManager.userManager.activeUser",
					qxLabel7, "value", {
						converter : function(activeUser) {
							return activeUser ? activeUser.getPermissionNames()
									.join('<br />') : ''
						}
					});

			var qxLabel8 = new qx.ui.basic.Label("Session id:");

			qxLabel8.setValue("Session id:");

			qxComposite3.add(qxLabel8, {
						row : 3,
						column : 0
					});

			var qxLabel9 = new qx.ui.basic.Label(null);

			qxComposite3.add(qxLabel9, {
						row : 3,
						column : 1
					});

			this.getApplication().bind("sessionManager.sessionId", qxLabel9,
					"value", {});

			var qxGroupBox2 = new qx.ui.groupbox.GroupBox(
					"Permission binding - with dialog demo (press the buttons)",
					null);

			qxGroupBox2
					.setLegend("Permission binding - with dialog demo (press the buttons)");

			qxComposite2.add(qxGroupBox2, {
						flex : 1
					});

			var qxVbox3 = new qx.ui.layout.VBox(5, null, null);

			qxVbox3.setSpacing(5);

			qxGroupBox2.setLayout(qxVbox3);

			var qxButton1 = new qx.ui.form.Button(
					"Permission 'viewRecord' (Anyone)", null, null);

			qxButton1.setLabel("Permission 'viewRecord' (Anyone)");

			qxGroupBox2.add(qxButton1);

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("viewRecord").bind("state",
							qxButton1, "enabled", {});

			qxButton1.addListener("execute", function(e) {

						dialog.alert("View record!");

					}, this);

			var qxButton2 = new qx.ui.form.Button(
					"Permission 'createRecord' (All authenticated)", null, null);

			qxButton2.setLabel("Permission 'createRecord' (All authenticated)");

			qxGroupBox2.add(qxButton2);

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("createRecord").bind(
							"state", qxButton2, "enabled", {});

			qxButton2.addListener("execute", function(e) {

						dialog.select("Select the type of record to create:", [
										{
											label : "Database record",
											value : "database"
										}, {
											label : "World record",
											value : "world"
										}, {
											label : "Pop record",
											value : "pop"
										}], function(result) {
									dialog.alert("You selected: '" + result
											+ "'");
								});

					}, this);

			var qxButton3 = new qx.ui.form.Button(
					"Permission 'manageConfig' (All authenticated))", null,
					null);

			qxButton3
					.setLabel("Permission 'manageConfig' (All authenticated))");

			qxGroupBox2.add(qxButton3);

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("createRecord").bind(
							"state", qxButton3, "enabled", {});

			qxButton3.addListener("execute", function(e) {

						dialog.alert("Nothing here!");

					}, this);

			var qxButton4 = new qx.ui.form.Button(
					"Permission 'deleteRecord' (Manager only)", null, null);

			qxButton4.setLabel("Permission 'deleteRecord' (Manager only)");

			qxGroupBox2.add(qxButton4);

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("deleteRecord").bind(
							"state", qxButton4, "enabled", {});

			qxButton4.addListener("execute", function(e) {

						dialog.confirm(
								"Do you really want to delete the record?",
								function(result) {
									dialog.alert(result
											? "Record will be deleted"
											: "Record won't be deleted");
								});

					}, this);

			var qxButton5 = new qx.ui.form.Button(
					"Permission 'manageUsers' (Admin only)", null, null);

			qxButton5.setLabel("Permission 'manageUsers' (Admin only)");

			qxGroupBox2.add(qxButton5);

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("manageUsers").bind("state",
							qxButton5, "enabled", {});

			qxButton5.addListener("execute", function(e) {

						dialog.alert("Manage Users!");

					}, this);

			var condition1CheckBox = new qx.ui.form.CheckBox("Condition 1");

			condition1CheckBox.setLabel("Condition 1");

			qxGroupBox2.add(condition1CheckBox);

			condition1CheckBox.addListener("changeValue", function(e) {
						var m = new qx.event.message.Message(
								"conditionsHaveChanged", e.getData ? e
										.getData() : []);
						m.setSender(e.getTarget());
						qx.event.message.Bus.getInstance().dispatch(m);
					}, this);

			var condition2CheckBox = new qx.ui.form.CheckBox("Condition 2");

			condition2CheckBox.setLabel("Condition 2");

			qxGroupBox2.add(condition2CheckBox);

			condition2CheckBox.addListener("changeValue", function(e) {
						var m = new qx.event.message.Message(
								"conditionsHaveChanged", e.getData ? e
										.getData() : []);
						m.setSender(e.getTarget());
						qx.event.message.Bus.getInstance().dispatch(m);
					}, this);

			var condition3CheckBox = new qx.ui.form.CheckBox("Condition 3");

			condition3CheckBox.setLabel("Condition 3");

			qxGroupBox2.add(condition3CheckBox);

			condition3CheckBox.addListener("changeValue", function(e) {
						var m = new qx.event.message.Message(
								"conditionsHaveChanged", e.getData ? e
										.getData() : []);
						m.setSender(e.getTarget());
						qx.event.message.Bus.getInstance().dispatch(m);
					}, this);

			var qclAccess1 = qcl.access.PermissionManager.getInstance();

			var qclPermission1 = qclAccess1.create("createRecordCondition1");
			qclPermission1.setGranted(true);

			var qclDependency1 = qcl.access.PermissionManager.getInstance()
					.create("createRecord");
			qclPermission1.addCondition(function() {
						return qclDependency1.getState();
					});
			qclDependency1.addListener("changeState", function() {
						qclPermission1.update();
					}, this);
			qx.event.message.Bus.subscribe("conditionsHaveChanged", function() {
						qclPermission1.update();
					}, this);
			qclPermission1.addCondition(function() {
						return condition1CheckBox.getValue() == true;
					}, this);

			var qclPermission2 = qclAccess1.create("createRecordCondition2");
			qclPermission2.setGranted(true);

			var qclDependency2 = qcl.access.PermissionManager.getInstance()
					.create("createRecordCondition1");
			qclPermission2.addCondition(function() {
						return qclDependency2.getState();
					});
			qclDependency2.addListener("changeState", function() {
						qclPermission2.update();
					}, this);
			qx.event.message.Bus.subscribe("conditionsHaveChanged", function() {
						qclPermission2.update();
					}, this);
			qclPermission2.addCondition(function() {
						return condition2CheckBox.getValue() == true;
					}, this);

			var qclPermission3 = qclAccess1.create("createRecordCondition3");
			qclPermission3.setGranted(true);

			var qclDependency3 = qcl.access.PermissionManager.getInstance()
					.create("createRecordCondition2");
			qclPermission3.addCondition(function() {
						return qclDependency3.getState();
					});
			qclDependency3.addListener("changeState", function() {
						qclPermission3.update();
					}, this);
			qx.event.message.Bus.subscribe("conditionsHaveChanged", function() {
						qclPermission3.update();
					}, this);
			qclPermission3.addCondition(function() {
						return condition3CheckBox.getValue() == true;
					}, this);

			var qxButton6 = new qx.ui.form.Button(
					"Permission 'createRecord' and condition 1", null, null);

			qxButton6.setLabel("Permission 'createRecord' and condition 1");

			qxGroupBox2.add(qxButton6);

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("createRecordCondition1")
					.bind("state", qxButton6, "enabled", {});

			var qxButton7 = new qx.ui.form.Button(
					"Permission 'createRecord' and condition 1,2", null, null);

			qxButton7.setLabel("Permission 'createRecord' and condition 1,2");

			qxGroupBox2.add(qxButton7);

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("createRecordCondition2")
					.bind("state", qxButton7, "enabled", {});

			var qxButton8 = new qx.ui.form.Button(
					"Permission 'createRecord' and condition 1,2,3", null, null);

			qxButton8.setLabel("Permission 'createRecord' and condition 1,2,3");

			qxGroupBox2.add(qxButton8);

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("createRecordCondition3")
					.bind("state", qxButton8, "enabled", {});

			var qxSpacer1 = new qx.ui.core.Spacer(null, null);

			qxGroupBox2.add(qxSpacer1);

			var qclAccess2 = qcl.access.PermissionManager.getInstance();

			var qclPermission4 = qclAccess2.create("qclServer");
			qclPermission4.setGranted(true);

			this.getApplication().addListener("changeServer", function() {
						qclPermission4.update();
					}, this);
			qclPermission4.addCondition(function() {
						return this.getApplication().getServer() == "qcl";
					}, this);

			var qxGroupBox3 = new qx.ui.groupbox.GroupBox("configuration", null);

			qxGroupBox3.setLegend("configuration");

			qxComposite2.add(qxGroupBox3, {
						flex : 1
					});

			var qxVbox4 = new qx.ui.layout.VBox(5, null, null);

			qxVbox4.setSpacing(5);

			qxGroupBox3.setLayout(qxVbox4);

			var qxLabel10 = new qx.ui.basic.Label(null);

			qxLabel10.setWidth(200);
			qxLabel10.setAllowStretchX(true);
			qxLabel10.setRich(true);

			qxLabel10
					.setValue("                                     <p>Users can change configuration values according to their permissions.                   Changes are sent to the server and persist through page reloads.</p>                   <p>If you use the qcl backend, configuration values can be configured to                   have user variants, i.e. all non-global values will be specifig to the                    current user.</p>                   <p>Only the 'intValue' key can be changed by the anonymous                   user. Reload the page to see that the values persist</p>                                   ");

			qxGroupBox3.add(qxLabel10, {
						flex : 1
					});

			var qxGrid2 = new qx.ui.layout.Grid(null, null);

			var qxComposite4 = new qx.ui.container.Composite();
			qxComposite4.setLayout(qxGrid2)

			qxGroupBox3.add(qxComposite4);

			qxGrid2.setSpacing(5);

			qxGrid2.setColumnMinWidth(0, 100);
			qxGrid2.setColumnFlex(1, 2);

			var qxLabel11 = new qx.ui.basic.Label("adminValue");

			qxLabel11.setValue("adminValue");

			qxComposite4.add(qxLabel11, {
						row : 0,
						column : 0
					});

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("manageUsers").bind("state",
							qxLabel11, "enabled", {});

			var qxTextField1 = new qx.ui.form.TextField(null);

			qxComposite4.add(qxTextField1, {
						row : 0,
						column : 1
					});

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("manageUsers").bind("state",
							qxTextField1, "enabled", {});

			qx.core.Init.getApplication().getConfigManager().addListener(
					"ready", function() {
						qx.core.Init.getApplication().getConfigManager()
								.bindKey("adminValue", qxTextField1, "value",
										true);
					});

			var qxLabel12 = new qx.ui.basic.Label("userValue");

			qxLabel12.setValue("userValue");

			qxComposite4.add(qxLabel12, {
						row : 1,
						column : 0
					});

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("manageConfig").bind(
							"state", qxLabel12, "enabled", {});

			var qxTextField2 = new qx.ui.form.TextField(null);

			qxComposite4.add(qxTextField2, {
						row : 1,
						column : 1
					});

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("manageConfig").bind(
							"state", qxTextField2, "enabled", {});

			qx.core.Init.getApplication().getConfigManager().addListener(
					"ready", function() {
						qx.core.Init.getApplication().getConfigManager()
								.bindKey("userValue", qxTextField2, "value",
										true);
					});

			var qxLabel13 = new qx.ui.basic.Label("boolValue");

			qxLabel13.setValue("boolValue");

			qxComposite4.add(qxLabel13, {
						row : 2,
						column : 0
					});

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("manageConfig").bind(
							"state", qxLabel13, "enabled", {});

			var qxCheckBox1 = new qx.ui.form.CheckBox(null);

			qxComposite4.add(qxCheckBox1, {
						row : 2,
						column : 1
					});

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("manageConfig").bind(
							"state", qxCheckBox1, "enabled", {});

			qx.core.Init.getApplication().getConfigManager().addListener(
					"ready", function() {
						qx.core.Init.getApplication().getConfigManager()
								.bindKey("boolValue", qxCheckBox1, "value",
										true);
					});

			var qxLabel14 = new qx.ui.basic.Label("intValue");

			qxLabel14.setValue("intValue");

			qxComposite4.add(qxLabel14, {
						row : 3,
						column : 0
					});

			qx.core.Init.getApplication().getAccessManager()
					.getPermissionManager().create("viewRecord").bind("state",
							qxLabel14, "enabled", {});

			var qxSlider1 = new qx.ui.form.Slider("horizontal");

			qxSlider1.setMinimum(0);
			qxSlider1.setOrientation("horizontal");
			qxSlider1.setMaximum(10);
			qxSlider1.setValue(0);

			qxComposite4.add(qxSlider1, {
						row : 3,
						column : 1
					});

			qx.core.Init.getApplication().getConfigManager().addListener(
					"ready", function() {
						qx.core.Init.getApplication().getConfigManager()
								.bindKey("intValue", qxSlider1, "value", true);
					});

		}

	}

});
