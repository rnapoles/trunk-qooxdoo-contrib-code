<?xml version="1.0" encoding="utf-8"?>
<qxt:include-definition
	xmlns:qx="http://www.qxtransformer.org/qooxdoo"
	xmlns:qxt="http://www.qxtransformer.org/extension">
					
	<!-- tree -->
	<qx:verticalBoxLayout width="100%" height="100%">
	<qx:virtualTree
		id="authConfigLeftTree" 
		left="0" top="0" width="100%" height="1*"
		backgroundColor="white" border="inset"
		selectionMode="multipleInterval"
		showCellFocusIndicator="false"
		statusBarVisible="false"
		alwaysShowOpenCloseSymbol="true"
		contextMenu="contextMenuAuthConfig"

		sortChildNodesBy="javascript:{'label':'asc'}"
		dragAction="javascript:['move','copy']"
		sortAfterDrop="true"
		allowDragOut="false"
		enableDragDrop="true"
		serviceName="application.security"
		dataBinding="true"
		serviceMethodUpdateClient="getUsersAndRoles">
   				
		<qx:virtualTreeColumn heading="Users/Roles" width="100%"/>

		<!-- SECURITY POLICIES -->
		
		<qx:security>
			
			<!-- general permission -->
			<qx:permission name="qcl.auth.permissions.manage" />
			
			<!-- permission to create new item -->
			<qx:permission name="qcl.auth.permissions.user.create">
				<qx:updater message="qcl.auth.messages.changeSelection" />
				<qx:condition><![CDATA[
					return (
						this.getApplication().getUserData("currentNodeType") == "qcl.auth.types.Role"
						&& this.getApplication().getUserData("currentTree") == this
					);
				]]></qx:condition>
			</qx:permission>

			<!-- permission to move item around, currently taken care of by allowDragStart -->
			<qx:permission name="qcl.auth.permissions.move" />

			<!-- permission to remove item from role -->
			<qx:permission 
				name="qcl.auth.permissions.item.remove"
				><qx:updater message="qcl.auth.messages.changeSelection" />
				<qx:condition>
					<![CDATA[
					// only allow delete if node is a user (left) or permission (right)
					return (
							this.getApplication().getUserData("currentNodeType") != "qcl.auth.types.Role"
					);
					]]>
				</qx:condition>				
				<qx:condition>
					<![CDATA[
					// only allow remove if node is exists more than once
					// this function might perform badly if there are lots of users
					var currentNode = this.getApplication().getUserData("currentNode");
					var currentTree = this.getApplication().getUserData("currentTree");
					if ( ! currentNode ) return false;
					var nodeNamedId	= currentNode.data.namedId; 
					var data 				= currentTree.getDataModel().getData();
					var foundSame 	= 0;
					data.forEach(function(node){
						if ( node && node.data && node.data.namedId == nodeNamedId )
						{
							foundSame++;
						}
					});
					return ( foundSame > 1 );
					]]>
				</qx:condition>
			</qx:permission>

			<!-- permission to delete item -->
			<qx:permission 
				name="qcl.auth.permissions.item.delete"
				><qx:updater message="qcl.auth.messages.changeSelection" />
				<qx:condition>
					<![CDATA[
					// only allow delete if node is a user (left) or in the right tree (additional condition is added there)
					return (
							this.getApplication().getUserData("currentNodeType") == "qcl.auth.types.User"
							|| ( this.getApplication().getUserData("currentTree") != this )
					);
					]]>
				</qx:condition>
				<qx:condition>
					<![CDATA[
					// only allow delete if node has no children
					var node = this.getApplication().getUserData("currentNode"); 
					if ( ! node ) return false;
					switch ( node.type )
					{
						case qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF:
							return true;
						case qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH:
							return (node.children.length == 0);
						default:
							return false;
					}					
					]]>
				</qx:condition>						
			</qx:permission>
			
			<!-- permission to edit item -->
			<qx:permission 
				name="qcl.auth.permissions.item.edit"
				><qx:updater message="qcl.auth.messages.changeSelection" />
				<qx:condition>
					<![CDATA[
					return (
							// only allow delete if node is a user (left) or in the right tree (additional condition is added there)
							this.getApplication().getUserData("currentNodeType") == "qcl.auth.types.User"
							|| ( this.getApplication().getUserData("currentTree") != this )											
					);
					]]>
				</qx:condition>		
			</qx:permission>
			
		</qx:security>
			
		<!-- EVENTS & MESSAGES -->	

		<!-- messages triggering a (re)load -->
		<qx:messageSubscriber filter="qcl.auth.messages.reload" delegate="authorization_widget_left_00_on_qcl_auth_messages_reload" />		
		<!-- focus -->
		<qx:eventListener type="focus"  delegate="authorization_widget_left_01_on_focus" />		
		<!-- change selection event -->
		
		<qx:eventListener type="changeSelection"  delegate="authorization_widget_left_02_on_changeSelection" />
		<!-- clear selection when clicked in other tree -->

		<qx:messageSubscriber filter="qcl.auth.messages.changeSelection">
			if (this.getApplication().getUserData("currentTree") != this) 
			{ 
				this.getSelectionModel().clearSelection();
			}
		</qx:messageSubscriber>

		<!-- drag & drop -->
		
		<qxt:script>
			<![CDATA[
			// additional supportsDrop check (hooks into MDragAndDropSupport)
			// to prevent to drop on parents that already contain a reference/copy of itself
			
			authConfigLeftTree.supportsDropCallback = function(dragCache)
			{
				// prevent a drop during a "copy" drag session if there is already a copy
				var handler      	= qx.event.handler.DragAndDropHandler.getInstance();
        var action 		 		= handler.getCurrentAction();
        var sourceData   	= handler.getData(this.getDragDataMimeType());
        var sourceNode		= sourceData.nodeData[0];
				var sourceNamedId	= sourceNode.data.namedId;
				var targetNode 		= this.getDropTarget();
				var nodeType	 		= this.getNodeType(targetNode);
				
				if ( nodeType == "qcl.auth.types.Role" )
				{
					var foundSame = false;
					targetNode.children.forEach(function(childNodeId){
						targetNamedId = this.nodeGet(childNodeId).data.namedId;
						if ( targetNamedId == sourceNamedId )
						{
							foundSame = true;
						}
					},this);
					return ! foundSame;
				}
				return true;
			}
			]]>
		</qxt:script>
		
		<qx:eventListener type="dragdrop" delegate="authorization_widget_left_03_on_dragdrop" />	
		
		<!-- message returning from server when user has moved / copied a node -->
		
		<qx:messageSubscriber filter="qcl.auth.messages.user.roleAdded" delegate="authorization_widget_left_04_on_qcl_auth_messages_user_roleAdded" />		
		<!-- create a new user -->
		
		<qx:messageSubscriber filter="qcl.auth.commands.user.create" delegate="authorization_widget_left_05_on_qcl_auth_commands_user_create" />		
		<qx:messageSubscriber filter="qcl.auth.messages.user.created">
			// todo: create only subnode			
			this.getDataModel().clearData(); this.updateClient();
		</qx:messageSubscriber>
				
		<!-- delete an item -->
		
		<qx:messageSubscriber filter="qcl.auth.commands.item.delete" delegate="authorization_widget_left_06_on_qcl_auth_commands_item_delete" />		
		<qx:messageSubscriber filter="qcl.auth.messages.user.deleted">
			this.getDataModel().clearData(); this.updateClient();
		</qx:messageSubscriber>
		
		<!-- remove an item from a role -->
		
		<qx:messageSubscriber filter="qcl.auth.commands.item.remove" delegate="authorization_widget_left_07_on_qcl_auth_commands_item_remove" />		
		<qx:messageSubscriber filter="qcl.auth.messages.user.roleRemoved" delegate="authorization_widget_left_08_on_qcl_auth_messages_user_roleRemoved" />				
	</qx:virtualTree>	
	</qx:verticalBoxLayout>
</qxt:include-definition>