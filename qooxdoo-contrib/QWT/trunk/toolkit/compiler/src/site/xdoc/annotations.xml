<document>
  <properties>
    <title>Qwt Compiler</title>
  </properties>
  <body>
    <section name="Annotations">
	  <p>The compiler support Java 1.5, the language is not changed. All features need for JavaScript
	    are realized with annotations. The following lists available annotations an where they are
	    applied. CAUTION: all annoatations are currently JavaDoc tags, not Java 1.5 annotations ...
	  </p>
	</section>
    <section name="Native">
      <p>Syntax: <code>"@native" code</code></p>
      <p>Applies to native methods or to classes.</p>
      <p>When applied to methods: inserts the specified JavaScript <code>code</code> as the 
      body of the annotated method. When applied to methods: inserts the specified JavaScript <code>code</code>
      into the module head, adding pre dependencies to head and post dependencies to cinit.</p>
    </section>
    <section name="Alias">
      <p>Syntax: <code>"@alias"</code></p>
	  <p>Applies to native methods and normal fields. Cannot be applied to constructors. </p>
      <p>Indicates that this declaration is otherwise defined, the compiler won't generate any code.
        Use this annotation to access JavaScript features from Java. 
      </p>
	</section>
	<section name="Augment">
      <p>Syntax: <code>"@augment" function</code></p>
      <p>Applies to types with non-logic constructors. Non-logic means there's nothing but 
      constructor calls inside - which might be needed to satisfy the Java compiler; note that arguments 
	  won't be checked, although they should! Constructors in the augmenting class are kind of native 
	  methode. </p>
      <p>function: A constructor function that will be used as class function. 
		Take care to protect definitions in the augmented code by the appropriate aliasses in the
		  augmenting code. Augmented code is responsible for base class definitions, the compiler
		  doesn't pass the augmenting base class to <code>defineClass</code>. Constructors in the 
		  augmenting class may not have logic because the compiler doesn't generate code (this
		  behavior is similar to alias methods).</p>
    </section>
    <section name="Escaping">
      <p>Escape sequences supported by the above annotations:</p>
      <source>
$$  ->   $
$@  ->   @
$s  ->   *
$l  ->   &lt;
      </source>  
    </section>
  </body>
</document>

