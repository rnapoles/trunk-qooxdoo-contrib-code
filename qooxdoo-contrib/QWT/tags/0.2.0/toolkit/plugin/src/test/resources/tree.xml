<?xml version="1.0" encoding="utf-8"?>
<doctree hasWarning="true">
  <packages>
    <package packageName="qx" fullName="qx" name="qx" hasWarning="true">
      <packages>
        <package packageName="qx" fullName="qx.application" name="application">
          <classes>
            <class name="Basic" interfaces="qx.application.IApplication" superClass="qx.core.Target" fullName="qx.application.Basic" type="class" packageName="qx.application">
              <desc>
                <text>&lt;p&gt;Base class for all non &lt;span class="caps"&gt;GUI&lt;/span&gt; qooxdoo applications.&lt;/p&gt;

&lt;p&gt;The {@link #main} method will be called on the document.onload event,
{@link #close} on document.beforeunload and {@link #terminate} on document.unload.&lt;/p&gt;</text>
              </desc>
              <methods>
                <method name="close">
                  <desc>
                    <text>&lt;p&gt;Called in the document.beforeunload event of the browser. If the method
returns a string value, the user will be asked by the browser, whether
he really wants to leave the page. The return string will be displayed in
the message box.&lt;/p&gt;</text>
                  </desc>
                  <return defaultValue="null">
                    <desc>
                      <text>&lt;p&gt;message text on unloading the page&lt;/p&gt;</text>
                    </desc>
                    <types>
                      <entry type="String"/>
                    </types>
                  </return>
                </method>
                <method name="main">
                  <desc>
                    <text>&lt;p&gt;Called in the document.onload event of the browser. This method should
implement the setup code of the application.&lt;/p&gt;</text>
                  </desc>
                </method>
                <method name="terminate">
                  <desc>
                    <text>&lt;p&gt;Called in the document.onunload event of the browser. This method contains the last
code which is run inside the page and may contain cleanup code.&lt;/p&gt;</text>
                  </desc>
                </method>
              </methods>
            </class>
            <class name="Gui" interfaces="qx.application.IApplication" superClass="qx.core.Target" fullName="qx.application.Gui" type="class" packageName="qx.application">
              <desc>
                <text>&lt;p&gt;This is the base class for all &lt;span class="caps"&gt;GUI&lt;/span&gt; qooxdoo applications.&lt;/p&gt;

&lt;p&gt;All applications using qooxdoo widgets should be derived from
this class. Normally at least the {@link #main} method will
be overridden to define the &lt;span class="caps"&gt;GUI&lt;/span&gt;.&lt;/p&gt;</text>
              </desc>
              <methods>
                <method access="protected" name="_postload">
                  <desc>
                    <text>&lt;p&gt;Preload all remaining images.&lt;/p&gt;</text>
                  </desc>
                </method>
                <method access="protected" name="_postloaderDone">
                  <desc>
                    <text>&lt;p&gt;Callback which is called once the post loading is completed.&lt;/p&gt;</text>
                  </desc>
                </method>
                <method access="protected" name="_preload">
                  <desc>
                    <text>&lt;p&gt;Start pre loading of the initially visible images.&lt;/p&gt;</text>
                  </desc>
                </method>
                <method access="protected" name="_preloaderDone">
                  <desc>
                    <text>&lt;p&gt;Callback which is called once the pre loading of the required images
is completed.&lt;/p&gt;</text>
                  </desc>
                </method>
                <method name="close">
                  <desc>
                    <text>&lt;p&gt;Called in the document.onbeforeunload event of the browser. If the method
returns a string value, the user will be asked by the browser, whether
he really wants to leave the page. The return string will be displayed in
the message box.&lt;/p&gt;</text>
                  </desc>
                  <return defaultValue="null">
                    <desc>
                      <text>&lt;p&gt;message text on unloading the page&lt;/p&gt;</text>
                    </desc>
                    <types>
                      <entry type="String"/>
                    </types>
                  </return>
                </method>
                <method name="getUiReady" fromProperty="uiReady">
                  <desc>
                    <text>&lt;p&gt;Returns the (computed) value of the property &lt;code&gt;uiReady&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For further details take a look at the property definition: {@link #uiReady}.&lt;/p&gt;</text>
                  </desc>
                  <return>
                    <desc>
                      <text>&lt;p&gt;(Computed) value of &lt;code&gt;uiReady&lt;/code&gt;.&lt;/p&gt;</text>
                    </desc>
                    <types>
                      <entry type="var"/>
                    </types>
                  </return>
                </method>
                <method access="protected" name="initUiReady" fromProperty="uiReady">
                  <params>
                    <param name="value">
                      <desc>
                        <text>&lt;p&gt;Initial value for property &lt;code&gt;uiReady&lt;/code&gt;.&lt;/p&gt;</text>
                      </desc>
                      <types>
                        <entry type="var"/>
                      </types>
                    </param>
                  </params>
                  <desc>
                    <text>&lt;p&gt;Calls the apply method and dispatches the change event of the property &lt;code&gt;uiReady&lt;/code&gt;
with the default value defined by the class developer. This function can
only be called from the constructor of a class.&lt;/p&gt;

&lt;p&gt;For further details take a look at the property definition: {@link #uiReady}.&lt;/p&gt;</text>
                  </desc>
                  <return>
                    <desc>
                      <text>&lt;p&gt;the default value&lt;/p&gt;</text>
                    </desc>
                    <types>
                      <entry type="var"/>
                    </types>
                  </return>
                </method>
                <method name="isUiReady" fromProperty="uiReady">
                  <desc>
                    <text>&lt;p&gt;Check whether the (computed) value of the boolean property &lt;code&gt;uiReady&lt;/code&gt; equals &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For further details take a look at the property definition: {@link #uiReady}.&lt;/p&gt;</text>
                  </desc>
                  <return>
                    <desc>
                      <text>&lt;p&gt;Whether the property equals &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;</text>
                    </desc>
                    <types>
                      <entry type="Boolean"/>
                    </types>
                  </return>
                </method>
                <method name="main">
                  <desc>
                    <text>&lt;p&gt;Called in the document.onload event of the browser. This method should
be overridden to implement the &lt;span class="caps"&gt;GUI&lt;/span&gt; setup code of the application.&lt;/p&gt;</text>
                  </desc>
                </method>
                <method name="resetUiReady" fromProperty="uiReady">
                  <desc>
                    <text>&lt;p&gt;Resets the user value of the property &lt;code&gt;uiReady&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The computed value falls back to the next available value e.g. appearance, init or
inheritance value depeneding on the property configuration and value availability.&lt;/p&gt;

&lt;p&gt;For further details take a look at the property definition: {@link #uiReady}.&lt;/p&gt;</text>
                  </desc>
                  <return>
                    <types>
                      <entry type="void"/>
                    </types>
                  </return>
                </method>
                <method name="setUiReady" fromProperty="uiReady">
                  <params>
                    <param name="value">
                      <desc>
                        <text>&lt;p&gt;New value for property &lt;code&gt;uiReady&lt;/code&gt;.&lt;/p&gt;</text>
                      </desc>
                      <types>
                        <entry type="var"/>
                      </types>
                    </param>
                  </params>
                  <desc>
                    <text>&lt;p&gt;Sets the user value of the property &lt;code&gt;uiReady&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For further details take a look at the property definition: {@link #uiReady}.&lt;/p&gt;</text>
                  </desc>
                  <return>
                    <desc>
                      <text>&lt;p&gt;The unmodified incoming value.&lt;/p&gt;</text>
                    </desc>
                    <types>
                      <entry type="var"/>
                    </types>
                  </return>
                </method>
                <method name="terminate">
                  <desc>
                    <text>&lt;p&gt;Called in the document.onunload event of the browser. This method contains the last
code which is run inside the page and may contain cleanup code.&lt;/p&gt;</text>
                  </desc>
                </method>
                <method name="toggleUiReady" fromProperty="uiReady">
                  <desc>
                    <text>&lt;p&gt;Toggles the (computed) value of the boolean property &lt;code&gt;uiReady&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For further details take a look at the property definition: {@link #uiReady}.&lt;/p&gt;</text>
                  </desc>
                  <return>
                    <desc>
                      <text>&lt;p&gt;the new value&lt;/p&gt;</text>
                    </desc>
                    <types>
                      <entry type="Boolean"/>
                    </types>
                  </return>
                </method>
              </methods>
              <properties>
                <property defaultValue="false" propertyType="new" name="uiReady" check="Boolean">
                  <desc>
                    <text>&lt;p&gt;Whether the user interfacce has already been rendered&lt;/p&gt;</text>
                  </desc>
                </property>
              </properties>
            </class>
          </classes>
        </package>
      </packages>
    </package>
  </packages>
</doctree>
