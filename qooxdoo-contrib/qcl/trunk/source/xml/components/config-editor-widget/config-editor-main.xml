<?xml version="1.0" encoding="utf-8"?>
<qxt:include-definition
	xmlns:qx="http://www.qooxdoo.org"
	xmlns:qxt="http://www.qxtransformer.sourceforge.net/extension">
	
	<!-- about:config-like widget -->
	
	<!-- SECURITY POLICIES -->
	
	<!-- configuration editor context menu -->
	
	<!-- security policies -->
	<qx:security>
		<qx:permission name="qcl.config.permissions.manage"/>
		<qx:permission name="qcl.config.permissions.editor.createKey"/>
		<qx:permission name="qcl.config.permissions.editor.deleteKey"/>
		<qx:permission name="qcl.config.permissions.editor.editKey"/>
	</qx:security>
	
	<qx:menu id="contextMenuAuthConfig">
	
		<qx:menuButton text="New Key"
			enabled="false"
			enableOnPermission="qcl.config.permissions.editor.createKey">
			<qx:eventListener type="execute" dispatchMessage="qcl.config.commands.editor.createKey" />
		</qx:menuButton>

		<qx:menuButton text="Edit Key"
			enabled="false"
			enableOnPermission="qcl.config.permissions.editor.editKey">
			<qx:eventListener type="execute" dispatchMessage="qcl.config.commands.editor.editKey" />
		</qx:menuButton>

		<qx:menuButton text="Delete Key" 
			enabled="false" 
			enableOnPermission="qcl.config.permissions.editor.deleteKey">
			<qx:eventListener type="execute" dispatchMessage="qcl.config.commands.editor.deleteKey" />
		</qx:menuButton>
		
	</qx:menu>
		
	<qx:window 
		id="configEditorWindow" 
		width="500" height="400" 
		caption="Edit Configuration"
		showMinimize="false" showClose="true" 
		modal="false" onAppear="this.centerToBrowser()">
		
		<qx:messageSubscriber filter="qcl.config.commands.editor.show">
			this.show();
			qx.event.message.Bus.dispatch("qcl.config.messages.editor.reload","");
		</qx:messageSubscriber>
		
		<qx:messageSubscriber filter="qcl.auth.messages.logout">
			this.hide();
		</qx:messageSubscriber>		
		 
		<qx:verticalBoxLayout dimension="100%,100%">
		
		<!-- toolbar -->
		<qx:toolBar width="100%" height="30">
	
				<qx:toolBarButton 
					text="Reload" 
					icon="icon/22/actions/view-refresh.png" 
					tooltip="Reload the data">
					<qx:eventListener type="execute" dispatchMessage="qcl.config.messages.editor.reload"/>
				</qx:toolBarButton>

				<qx:toolBarButton 
					text="New Key"
					icon="icon/22/apps/system-users.png" 
					enabled="false"
					enableOnPermission="qcl.config.permissions.editor.createKey">
					<qx:eventListener type="execute" dispatchMessage="qcl.config.messages.editor.createKey"/>
				</qx:toolBarButton>
								
				<qx:toolBarButton 
					text="Delete"
					icon="icon/22/actions/edit-delete.png"
					enabled="false"
					enableOnPermission="qcl.config.permissions.editor.deleteKey">
					<qx:eventListener type="execute" dispatchMessage="qcl.config.messages.editor.deleteKey"/>
				</qx:toolBarButton>
				
				<qx:textField id="configEditorFilter" width="1*" top="3" liveUpdate="true">
					<qx:eventListener type="input">
						var typedText = event.getData();
						qx.client.Timer.once(function(){
							if ( this.getValue() == typedText )
							{
								qx.event.message.Bus.dispatch( "qcl.config.messages.editor.reload", typedText );
							}
						},this,500);
					</qx:eventListener>
				</qx:textField>
						
				
		</qx:toolBar>		
		
		<qxt:script>
			// cell editor for type column
			var configEditorTypeCellEditor = new qx.ui.table.celleditor.ComboBox;
			configEditorTypeCellEditor.setListData(["string","number","boolean"]);
			configEditorTypeCellEditor.setEditable(false);
		</qxt:script>

		<qxt:script>
			<![CDATA[
			// cell editor for value
			var configEditorValueCellEditor = new qx.ui.table.celleditor.Dynamic;
			configEditorValueCellEditor.setCellEditorFactoryFunction(function(cellInfo){
				var model = cellInfo.table.getTableModel();
				var type  = model.getValue(model.getColumnIndexById("type"),cellInfo.row);
				var value	= model.getValue(model.getColumnIndexById("value"),cellInfo.row);
				var cellEditor;
				switch( type )
				{
					case "number":
						cellEditor = new qx.ui.table.celleditor.TextField;
						cellEditor.setValidationFunction(function(value,oldValue){
							if ( isNaN(value) )
							{
								alert ( "Only numbers allowed" );
								return oldValue;
							}
							return value;
						});
						break;

					case "boolean":
						cellEditor = new qx.ui.table.celleditor.ComboBox;
						cellEditor.setListData(["true","false"]);
						cellEditor.setEditable(false);
						cellEditor.setValidationFunction(function(value,oldValue){
							if ( value == "true" )
							{
								return true; 
							}
							return false;
						});
						break;				
						
					default:
						if ( value.length > 10 )
						{
							// todo: insert window/textarea cell editor
							cellEditor = new qx.ui.table.celleditor.TextField;
						}
						else
						{
							cellEditor = new qx.ui.table.celleditor.TextField;
						}
	
				}
				return cellEditor;
			});
			]]>
		</qxt:script>

		<qxt:script>
			// cell editor for userId column
			var configEditorUserIdCellRenderer = new qx.ui.table.cellrenderer.Replace;
			configEditorUserIdCellRenderer.setReplaceMap({
				0 : "Default"
			});
		</qxt:script>
		
		<qx:table  
			id="configEditorTable"
			dimension="100%,1*"
			tableModel="simple"
			columnVisibilityButtonVisible="false"
			keepFirstVisibleRowComplete="true"
			statusBarVisible="false"
			border="inset-thin"
			dataBinding="true">
				
			<qx:tableColumn key="id"    label="ID"    display="false"/>
			<qx:tableColumn key="name"  label="Name"  width="100" />
			<qx:tableColumn key="type"  label="Type"  width="100" 
				editable="true" celleditor="configEditorTypeCellEditor" />
			<qx:tableColumn key="value" label="Value" width="100"
				editable="true" celleditor="configEditorValueCellEditor" />
			<qx:tableColumn key="permissionRead" label="Read Perm."  width="100"
				editable="true" />
			<qx:tableColumn key="permissionWrite" label="Write Perm." width="100"
				editable="true" />
			<qx:tableColumn key="userId" label="User/Status"  width="100" cellrenderer="configEditorUserIdCellRenderer"/>
			
			<!-- (re)load  -->
			
			<qx:messageSubscriber filter="qcl.config.messages.editor.reload">
				// get service prefix from application name
				var appClassName = qx.core.Init.getInstance().getApplication().classname;
				var appName			 = appClassName.substring(0,appClassName.indexOf("."));
				this.setUserData("servicePrefix",appName + ".");
			
				// (re)load data
				this.updateClient( appName + '.config.configManager.getAll', message.getData() || configEditorFilter.getValue() || "" );
			</qx:messageSubscriber>
			
			<!-- create new -->
			
			<qx:messageSubscriber filter="qcl.config.messages.editor.createKey">
				var name = prompt ( this.tr("Enter config key name") );
				if ( ! name ) return;
				this.__newConfigKey = { 
					'name' : name, 
					'type' : "string", 
					'value': "", 
					'permissionRead' : null,
					'permissionWrite' : null,
					'userId' : null
				};
				this.updateServer( this.getUserData("servicePrefix") + 'config.configManager.create', this.__newConfigKey );
			</qx:messageSubscriber>
			
			<qx:messageSubscriber filter="qcl.config.messages.key.created">
				var newRow = [message.getData()];
				for ( var i in this.__newConfigKey ) newRow.push( this.__newConfigKey[i] );
				this.getTableModel().addRows([newRow]);
				this.setFocusedCell(2,this.getTableModel().getRowCount()-1);
				this.startEditing();
			</qx:messageSubscriber>
			
			<!-- delete -->
			
			<qx:messageSubscriber filter="qcl.config.messages.editor.deleteKey">
				if ( ! confirm( this.tr( "Do you really want to completely delete the selected keys?" ) ) ) return;
				this.getSelectionModel().iterateSelection(function(index){
					var model = this.getTableModel();
					var name = model.getValue( model.getColumnIndexById( "name" ), index );
					this.updateServer( this.getUserData("servicePrefix") +  'config.configManager.delete', name );
					model.removeRows( index, 1 );
				},this);
			</qx:messageSubscriber>

			<!-- update metadata  -->
			
			<qx:eventListener type="dataChanged" qxt:modifier=".getTableModel()" >
				<![CDATA[
				// is there a data event?
				if ( ! ( event instanceof qx.event.type.DataEvent ) ) return;
				
				// get changed data
				var changedData = event.getData();
				
				// has only one cell has changed, i.e. edited, if not, it is a server update
				if ( changedData.firstRow != changedData.lastRow || 
						 changedData.firstColumn != changedData.lastColumn ) return;
						 
				// gather data to send		 
				var model 	= this.getTableModel();
				var id   		= model.getValue(0,changedData.firstRow);
				var key			= model.getColumnId(changedData.firstColumn);
				var value 	= model.getValue(changedData.firstColumn,changedData.firstRow);
				  
			  // send change to server							  
			  this.updateServer( this.getUserData("servicePrefix") + "config.configManager.update", id, key, value );
				]]>
			</qx:eventListener>
			
			<qx:messageSubscriber filter="qcl.config.messages.key.updated">
				//
			</qx:messageSubscriber>

		</qx:table>
		
		</qx:verticalBoxLayout>

	</qx:window>
	
</qxt:include-definition>