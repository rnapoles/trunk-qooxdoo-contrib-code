<?xml version="1.0" encoding="utf-8"?>
<qxt:include-definition
	xmlns:qx="http://www.qooxdoo.org"
	xmlns:qxt="http://www.qxtransformer.sourceforge.net/extension">
					
	<!-- tree -->
	<qx:virtualTree
		id="authConfigLeftTree" 
		left="0" top="0" width="245" height="100%"
		backgroundColor="white" border="inset"
		selectionMode="single"
		showCellFocusIndicator="false"
		alwaysShowOpenCloseSymbol="true"
		contextMenu="contextMenuAuthConfig"

		sortChildNodesBy="javascript:{'label':'asc'}"
		dragAction="javascript:['move','copy']"
		sortAfterDrop="true"
		allowDragOut="false"
		enableDragDrop="true"
		
		dataBinding="true"
		serviceMethodUpdateClient="getUsersAndRoles">
   				
		<qx:virtualTreeColumn heading="Users/Roles" width="10*" minWidth="200"/>

		<!-- SECURITY POLICIES -->
		
		<qx:security>
			
			<!-- general permission -->
			<qx:permission name="qcl.auth.permissions.manage" />
			
			<!-- permission to create new item -->
			<qx:permission name="qcl.auth.permissions.user.create"
				updateOnMessage="qcl.auth.messages.changeItem">
				<qx:condition><![CDATA[
					return (
						authConfigWindow.getUserData("currentNodeType") == "qcl.auth.types.Role"
						&& authConfigWindow.getUserData("currentTree") == this
					);
				]]></qx:condition>
			</qx:permission>

			<!-- permission to move item around, currently taken care of by allowDragStart -->
			<qx:permission name="qcl.auth.permissions.move" />

			<!-- permission to remove item from role -->
			<qx:permission 
				name="qcl.auth.permissions.item.remove"
				updateOnMessage="qcl.auth.messages.changeItem">
				<qx:condition>
					<![CDATA[
					// only allow delete if node is a user (left) or permission (right)
					return (
							authConfigWindow.getUserData("currentNodeType") != "qcl.auth.types.Role"
					);
					]]>
				</qx:condition>				
				<qx:condition>
					<![CDATA[
					// only allow remove if node is exists more than once
					// this function might perform badly if there are lots of users
					var currentNode = authConfigWindow.getUserData("currentNode");
					var currentTree = authConfigWindow.getUserData("currentTree");
					if ( ! currentNode ) return false;
					var nodeNamedId	= currentNode.data.namedId; 
					var data 				= currentTree.getDataModel().getData();
					var foundSame 	= 0;
					data.forEach(function(node){
						if ( node && node.data && node.data.namedId == nodeNamedId )
						{
							foundSame++;
						}
					});
					return ( foundSame > 1 );
					]]>
				</qx:condition>
			</qx:permission>

			<!-- permission to delete item -->
			<qx:permission 
				name="qcl.auth.permissions.item.delete"
				updateOnMessage="qcl.auth.messages.changeItem">
				<qx:condition>
					<![CDATA[
					// only allow delete if node is a user (left) or in the right tree (additional condition is added there)
					return (
							authConfigWindow.getUserData("currentNodeType") == "qcl.auth.types.User"
							|| ( authConfigWindow.getUserData("currentTree") != this )
					);
					]]>
				</qx:condition>
				<qx:condition>
					<![CDATA[
					// only allow delete if node has no children
					var node = authConfigWindow.getUserData("currentNode"); 
					if ( ! node ) return false;
					switch ( node.type )
					{
						case qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF:
							return true;
						case qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH:
							return (node.children.length == 0);
						default:
							return false;
					}					
					]]>
				</qx:condition>						
			</qx:permission>
			
			<!-- permission to edit item -->
			<qx:permission 
				name="qcl.auth.permissions.item.edit"
				updateOnMessage="qcl.auth.messages.changeItem">
				<qx:condition>
					<![CDATA[
					return (
							// only allow delete if node is a user (left) or in the right tree (additional condition is added there)
							authConfigWindow.getUserData("currentNodeType") == "qcl.auth.types.User"
							|| ( authConfigWindow.getUserData("currentTree") != this )											
					);
					]]>
				</qx:condition>		
			</qx:permission>
			
		</qx:security>
			
		<!-- EVENTS & MESSAGES -->	

		<!-- messages triggering a (re)load -->
		<qx:messageSubscriber filter="qcl.auth.messages.reload">
			// set service name from application name
			var appClassName = qx.core.Init.getInstance().getApplication().classname;
			var appName	= appClassName.substring(0,appClassName.indexOf("."));
			this.setUserData( "servicePrefix", appName + ".");
			this.setServiceName( appName + ".auth.authConfig");
			
			// (re)load tree
			this.getDataModel().clearData(); this.updateClient();
		</qx:messageSubscriber>
		
		<!-- focus -->
		<qx:eventListener type="focus" >
		
			// we are in focus
			authConfigWindow.setUserData("currentTree",this); 
			
			// set drag policy
			var user = qcl.auth.user.Manager.getInstance().getActiveUser();  
			if ( user.hasPermission("qcl.auth.permissions.manage") )
			{
				this.setAllowDragTypes(['qcl.auth.types.User']);
				this.setAllowDropTypes([['qcl.auth.types.User', 'qcl.auth.types.Role']]);
			}
			else
			{
				this.setAllowDragTypes(null);
				this.setAllowDropTypes(null);
			}
		</qx:eventListener>
		
		<!-- change selection event -->
		
		<qx:eventListener type="changeSelection" >
		
			var node = event.getData()[0];
			if ( ! node ) return;
			
			// determine and save node type
			var nodeType = this.getNodeType(node);  
			authConfigWindow.setUserData("currentNodeType",nodeType);

			// get service name from application name
			var appClassName = qx.core.Init.getInstance().getApplication().classname;
			var appName	= appClassName.substring(0,appClassName.indexOf("."));
						
			var item = null;
			switch (nodeType)
			{
				case "qcl.auth.types.User":
					item = {
						service : appName + ".auth.user",
						id			: node.data.id
					};
					break;			
			}
			
			authConfigWindow.setUserData("currentItem",item);
			authConfigWindow.setUserData("currentNode",node);
			node.data.sourceTree = this;
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeItem",item );
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeSelection",node );
			
		</qx:eventListener>

		<!-- clear selection when clicked in other tree -->

		<qx:messageSubscriber filter="qcl.auth.messages.changeSelection">
			if (authConfigWindow.getUserData("currentTree") != this) 
			{ 
				this.getSelectionModel().clearSelection();
			}
		</qx:messageSubscriber>

		<!-- drag & drop -->
		
		<qxt:script>
			// additional supportsDrop check (hooks into MDragAndDropSupport)
			// to prevent to drop on parents that already contain a reference/copy of itself
			
			authConfigLeftTree.supportsDropCallback = function(dragCache)
			{
				// prevent a drop during a "copy" drag session if there is already a copy
				var handler      	= qx.event.handler.DragAndDropHandler.getInstance();
        var action 		 		= handler.getCurrentAction();
        var sourceData   	= handler.getData(this.getDragDataMimeType());
        var sourceNode		= sourceData.nodeData[0];
				var sourceNamedId	= sourceNode.data.namedId;
				var targetNode 		= this.getDropTarget();
				var nodeType	 		= this.getNodeType(targetNode);
				
				if ( nodeType == "qcl.auth.types.Role" )
				{
					var foundSame = false;
					targetNode.children.forEach(function(childNodeId){
						targetNamedId = this.nodeGet(childNodeId).data.namedId;
						if ( targetNamedId == sourceNamedId )
						{
							foundSame = true;
						}
					},this);
					return ! foundSame;
				}
				return true;
			}
		</qxt:script>
		
		<qx:eventListener type="dragdrop">
			<![CDATA[
		
			var dropData 	 = this.getDropData(event);
			var action		 = event.getAction();
			var selection  = dropData.nodeData;
			var targetNode = dropData.targetNode;
			if ( this.getNodeType(targetNode) != "qcl.auth.types.Role" ) return;
			
			var targetNodeRoleId = parseInt(targetNode.data.id);
			
			selection.forEach(function(sourceNode){	
				var userId 					 	= sourceNode.data.id;
				var sourceNodeRoleId  = this.nodeGet(sourceNode.parentNodeId).data.id;
				if ( action == "move" )
				{
					this.updateServer( this.getUserData( "servicePrefix") + "auth.user.removeFromRole", userId, sourceNodeRoleId );
				}
				this.updateServer( this.getUserData( "servicePrefix") + "auth.user.addToRole", 			userId, targetNodeRoleId );
			}, this);
			
			this.setUserData("dropData",dropData);
		  ]]>					
		</qx:eventListener>	
	
		
		<!-- message returning from server when user has moved / copied a node -->
		
		<qx:messageSubscriber filter="qcl.auth.messages.user.roleAdded">
			<![CDATA[
			var dropData = this.getUserData("dropData");
			if (dropData && dropData.nodeData[0].data.id == message.getData() )
			{
			 this.moveNode(dropData);
			 this.setUserData("dropData",null);
			}
			]]>
		</qx:messageSubscriber>	
		
		<!-- create a new user -->
		
		<qx:messageSubscriber filter="qcl.auth.commands.user.create">
			var newName = prompt(this.tr("Please enter login name of new user"));
			if ( ! newName ) return;
			roleNode = authConfigWindow.getUserData("currentNode");
			if (this.getNodeType(roleNode) != "qcl.auth.types.Role" )
			{
				qx.event.message.Bus.dispatch("error-client", "Cannot create user - invalid parent node.");
				return;
			}
			this.updateServer( this.getUserData( "servicePrefix") + "auth.user.create", newName, roleNode.data.id );
		</qx:messageSubscriber>
		
		<qx:messageSubscriber filter="qcl.auth.messages.user.created">
			var id   = message.getData();
			var parentNodeId = authConfigWindow.getUserData("currentNode").data.id;
			var item = { id	: id, service : this.getUserData( "servicePrefix") + "auth.user"	};
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeItem",item );				
			this.getDataModel().clearData(); this.updateClient();
		</qx:messageSubscriber>
				
		<!-- delete an item -->
		
		<qx:messageSubscriber filter="qcl.auth.commands.item.delete">
			<![CDATA[
			var node 				= authConfigWindow.getUserData("currentNode"),
					id					= node.data.id,
					namedId			= node.data.namedId,
					name 				= node.data.name,
					nodeType 		= this.getNodeType(node),
					shortType		= nodeType.substr(nodeType.lastIndexOf(".")+1),
					parentNode	= this.nodeGet(node.parentNodeId),
					parentId		= parentNode.data ? parentNode.data.id : null,
					service			= this.getUserData( "servicePrefix") + "auth." + shortType.toLowerCase() +  ".delete",
					displayName	= shortType + " '" + ( name ? name : namedId )+ "'";
					
			if ( ! confirm ( "Do you really want to delete " + displayName + "?" ) ) return;
			
			this.updateServer( service, id, parentId )
			
			]]>
		</qx:messageSubscriber>
		
		<qx:messageSubscriber filter="qcl.auth.messages.user.deleted">
			this.getDataModel().clearData(); this.updateClient();
		</qx:messageSubscriber>
		
		<!-- remove an item from a role -->
		
		<qx:messageSubscriber filter="qcl.auth.commands.item.remove">
			var node 				= authConfigWindow.getUserData("currentNode"),
					id					= node.data.id,
					nodeType 		= this.getNodeType(node),
					shortType		= nodeType.substr(nodeType.lastIndexOf(".")+1),
					parentNode	= this.nodeGet(node.parentNodeId),
					roleId			= parentNode.data.id,
					service			= this.getUserData( "servicePrefix") + "auth." + shortType.toLowerCase() +  ".removeFromRole";
					
			this.updateServer(service, id, roleId );
		</qx:messageSubscriber>
		
		<qx:messageSubscriber filter="qcl.auth.messages.user.roleRemoved">
			// listen to message only if this is not a drag and drop session
			if ( ! this.getUserData("dropData") )
			{
				console.log("user removed");
				this.getDataModel().prune(authConfigWindow.getUserData("currentNode"),true);
				this.getDataModel().setData();
			}
		</qx:messageSubscriber>
		

		
	</qx:virtualTree>	
	
</qxt:include-definition>