<?xml version="1.0" encoding="utf-8"?>
<qxt:include-definition
	xmlns:qx="http://www.qxtransformer.org/qooxdoo"
	xmlns:qxt="http://www.qxtransformer.org/extension">
	
	<!-- grid to edit properties-->
	
	<qx:verticalBoxLayout dimension="100%,100%">
		
  	<qx:propertyEditor 
  		id="authConfigPropertyEditor"
  		width="100%" height="100%"
  		border="inset-thin"
  		editable="true"
			serviceName="application.security"
  		dataBinding="true">
  
  		<qx:messageSubscriber filter="qcl.auth.messages.logout">
				<![CDATA[
  				// stop editing
  				if (this.isEditing())
  				{
  					this.stopEditing();
  				}
  				this.setEditable(false);
				]]>
  		</qx:messageSubscriber>
			
			<!-- user has changed selection in tree, load new data -->
			<qx:messageSubscriber filter="qcl.auth.messages.changeSelection">
				<![CDATA[
					// hack: preserve property view width 
					this.setUserData("oldWidth", this.getWidthValue() );

					// set service method
    			this.setServiceName(authConfigWindow.getUserData("serviceName"));

					var node = message.getData();

					if ( node )
					{
						var id 		= node.data.id;
						var type	= node.data.type;
						this.setUserData("id", id);
						this.setUserData("type", type);
						this.updateClient(this.getServiceName() + ".getItemData", type, id);
					}
				]]>
			</qx:messageSubscriber>		

			<qx:eventListener type="dataReceived">
				// hack: preserve property view width 
				this.setWidth(this.getUserData("oldWidth"));
			</qx:eventListener>
			
			<qx:messageSubscriber filter="qcl.auth.messages.properties.clear">
					this.getTableModel().setData([]);
			</qx:messageSubscriber>				

			<!-- user has edited data, send data to server -->
			
			<qx:eventListener type="dataChanged" qxt:modifier=".getTableModel()" >
				<![CDATA[
				if ( event instanceof qx.event.type.DataEvent )
				{
					var changedData = event.getData();
					
					// has only one cell has changed, i.e. edited ?
					if ( changedData.firstRow==changedData.lastRow &&
							 changedData.firstColumn==changedData.lastColumn )
					{
					  // get changed data
					  var model 	= this.getTableModel();
					  var key   	= model.getValue(0,changedData.firstRow);
					  var value 	= model.getValue(changedData.firstColumn,changedData.firstRow);
					  
					  // send change to server	
						var id 			= this.getUserData("id");
						var type		= this.getUserData("type");						  
					  var data 	 	= {};
					  data[key] 	= value;
					  this.updateServer( this.getServiceName()+ ".updateItem", type, data, id );
					}
				}
				]]>
			</qx:eventListener>

		</qx:propertyEditor>
		
	</qx:verticalBoxLayout>
	
</qxt:include-definition>	