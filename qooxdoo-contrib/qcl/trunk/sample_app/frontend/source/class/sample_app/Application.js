/* ************************************************************************


    qcl (qooxdoo component library) sample application

    Authors: Christian Boulanger

    qooxdoo v.0.7 code generated by QxTransformer v.0.2

************************************************************************ */


/* ************************************************************************
#embed(qx.icontheme/16/actions/encrypt.png)
#embed(qx.icontheme/22/actions/view-refresh.png)
#embed(qx.icontheme/22/apps/system-users.png)
#embed(qx.icontheme/22/actions/folder-new.png)
#embed(qx.icontheme/22/mimetypes/empty-x-encrypted.png)
#embed(qx.icontheme/22/actions/edit-delete.png)
#embed(qx.icontheme/22/actions/application-exit.png)

#require(qcl.databinding.simple.MDataManager)

************************************************************************ */

        
        
/**
 * Main application class
 */
        
qx.Class.define("sample_app.Application",
{
  extend : qx.application.Gui,

  members :
  {
    /**
     * main application
     */
    main : function()
    {
        this.base(arguments);

        // Define alias for custom resource path 
        
        qx.io.Alias.getInstance().add("sample_app", qx.core.Setting.get("sample_app.resourceUri"));

// data manager mixin
qx.Class.include(qx.core.Target,qcl.databinding.simple.MDataManager);

// treevirtual MNode mixin 
qx.Class.include(qx.ui.treevirtual.TreeVirtual,qx.ui.treevirtual.MNode);

// treevirtual MDragAndDropSupport mixin 
qx.Class.patch(qx.ui.treevirtual.TreeVirtual,qx.ui.treevirtual.MDragAndDropSupport);

			// add contextmenu event handler to client document
			qx.ui.core.ClientDocument.getInstance().addEventListener("contextmenu",function(e){
		   		var target = e.getOriginalTarget();
				while ( target && typeof target=="object" && target.getParent )
				{
			        if ( target.getContextMenu && target.getContextMenu() )
			        {
				        target.getContextMenu().setLeft( e.getClientX() );
				        target.getContextMenu().setTop( e.getClientY() );
				        target.getContextMenu().setOpener( target );
				        target.getContextMenu().show();
				        return true;
				    }
				    else
				    {
				    	target = target.getParent();
				    }
			    } 
			},this);
			
            
    // set parent widget to clientDocument 
    var qx_id4514000 = qx.ui.core.ClientDocument.getInstance();

    
    // create alias for this object instance
    var _qx_this = this;
    
    // generate all child widgets and add them to document 
		
		
		

		function utf8_encode( string )
		{
		  return unescape( encodeURIComponent( string ) );
		}
		
		function utf8_decode( string )
		{
		  return decodeURIComponent( escape( s ) );
		}
		
		// patch current qooxdoo code
		qx.ui.core.Widget.prototype.supportsDrop = function (dragCache)
		{
      var supportsDropMethod = this.getSupportsDropMethod();
      if (supportsDropMethod !== null) {
        return supportsDropMethod.call(this, dragCache);
      }
      return true;
		};
		
		qx.event.handler.DragAndDropHandler.prototype.getDropTarget = qx.core.Variant.select("qx.client",
    {
      "gecko" : function(e)
      {
        var vCurrent = e.getTarget();

//        if (vCurrent == this.__dragCache.sourceWidget) {
//          vCurrent = qx.event.handler.EventHandler.getTargetObject(qx.html.ElementFromPoint.getElementFromPoint(e.getPageX(), e.getPageY()));
//        } else {
          vCurrent = qx.event.handler.EventHandler.getTargetObject(null, vCurrent);
//        }

        while (vCurrent != null)
        {

          if (!vCurrent.supportsDrop(this.__dragCache)) {
            return null;
          }

          if (this.supportsDrop(vCurrent)) {
            return vCurrent;
          }

          vCurrent = vCurrent.getParent();
        }

        return null;
      },

      "default" : function(e)
      {
        var vCurrent = e.getTarget();

        while (vCurrent != null)
        {
          if (!vCurrent.supportsDrop(this.__dragCache)) {
            return null;
          }

          if (this.supportsDrop(vCurrent)) {
            return vCurrent;
          }

          vCurrent = vCurrent.getParent();
        }

        return null;
      }
    });
		
	

		//#embed(qx.icontheme/16/apps/system-users.png)
	

		//#require(qcl.auth.permission.Permission) etc. in the Manager class files 
		// will make the generator script fail with a recursion error
		// need to manually include the classes here 
		// todo: file a bugzilla bug about this
		var dummy = new qcl.auth.permission.Permission("foo");
		dummy = new qcl.auth.role.Role("foo");
		dummy = new qcl.auth.user.User("foo");
	
// security directives
var qx_id4516287 = qcl.auth.permission.Manager.getInstance();
var qx_id4516293 = qx_id4516287.create("sample_app.permissions.default.*");

var userManager = qcl.auth.user.Manager.getInstance();
userManager.setDataBinding(true);
userManager.setServiceName("sample_app.auth.user");

qx.event.message.Bus.subscribe("qcl.auth.messages.loginAttempt",function(message){

			var username = message.getData().username;
			var password = message.getData().password; // todo: md5 with client-server salt sync 
			this.updateClient(username,password);
		
},userManager);

qx.event.message.Bus.subscribe("qcl.auth.messages.loginSuccess",function(message){

			// show hidden panes on login
			qx.event.message.Bus.dispatch("sample_app.messages.panes.reload",true);
			qx.event.message.Bus.dispatch("sample_app.messages.application.show",true);
		
},userManager);

qx.event.message.Bus.subscribe("sample_app.messages.logout",function(message){

			// logout and hide panes
			qcl.auth.user.Manager.getInstance().setActiveUser(null);
			qx.event.message.Bus.dispatch("sample_app.messages.application.show",false);
			this.updateServer("sample_app.auth.user.logout");
		
},userManager);


		// start authentication
		userManager.updateClient();
	
var qx_id4518519 = new qx.ui.popup.Popup();
qx_id4518519.setHeight("auto");
qx_id4518519.setWidth("auto");
qx_id4518519.setAutoHide(false);

qx_id4518519.addEventListener("appear",function(event)
{
this.centerToBrowser()
},qx_id4518519);
qx_id4514000.add(qx_id4518519);

var qx_id4516215 = new qx.ui.basic.Atom("Loading, please wait...",null);
qx_id4516215.setBorder("outset-thin");
qx_id4516215.setPadding(10);
qx_id4516215.setBackgroundColor("white");
qx_id4518519.add(qx_id4516215);

qx.event.message.Bus.subscribe("datamanager-rpc-*",function(message){

					
					var status = message.getName();
					var timestamp = message.getData()
					var queue = this.getUserData("queue") || [];
					switch ( status )
					{
					  case "datamanager-rpc-start":
					    queue.push(timestamp);
					    break;
					  
					  case "datamanager-rpc-end":
					    for (var i=0; i<queue.length; i++)
					    {
					      if (queue[i]==timestamp)
					      {
					        queue.splice(i,1);
					      }
					    }
					    break; 
					}
					this.setUserData("queue",queue);
					if (queue.length) {
						this.getParent().show();
					} else {
						this.getParent().hide();
					}
					
				
},qx_id4516215);

var errorWindow = new qx.ui.window.Window("Remote Error Log");
errorWindow.setWidth(400);
errorWindow.setHeight(200);
errorWindow.setShowMinimize(false);
errorWindow.setShowMaximize(false);
errorWindow.setShowClose(false);

errorWindow.addEventListener("appear",function(event)
{
this.centerToBrowser()
},errorWindow);
qx_id4514000.add(errorWindow);

qx.event.message.Bus.subscribe("error-*",function(message){

			message.getData() == false ? this.hide() : this.show();
		
},errorWindow);

var qx_id4518391 = new qx.ui.layout.VerticalBoxLayout();
qx_id4518391.setSpacing(5);
qx_id4518391.setPadding(5);
qx_id4518391.setWidth("100%");
qx_id4518391.setHeight("100%");
errorWindow.add(qx_id4518391);

var errorText = new qx.ui.form.TextArea();
errorText.setHeight("1*");
errorText.setWidth("100%");
qx_id4518391.add(errorText);

qx.event.message.Bus.subscribe("error-*",function(message){

					var msg = new Date() + ": " + message.getData();
					this.setValue(msg);
					this.setScrollTop ( 100000 );
				
},errorText);

qx.event.message.Bus.subscribe("server.log",function(message){

					var msg = new Date() + ": " + message.getData();
					if (this.getValue()) msg = this.getValue() +  "\n" + msg;
					this.setValue(msg);
					this.setScrollTop ( 100000 );
				
},errorText);

var qx_id4518565 = new qx.ui.layout.HorizontalBoxLayout();
qx_id4518565.setWidth("100%");
qx_id4518565.setHeight("auto");
qx_id4518565.setHorizontalChildrenAlign("center");
qx_id4518565.setSpacing(10);
qx_id4518391.add(qx_id4518565);

var qx_id4518576 = new qx.ui.form.Button("Clear",null);
qx_id4518565.add(qx_id4518576);

qx_id4518576.addEventListener("execute",function(event){

						errorText.setValue("");
					
},qx_id4518576);

var qx_id4518583 = new qx.ui.form.Button("OK",null);
qx_id4518565.add(qx_id4518583);

qx_id4518583.addEventListener("execute",function(event){

						errorWindow.hide();
					
},qx_id4518583);

var loginWindow = new qx.ui.window.Window("Login");
loginWindow.setWidth(250);
loginWindow.setModal(true);
loginWindow.setShowMinimize(false);
loginWindow.setShowMaximize(false);
loginWindow.setShowClose(false);
loginWindow.setDisplay(true);
loginWindow.setResizable(false);

loginWindow.addEventListener("appear",function(event)
{
this.centerToBrowser()
},loginWindow);
qx_id4514000.add(loginWindow);

var qx_id4518892 = new qx.ui.groupbox.GroupBox();
qx_id4518892.setDimension("auto" ,"auto");
loginWindow.add(qx_id4518892);

var qx_id4518648 = new qx.ui.layout.VerticalBoxLayout();
qx_id4518648.setSpacing(5);
qx_id4518892.add(qx_id4518648);

var qx_id4518910 = new qx.ui.basic.Atom("Please log in.","icon/16/actions/encrypt.png");
qx_id4518910.setHeight(20);
qx_id4518910.setWidth("auto");
qx_id4518910.setIconPosition("left");
qx_id4518648.add(qx_id4518910);

var qx_id4518672 = new qx.ui.layout.GridLayout();
qx_id4518672.setDimension("auto" ,"auto");
qx_id4518672.setVerticalSpacing(5);
qx_id4518672.setHorizontalSpacing(5);
qx_id4518648.add(qx_id4518672);
qx_id4518672.setRowCount(3);
qx_id4518672.setColumnCount(2);
qx_id4518672.setColumnWidth(0,70);
qx_id4518672.setColumnHorizontalAlignment(0,"right");
qx_id4518672.setColumnVerticalAlignment(0,"top");
qx_id4518672.setColumnWidth(1,180);
qx_id4518672.setColumnHorizontalAlignment(1,"right");
qx_id4518672.setColumnVerticalAlignment(1,"top");
qx_id4518672.setRowHeight(0,20);

var qx_id4518604 = new qx.ui.basic.Label("User Name");
qx_id4518672.add(qx_id4518604,0,0);

var qx_id4518701 = new qx.ui.layout.VerticalBoxLayout();
qx_id4518701.setWidth("100%");
qx_id4518701.setOverflow("auto");

var loginWindow_username = new qx.ui.form.TextField();
loginWindow_username.setWidth("100%");
loginWindow_username.setHeight(20);
qx_id4518701.add(loginWindow_username);
qx_id4518672.add(qx_id4518701,1,0);
qx_id4518672.setRowHeight(1,20);

var qx_id4518719 = new qx.ui.basic.Label("Password");
qx_id4518672.add(qx_id4518719,0,1);

var qx_id4518724 = new qx.ui.layout.VerticalBoxLayout();
qx_id4518724.setOverflow("auto");
qx_id4518724.setWidth("100%");

var loginWindow_password = new qx.ui.form.PasswordField();
loginWindow_password.setWidth("100%");
loginWindow_password.setHeight(20);
qx_id4518724.add(loginWindow_password);
qx_id4518672.add(qx_id4518724,1,1);
qx_id4518672.setRowHeight(2,20);

var qx_id4518744 = new qx.ui.layout.HorizontalBoxLayout();
qx_id4518744.setSpacing(5);

var qx_id4518748 = new qx.ui.form.Button("Login",null);
qx_id4518748.setWidth(100);
qx_id4518744.add(qx_id4518748);

qx_id4518748.addEventListener("execute",function(event){

										var username = loginWindow_username.getValue();
										var password = loginWindow_password.getValue();
										if ( ! username )
										{
											alert(this.tr("You have to supply a username"));
											return;
										}
										var data = {
											'username'		: username,
											'password'		: password
										};
										qx.event.message.Bus.dispatch("qcl.auth.messages.loginAttempt", data);
										loginWindow_password.setValue("");
									
},qx_id4518748);
qx_id4518672.add(qx_id4518744,1,2);

qx.event.message.Bus.subscribe("qcl.auth.messages.loginFailed",function(message){

			var msg = message.getData();
			if (msg) alert(this.tr(msg));
		
},loginWindow);

qx.event.message.Bus.subscribe("qcl.auth.messages.loginSuccess",function(message){

			this.close();
		
},loginWindow);

qx.event.message.Bus.subscribe("qcl.auth.messages.logout",function(message){

			this.show();
		
},loginWindow);

var qx_id4518803 = new qx.ui.layout.VerticalBoxLayout();
qx_id4518803.setWidth(500);
qx_id4518803.setHeight(100);
qx_id4514000.add(qx_id4518803);

qx_id4518803.addEventListener("appear",function(event){

      var d = qx.ui.core.ClientDocument.getInstance();
      this.setLeft((d.getClientWidth() - this.getBoxWidth()) / 2);
      this.setTop(20);
		
},qx_id4518803);

var qx_id4518786 = new qx.ui.basic.Label(null);
qx_id4518786.setBackgroundColor("white");
qx_id4518786.setBorder("black");
qx_id4518786.setDimension("100%" ,"100%");
qx_id4518786.setPadding(10);
qx_id4518786.setTextAlign("center");
qx_id4518786.setText('<h2 xmlns:qxt="http://www.qxtransformer.sourceforge.net/extension" xmlns:qx="http://www.qooxdoo.org">qooxdoo component library sample application</h2><p xmlns:qxt="http://www.qxtransformer.sourceforge.net/extension" xmlns:qx="http://www.qooxdoo.org">2007 (c) Christian Boulanger. Use admin / admin to log in.</p>');
qx_id4518803.add(qx_id4518786);

qx.event.message.Bus.subscribe("qcl.auth.messages.loginSuccess",function(message){

			this.hide();
		
},qx_id4518803);

qx.event.message.Bus.subscribe("qcl.auth.messages.logout",function(message){

			this.show();
		
},qx_id4518803);

// security directives
var qx_id4519547 = qcl.auth.permission.Manager.getInstance();
var qx_id4518150 = qx_id4519547.create("qcl.auth.permissions.user.create");
var qx_id4519541 = qx_id4519547.create("qcl.auth.permissions.role.create");
var qx_id4519599 = qx_id4519547.create("qcl.auth.permissions.permission.create");
var qx_id4519564 = qx_id4519547.create("qcl.auth.permissions.item.delete");
var qx_id4519416 = qx_id4519547.create("qcl.auth.permissions.item.edit");

var contextMenuAuthConfig = new qx.ui.menu.Menu();
qx_id4514000.add(contextMenuAuthConfig);

var qx_id4518208 = new qx.ui.menu.Button("New User",null);
qx_id4518208.setEnabled(false);
qx_id4518150.addEventListener("changeState",function(e){this.setEnabled(e.getData())},qx_id4518208);
contextMenuAuthConfig.add(qx_id4518208);

qx_id4518208.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qcl.auth.commands.user.create",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4518208);

var qx_id4516927 = new qx.ui.menu.Button("New Role",null);
qx_id4516927.setEnabled(false);
qx_id4519541.addEventListener("changeState",function(e){this.setEnabled(e.getData())},qx_id4516927);
contextMenuAuthConfig.add(qx_id4516927);

qx_id4516927.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qcl.auth.commands.role.create",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4516927);

var qx_id4519211 = new qx.ui.menu.Button("New Permission",null);
qx_id4519211.setEnabled(false);
qx_id4519599.addEventListener("changeState",function(e){this.setEnabled(e.getData())},qx_id4519211);
contextMenuAuthConfig.add(qx_id4519211);

qx_id4519211.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qcl.auth.commands.permission.create",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4519211);

var qx_id4519225 = new qx.ui.menu.Separator();
contextMenuAuthConfig.add(qx_id4519225);

var qx_id4519226 = new qx.ui.menu.Button("Delete",null);
qx_id4519226.setEnabled(false);
qx_id4519564.addEventListener("changeState",function(e){this.setEnabled(e.getData())},qx_id4519226);
contextMenuAuthConfig.add(qx_id4519226);

qx_id4519226.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qcl.auth.commands.item.delete",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4519226);

// security directives
var qx_id4518178 = qcl.auth.permission.Manager.getInstance();
var qx_id4519241 = qx_id4518178.create("qcl.auth.permissions.manage");

var authConfigWindow = new qx.ui.window.Window("Configure Application Access / Authorizations");
authConfigWindow.setWidth(500);
authConfigWindow.setHeight(400);
authConfigWindow.setShowMinimize(false);
authConfigWindow.setShowClose(true);
authConfigWindow.setModal(false);

authConfigWindow.addEventListener("appear",function(event)
{
this.centerToBrowser()
},authConfigWindow);
qx_id4514000.add(authConfigWindow);

qx.event.message.Bus.subscribe("qcl.auth.commands.access.manage",function(message){

			this.setDisplay(true);
			qx.event.message.Bus.dispatch("qcl.auth.messages.reload");
		
},authConfigWindow);

qx.event.message.Bus.subscribe("qcl.auth.messages.logout",function(message){

			this.setDisplay(false);
		
},authConfigWindow);

var qx_id4519329 = new qx.ui.layout.VerticalBoxLayout();
qx_id4519329.setDimension("100%" ,"100%");
authConfigWindow.add(qx_id4519329);

var qx_id4519328 = new qx.ui.toolbar.ToolBar();
qx_id4519328.setWidth("100%");
qx_id4519328.setHeight(30);
qx_id4519329.add(qx_id4519328);

var qx_id4519335 = new qx.ui.toolbar.Button("Reload","icon/22/actions/view-refresh.png");
qx_id4519335.setToolTip(new qx.ui.popup.ToolTip("Reload the data"));
qx_id4519328.add(qx_id4519335);

qx_id4519335.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qcl.auth.messages.reload",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4519335);

var qx_id4519260 = new qx.ui.toolbar.Button("New User","icon/22/apps/system-users.png");
qx_id4519260.setEnabled(false);
qx_id4518150.addEventListener("changeState",function(e){this.setEnabled(e.getData())},qx_id4519260);
qx_id4519328.add(qx_id4519260);

qx_id4519260.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qcl.auth.commands.user.create",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4519260);

var qx_id4519031 = new qx.ui.toolbar.Button("New Role","icon/22/actions/folder-new.png");
qx_id4519031.setEnabled(false);
qx_id4519541.addEventListener("changeState",function(e){this.setEnabled(e.getData())},qx_id4519031);
qx_id4519328.add(qx_id4519031);

qx_id4519031.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qcl.auth.commands.role.create",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4519031);

var qx_id4519050 = new qx.ui.toolbar.Button("New Permission","icon/22/mimetypes/empty-x-encrypted.png");
qx_id4519050.setEnabled(false);
qx_id4519599.addEventListener("changeState",function(e){this.setEnabled(e.getData())},qx_id4519050);
qx_id4519328.add(qx_id4519050);

qx_id4519050.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qcl.auth.commands.permission.create",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4519050);

var qx_id4519069 = new qx.ui.toolbar.Button("Delete","icon/22/actions/edit-delete.png");
qx_id4519069.setEnabled(false);
qx_id4519564.addEventListener("changeState",function(e){this.setEnabled(e.getData())},qx_id4519069);
qx_id4519328.add(qx_id4519069);

qx_id4519069.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qcl.auth.commands.item.delete",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4519069);

var qx_id4519341 = new qx.ui.splitpane.VerticalSplitPane(275,225);
qx_id4519341.setTop(0);
qx_id4519341.setLeft(0);
qx_id4519341.setWidth("100%");
qx_id4519341.setHeight(370);
qx_id4519341.setShowKnob(true);
qx_id4519329.add(qx_id4519341);
var qx_id4519130 = qx_id4519341.getTopArea();

var qx_id4519145 = new qx.ui.layout.VerticalBoxLayout();
qx_id4519145.setDimension("100%" ,"100%");
qx_id4519130.add(qx_id4519145);

var qx_id4519166 = new qx.ui.splitpane.HorizontalSplitPane(250,250);
qx_id4519166.setTop(0);
qx_id4519166.setLeft(0);
qx_id4519166.setWidth("100%");
qx_id4519166.setHeight("1*");
qx_id4519166.setShowKnob(true);
qx_id4519145.add(qx_id4519166);
var qx_id4519163 = qx_id4519166.getLeftArea();

var authConfigLeftTree = new qx.ui.treevirtual.TreeVirtual(['Users/Roles']);
authConfigLeftTree.setSelectionMode(qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE);
authConfigLeftTree.setLeft(0);
authConfigLeftTree.setTop(0);
authConfigLeftTree.setWidth(245);
authConfigLeftTree.setHeight("100%");
authConfigLeftTree.setBackgroundColor("white");
authConfigLeftTree.setBorder("inset");
authConfigLeftTree.setShowCellFocusIndicator(false);
authConfigLeftTree.setAlwaysShowOpenCloseSymbol(true);
authConfigLeftTree.setContextMenu(contextMenuAuthConfig);
authConfigLeftTree.setSortChildNodesBy({'label':'asc'});
authConfigLeftTree.setSortAfterDrop(true);
authConfigLeftTree.setAllowDragOut(false);
authConfigLeftTree.setEnableDragDrop(true);
authConfigLeftTree.setDataBinding(true);
authConfigLeftTree.setServiceName("sample_app.auth.authConfig");
authConfigLeftTree.setServiceMethodUpdateClient("getUsersAndRoles");
authConfigLeftTree.getTableColumnModel().getBehavior().set(0,{width:"10*",minWidth:"200"});
qx_id4519163.add(authConfigLeftTree);

// security directives
var qx_id4519101 = qcl.auth.permission.Manager.getInstance();
var qx_id4519102 = qx_id4519101.create("qcl.auth.permissions.manage");
var qx_id4515916 = qx_id4519101.create("qcl.auth.permissions.user.create");
qx.event.message.Bus.subscribe("qcl.auth.messages.changeItem",function(){qx_id4515916.update()});
qx_id4515916.addCondition(function(){

					return (
						authConfigWindow.getUserData("currentNodeType") == "qcl.auth.types.Role"
						&& authConfigWindow.getUserData("currentTree") == this
					);
				
},authConfigLeftTree);
var qx_id4515926 = qx_id4519101.create("qcl.auth.permissions.item.delete");
qx.event.message.Bus.subscribe("qcl.auth.messages.changeItem",function(){qx_id4515926.update()});
qx_id4515926.addCondition(function(){

					// only allow delete if node is a user (left) or in the right window 
					return (
							authConfigWindow.getUserData("currentNodeType") == "qcl.auth.types.User"
							|| ( authConfigWindow.getUserData("currentTree") != this )
					);
				
},authConfigLeftTree);
qx_id4515926.addCondition(function(){

					// only allow delete if node has no children
					var node = authConfigWindow.getUserData("currentNode"); 
					if ( ! node ) return false;
					switch ( node.type )
					{
						case qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF:
							return true;
						case qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH:
							return (node.children.length == 0);
						default:
							return false;
					}					
				
},authConfigLeftTree);
var qx_id4515947 = qx_id4519101.create("qcl.auth.permissions.item.edit");
qx.event.message.Bus.subscribe("qcl.auth.messages.changeItem",function(){qx_id4515947.update()});
qx_id4515947.addCondition(function(){

					return (
							authConfigWindow.getUserData("currentNodeType") == "qcl.auth.types.User"
							|| ( authConfigWindow.getUserData("currentTree") != this )											
					);
				
},authConfigLeftTree);

authConfigLeftTree.addEventListener("focus",function(event){

		
			// we are in focus
			authConfigWindow.setUserData("currentTree",this); 
			
			// set drag policy
			var user = qcl.auth.user.Manager.getInstance().getActiveUser();  
			if ( user.hasPermission("qcl.auth.permissions.manage") )
			{
				this.setAllowDragTypes(['qcl.auth.types.User']);
				this.setAllowDropTypes([['qcl.auth.types.User', 'qcl.auth.types.Role']]);
			}
			else
			{
				this.setAllowDragTypes(null);
				this.setAllowDropTypes(null);
			}
		
},authConfigLeftTree);

authConfigLeftTree.addEventListener("changeSelection",function(event){

		
			var node = event.getData()[0];
			if ( ! node ) return;
			
			// determine and save node type
			var nodeType = this.getNodeType(node);  
			authConfigWindow.setUserData("currentNodeType",nodeType);
			
			var item = null;
			switch (nodeType)
			{
				case "qcl.auth.types.User":
					item = {
						service : "sample_app.auth.user",
						id			: node.data.id
					};
					break;			
			}
			
			authConfigWindow.setUserData("currentItem",item);
			authConfigWindow.setUserData("currentNode",node);
			node.data.sourceTree = this;
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeItem",item );
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeSelection",node );
			
		
},authConfigLeftTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.changeSelection",function(message){

			if (authConfigWindow.getUserData("currentTree") != this) 
			{ 
				this.getSelectionModel().clearSelection();
			}
		
},authConfigLeftTree);

authConfigLeftTree.addEventListener("dragdrop",function(event){

			
		
			var dropData 	 = this.getDropData(event);
			var selection  = dropData.nodeData;
			var targetNode = dropData.targetNode;
			if ( this.getNodeType(targetNode) != "qcl.auth.types.Role" ) return;
			
			var targetNodeRoleId = parseInt(targetNode.data.id);
			
			selection.forEach(function(sourceNode){	
				var userId 					 	= sourceNode.data.id;
				var sourceNodeRoleId  = this.nodeGet(sourceNode.parentNodeId).data.id;
				this.updateServer("sample_app.auth.user.removeFromRole", userId, sourceNodeRoleId );
				this.updateServer("sample_app.auth.user.addToRole", 			userId, targetNodeRoleId );
			}, this);
			
			this.setUserData("dropData",dropData);
		  					
		
},authConfigLeftTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.user.roleAdded",function(message){

			
			var dropData = this.getUserData("dropData");
			if (dropData && dropData.nodeData[0].data.id == message.getData() )
			{
			 this.moveNode(dropData);
			 this.setUserData("dropData",null);
			}
			
		
},authConfigLeftTree);

qx.event.message.Bus.subscribe("qcl.auth.commands.user.create",function(message){

			var newName = prompt(this.tr("Please enter login name of new user"));
			if ( ! newName ) return;
			roleNode = authConfigWindow.getUserData("currentNode");
			if (this.getNodeType(roleNode) != "qcl.auth.types.Role" )
			{
				qx.event.message.Bus.dispatch("error-client", "Cannot create user - invalid parent node.");
				return;
			}
			this.updateServer("sample_app.auth.user.create", newName, roleNode.data.id );
		
},authConfigLeftTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.user.created",function(message){

			var id   = message.getData();
			var parentNodeId = authConfigWindow.getUserData("currentNode").data.id;
			var item = { id	: id, service : "sample_app.auth.user"	};
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeItem",item );				
			this.getDataModel().clearData(); this.updateClient();
		
},authConfigLeftTree);

qx.event.message.Bus.subscribe("qcl.auth.commands.item.delete",function(message){

			
			var node 				= authConfigWindow.getUserData("currentNode"),
					id					= node.data.id,
					namedId			= node.data.namedId,
					name 				= node.data.name,
					nodeType 		= this.getNodeType(node),
					shortType		= nodeType.substr(nodeType.lastIndexOf(".")+1),
					parentNode	= this.nodeGet(node.parentNodeId),
					parentId		= parentNode.data ? parentNode.data.id : null,
					service			= "sample_app.auth." + shortType.toLowerCase() +  ".delete",
					displayName	= shortType + " '" + ( name ? name : namedId )+ "'";
					
			if ( ! confirm ( "Do you really want to delete " + displayName + "?" ) ) return;
			
			this.updateServer( service, id, parentId )
			
			
		
},authConfigLeftTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.user.deleted",function(message){

			this.getDataModel().clearData(); this.updateClient();
		
},authConfigLeftTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.reload",function(message){

			// reload tree
			this.getDataModel().clearData(); this.updateClient();
		
},authConfigLeftTree);
var qx_id4515949 = qx_id4519166.getRightArea();

var authConfigRightTree = new qx.ui.treevirtual.TreeVirtual(['Roles/Permissions']);
authConfigRightTree.setSelectionMode(qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE);
authConfigRightTree.setLeft(0);
authConfigRightTree.setTop(0);
authConfigRightTree.setWidth(245);
authConfigRightTree.setHeight("100%");
authConfigRightTree.setBackgroundColor("white");
authConfigRightTree.setBorder("inset");
authConfigRightTree.setShowCellFocusIndicator(false);
authConfigRightTree.setAlwaysShowOpenCloseSymbol(true);
authConfigRightTree.setContextMenu(contextMenuAuthConfig);
authConfigRightTree.setSortChildNodesBy({'label':'asc'});
authConfigRightTree.setSortAfterDrop(true);
authConfigRightTree.setAllowDragOut(false);
authConfigRightTree.setEnableDragDrop(true);
authConfigRightTree.setDataBinding(true);
authConfigRightTree.setServiceName("sample_app.auth.authConfig");
authConfigRightTree.setServiceMethodUpdateClient("getRolesAndPermissions");
authConfigRightTree.getTableColumnModel().getBehavior().set(0,{width:"10*",minWidth:"200"});
qx_id4515949.add(authConfigRightTree);

// security directives
var qx_id4519936 = qcl.auth.permission.Manager.getInstance();
var qx_id4519938 = qx_id4519936.create("qcl.auth.permissions.role.create");
qx.event.message.Bus.subscribe("qcl.auth.messages.changeItem",function(){qx_id4519938.update()});
qx_id4519938.addCondition(function(){

					return (authConfigWindow.getUserData("currentTree") == this);
				
},authConfigRightTree);
var qx_id4516103 = qx_id4519936.create("qcl.auth.permissions.permission.create");
qx.event.message.Bus.subscribe("qcl.auth.messages.changeItem",function(){qx_id4516103.update()});
qx_id4516103.addCondition(function(){

					
					return (
						authConfigWindow.getUserData("currentTree") == this
						&& authConfigWindow.getUserData("currentNodeType") == "qcl.auth.types.Role"
					);
					
				
},authConfigRightTree);

authConfigRightTree.addEventListener("focus",function(event){

		
			// we are in focus
			authConfigWindow.setUserData("currentTree",this); 
			
			// set drag policy
			var user = qcl.auth.user.Manager.getInstance().getActiveUser();  
			if ( user.hasPermission("qcl.auth.permissions.manage") )
			{
				this.setAllowDragTypes(['qcl.auth.types.Permission']);
				this.setAllowDropTypes([['qcl.auth.types.Permission', 'qcl.auth.types.Role']]);
			}
			else
			{
				this.setAllowDragTypes(null);
				this.setAllowDropTypes(null);
			}
		
},authConfigRightTree);

authConfigRightTree.addEventListener("changeSelection",function(event){

			var node = event.getData()[0];
			if ( ! node ) return;
			
			// determine and save node type
			var nodeType = this.getNodeType(node);  
			authConfigWindow.setUserData("currentNodeType",nodeType);
			
			var item = null;
			switch (nodeType)
			{
				case "qcl.auth.types.Role":
					item = {
						service : "sample_app.auth.role",
						id			: node.data.id
					};
					break;
					
				case "qcl.auth.types.Permission":
					item = {
						service : "sample_app.auth.permission",
						id			: node.data.id
					};
					break;
			}
			authConfigWindow.setUserData("currentItem",item);
			authConfigWindow.setUserData("currentNode",node);
			node.data.sourceTree = this;
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeItem",item );
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeSelection",node );
			
		
},authConfigRightTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.changeSelection",function(message){

			if (authConfigWindow.getUserData("currentTree") != this) 
			{ 
				this.getSelectionModel().clearSelection();
			}
		
},authConfigRightTree);

authConfigRightTree.addEventListener("dragdrop",function(event){

			
		
			var dropData 	 = this.getDropData(event);
			var selection  = dropData.nodeData;
			var targetNode = dropData.targetNode;
			if ( this.getNodeType(targetNode) != "qcl.auth.types.Role" ) return;
			
			var targetNodeRoleId = parseInt(targetNode.data.id);
			
			selection.forEach(function(sourceNode){	
				var permissionId 		 		= parseInt(sourceNode.data.id);
				var sourceNodeRoleId   	= parseInt(this.nodeGet(sourceNode.parentNodeId).data.id);
				this.updateServer("sample_app.auth.permission.removeFromRole", permissionId, sourceNodeRoleId );
				this.updateServer("sample_app.auth.permission.addToRole", 			permissionId, targetNodeRoleId );
			}, this);
			
			this.setUserData("dropData",dropData);
		  					
		
},authConfigRightTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.permission.roleAdded",function(message){

			
			var dropData = this.getUserData("dropData");
			if (dropData && dropData.nodeData[0].data.id == message.getData() )
			{
			 this.moveNode(dropData);
			 this.setUserData("dropData",null);
			}
			
		
},authConfigRightTree);

qx.event.message.Bus.subscribe("qcl.auth.commands.role.create",function(message){

			var newName = prompt(this.tr("Please enter dot-separated named id (foo.roles.mySpecialRole) of role"));
			if ( ! newName ) return;
			roleNode = authConfigWindow.getUserData("currentNode");
			this.updateServer("sample_app.auth.role.create", newName, roleNode.data.id );
		
},authConfigRightTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.role.created",function(message){

			var id   = message.getData();
			var parentNodeId = authConfigWindow.getUserData("currentNode").data.id;
			var item = { id	: id, service : "sample_app.auth.role"	};
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeItem",item );		
			qx.event.message.Bus.dispatch( "qcl.auth.messages.reload" );
		
},authConfigRightTree);

qx.event.message.Bus.subscribe("qcl.auth.commands.permission.create",function(message){

			var newName = prompt(this.tr("Please enter dot-separated named id (foo.permissions.doFoo) of permission"));
			if ( ! newName ) return;
			var roleNode = authConfigWindow.getUserData("currentNode");
			var nodeType = this.getNodeType(roleNode) ; 
			if ( nodeType != "qcl.auth.types.Role" )
			{
				qx.event.message.Bus.dispatch("error-client", "Cannot create permission - invalid parent node type " + nodeType );
				return;
			}
			this.updateServer("sample_app.auth.permission.create", newName, roleNode.data.id );
		
},authConfigRightTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.permission.created",function(message){

			var id   = message.getData();
			var parentNodeId = authConfigWindow.getUserData("currentNode").data.id;
			var item = { id	: id, service : "sample_app.auth.permission"	};
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeItem",item );
			this.getDataModel().clearData(); this.updateClient();
		
},authConfigRightTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.role.deleted",function(message){

			qx.event.message.Bus.dispatch( "qcl.auth.messages.reload" );
		
},authConfigRightTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.permission.deleted",function(message){

			this.getDataModel().clearData(); this.updateClient();
		
},authConfigRightTree);

qx.event.message.Bus.subscribe("qcl.auth.messages.reload",function(message){

			this.getDataModel().clearData();this.updateClient();
		
},authConfigRightTree);
var qx_id4520710 = qx_id4519341.getBottomArea();

var qx_id4520522 = new qx.ui.layout.VerticalBoxLayout();
qx_id4520522.setDimension("100%" ,"100%");
qx_id4520710.add(qx_id4520522);


		
	    // cell renderer factory function
    // returns a cell renderer instance
  	var propertyCellRendererFactoryFunc = function (cellInfo)
    {
      var table 			 = cellInfo.table;	
			var tableModel 	 = table.getTableModel();
			var rowData			 = tableModel.getRowData(cellInfo.row);
			var metaData		 = rowData[3];

			for ( var cmd in metaData )
			{
				switch ( cmd )
				{	  
          case "type":
            switch ( metaData['type'])
            {
              case "checkbox": return new qx.ui.table.cellrenderer.Boolean;
              case "password": return new qx.ui.table.cellrenderer.Password;
            }
            break;
            
          case "options":
            var renderer = new qx.ui.table.cellrenderer.Replace;
            var replaceMap = {};
            metaData['options'].forEach(function(row){
              if (row instanceof Array)
              {
                replaceMap[row[0]]=row[2];
              }
            });
            renderer.setReplaceMap(replaceMap);
						renderer.addReversedReplaceMap();    
            return renderer;							
				}
      }
      return new qx.ui.table.cellrenderer.Default;	
    }

    // create the  "meta" cell renderer object
		propertyCellRendererFactory = 
			new qx.ui.table.cellrenderer.Dynamic(propertyCellRendererFactoryFunc);    
		
    // cell editor factory function 
    // returns a cellEditorFactory instance based on data in the row itself
		var propertyCellEditorFactoryFunc = function (cellInfo) 
		{
			var table 			= cellInfo.table;	
			var tableModel 	= table.getTableModel();
			var rowData			= tableModel.getRowData(cellInfo.row);
			var metaData		= rowData[3];
			var cellEditor 	= new qx.ui.table.celleditor.TextField;	
			var validationFunc 	= null;
			 
			for ( var cmd in metaData )
			{
				switch ( cmd )
				{	
					case "options":
						cellEditor = new qx.ui.table.celleditor.ComboBox;
						cellEditor.setListData( metaData['options'] );
						cellEditor.setEditable( false );
						break;

          case "type":
             switch ( metaData['type'] )
             {
               case "password":
                 cellEditor = new qx.ui.table.celleditor.PasswordField; break;  
               case "checkbox":
						     cellEditor = new qx.ui.table.celleditor.CheckBox; break;
               case "email":
    						 cellEditor.setValidationFunction (function( newValue, oldValue ){
    							 var re = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*\.(\w{2}|(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum))$/;
    							 if ( re.test(newValue) ) return newValue;
    							 alert("You did not enter a valid email address");
    							 return oldValue;  
    						 });
    						 break;
             }
						
						break;
						
					case "editable":
						cellEditor.setEditable( metaData['editable'] === true );
						break;										

					case "regExp":
						cellEditor.setValidationFunction (function( newValue, oldValue ){
							var re = new RegExp(metaData['regExp']);
							if ( re.test(newValue) ) return newValue;
							alert(metaData['failMsg']);
							return oldValue;  
						});
						break;
            
 					case "validationFunc":
            cellEditor.setValidationFunction (metaData['validationFunc']);
						break;
						
					case "required":
						cellEditor.setValidationFunction (function( newValue, oldValue ){
							if (! newValue)
							{
								alert("You need to supply a value here");
								return oldValue;
							}
							return newValue;  
						});
						break;										
				}	
			}
			return cellEditor;
		}
		
    // create a "meta" cell editor object
		propertyCellEditorFactory = 
			new qx.ui.table.celleditor.Dynamic(propertyCellEditorFactoryFunc);
			
		
var authConfigPropertyEditor_tableModel = new qx.ui.table.model.Simple();
authConfigPropertyEditor_tableModel.setColumns(['Property','Property','Edit Value']);
authConfigPropertyEditor_tableModel.setColumnEditable(2,true);
var authConfigPropertyEditor_resizeBehaviour = { tableColumnModel : function(obj){ return new qx.ui.table.columnmodel.Resize(obj); } };
var authConfigPropertyEditor = new qx.ui.table.Table(authConfigPropertyEditor_tableModel,authConfigPropertyEditor_resizeBehaviour);
authConfigPropertyEditor.getTableColumnModel().getBehavior().setWidth(1,100);
authConfigPropertyEditor.getTableColumnModel().getBehavior().setWidth(2,400);
authConfigPropertyEditor.getTableColumnModel().setColumnVisible(0,false);
authConfigPropertyEditor.getTableColumnModel().setDataCellRenderer(2, propertyCellRendererFactory);
authConfigPropertyEditor.getTableColumnModel().setCellEditorFactory(2, propertyCellEditorFactory);
authConfigPropertyEditor.getSelectionModel().setSelectionMode(qx.ui.table.selection.Model.SINGLE_SELECTION);
authConfigPropertyEditor.setDimension("100%" ,"100%");
authConfigPropertyEditor.setColumnVisibilityButtonVisible(false);
authConfigPropertyEditor.setKeepFirstVisibleRowComplete(true);
authConfigPropertyEditor.setStatusBarVisible(false);
authConfigPropertyEditor.setBorder("inset-thin");
authConfigPropertyEditor.setDataBinding(true);
qx_id4520522.add(authConfigPropertyEditor);

authConfigPropertyEditor.getSelectionModel().addEventListener("changeSelection",function(event){

},authConfigPropertyEditor);

authConfigPropertyEditor.getTableModel().addEventListener("dataChanged",function(event){

				
				if ( event instanceof qx.event.type.DataEvent )
				{
					var changedData = event.getData();
					
					// has only one cell has changed, i.e. edited ?
					if ( changedData.firstRow==changedData.lastRow &&
							 changedData.firstColumn==changedData.lastColumn )
					{
					  // get service information
					  var service  = this.getUserData("service");
					  var id			 = this.getUserData("id");
					  
					  // get changed data
					  var model 	= this.getTableModel();
					  var key   	= model.getValue(0,changedData.firstRow);
					  var value 	= model.getValue(changedData.firstColumn,changedData.firstRow);
					  
					  // send change to server							  
					  var data 	 	= {};
					  data[key] 	= value;
					  this.updateServer( service + ".update", data, id );
					}
				}
				
			
},authConfigPropertyEditor);

qx.event.message.Bus.subscribe("qcl.auth.messages.changeItem",function(message){

				
					var item = message.getData();
					if ( item && typeof item == "object" )
					{
						this.setUserData("id",item.id);
						this.setUserData("service",item.service);
						this.updateClient(item.service + ".getData", item.id);
					}
				
			
},authConfigPropertyEditor);

qx.event.message.Bus.subscribe("qcl.auth.messages.user.load",function(message){

					var id 			= message.getData(),
							service = "sample_app.auth.user";
					this.setUserData("id",id);
					this.setUserData("service",service);
					this.updateClient(service + ".getData",id);
			
},authConfigPropertyEditor);

qx.event.message.Bus.subscribe("qcl.auth.messages.properties.clear",function(message){

					this.getTableModel().setData([]);
			
},authConfigPropertyEditor);

qx.event.message.Bus.subscribe("qcl.auth.messages.role.load",function(message){

					var id 			= message.getData(),
							service = "sample_app.auth.role";
					this.setUserData("id",id);
					this.setUserData("service",service);
					this.updateClient(service + ".getData",id);
			
},authConfigPropertyEditor);

qx.event.message.Bus.subscribe("qcl.auth.messages.permission.load",function(message){

					var id 			= message.getData(),
							service = "sample_app.auth.permission";
					this.setUserData("id",id);
					this.setUserData("service",service);
					this.updateClient(service + ".getData",id);
			
},authConfigPropertyEditor);

var qx_id4521164 = new qx.ui.layout.VerticalBoxLayout();
qx_id4521164.setWidth("100%");
qx_id4521164.setHeight("100%");
qx_id4521164.setDisplay(false);
qx_id4514000.add(qx_id4521164);

qx.event.message.Bus.subscribe("sample_app.messages.application.show",function(message){

			this.setDisplay(message.getData());
		
},qx_id4521164);

// security directives
var qx_id4520855 = qcl.auth.permission.Manager.getInstance();
var qx_id4520837 = qx_id4520855.create("sample_app.permissions.default.logout");
var qx_id4521564 = qx_id4520855.create("sample_app.permissions.access.manage");

var toolBar = new qx.ui.toolbar.ToolBar();
toolBar.setWidth("100%");
qx_id4521164.add(toolBar);

var qx_id4521510 = new qx.ui.toolbar.MenuButton("Application");
toolBar.add(qx_id4521510);

var qx_id4520890 = new qx.ui.menu.Menu();
qx_id4521510.setMenu(qx_id4520890);
qx_id4514000.add(qx_id4520890);

var qx_id4519088 = new qx.ui.menu.Button("Logout",null);
qx_id4519088.setEnabled(false);
qx_id4520837.addEventListener("changeState",function(e){this.setEnabled(e.getData())},qx_id4519088);
qx_id4520890.add(qx_id4519088);

qx_id4519088.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("sample_app.messages.logout",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4519088);

var qx_id4520946 = new qx.ui.toolbar.MenuButton("Edit");
toolBar.add(qx_id4520946);

var qx_id4520904 = new qx.ui.menu.Menu();
qx_id4520946.setMenu(qx_id4520904);
qx_id4514000.add(qx_id4520904);

var qx_id4521491 = new qx.ui.menu.Button("Copy",null);
qx_id4521491.setEnabled(false);
qx_id4520904.add(qx_id4521491);

qx_id4521491.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("sample_app.commands.copy",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4521491);

var qx_id4520847 = new qx.ui.menu.Button("Cut",null);
qx_id4520847.setEnabled(false);
qx_id4520904.add(qx_id4520847);

qx_id4520847.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("sample_app.commands.cut",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4520847);

var qx_id4521528 = new qx.ui.menu.Button("Paste",null);
qx_id4521528.setEnabled(false);
qx_id4520904.add(qx_id4521528);

qx_id4521528.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("sample_app.commands.paste",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4521528);

var qx_id4520869 = new qx.ui.menu.Separator();
qx_id4520904.add(qx_id4520869);

var qx_id4520870 = new qx.ui.menu.Button("Delete",null);
qx_id4520870.setEnabled(false);
qx_id4520904.add(qx_id4520870);

qx_id4520870.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qx.messages.paste.delete",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4520870);

var qx_id4519626 = new qx.ui.toolbar.MenuButton("Settings");
toolBar.add(qx_id4519626);

var qx_id4519630 = new qx.ui.menu.Menu();
qx_id4519626.setMenu(qx_id4519630);
qx_id4514000.add(qx_id4519630);

var qx_id4519631 = new qx.ui.menu.Button("Manage Application Access",null);
qx_id4519631.setEnabled(false);
qx_id4521564.addEventListener("changeState",function(e){this.setEnabled(e.getData())},qx_id4519631);
qx_id4519630.add(qx_id4519631);

qx_id4519631.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("qcl.auth.commands.access.manage",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},qx_id4519631);

var qx_id4519644 = new qx.ui.basic.Atom(null,null);
qx_id4519644.setWidth("1*");
qx_id4519644.setHorizontalChildrenAlign("right");
qx_id4519644.setHeight("100%");
qx_id4519644.setPaddingRight(10);
qx_id4519644.setVerticalChildrenAlign("middle");
toolBar.add(qx_id4519644);

qx.event.message.Bus.subscribe("qcl.auth.messages.changeActiveUser",function(message){

						// show user information
						var userdata = message.getData().getData();
						var userInfo = userdata.name + " (" + userdata.roles + ")";
						this.setLabel( userInfo );
						this.setIcon( "icon/16/" + userdata.icon );
				
},qx_id4519644);

var logoutButton = new qx.ui.toolbar.Button("Logout","icon/22/actions/application-exit.png");
logoutButton.setToolTip(new qx.ui.popup.ToolTip("Logout"));
logoutButton.setEnabled(false);
qx_id4520837.addEventListener("changeState",function(e){this.setEnabled(e.getData())},logoutButton);
toolBar.add(logoutButton);

logoutButton.addEventListener("execute",function(event){
    var m = new qx.event.message.Message("sample_app.messages.logout",event.getData ? event.getData():[]);
    m.setSender(event.getTarget());
    qx.event.message.Bus.dispatch(m);
},logoutButton);

		        
        
        // end of child widgets
    },
    
    // event handlers as member functions
    
	
	

  

        dummyFunction : function(){}
  },
  
  /*
  *****************************************************************************
     SETTINGS
  *****************************************************************************
  */

  
    settings : { "sample_app.resourceUri" : "./resource" }
    
});





		
  /*
  *****************************************************************************
     BROADCASTER CLASSES
  *****************************************************************************
  */
		  
		
