<?xml version="1.0" encoding="utf-8"?>
<qxt:include-definition
	xmlns:qx="http://www.qooxdoo.org"
	xmlns:qxt="http://www.qxtransformer.sourceforge.net/extension">
					
	<!-- tree -->
	<qx:virtualTree
		id="authConfigRightTree" 
		left="0" top="0" width="245" height="100%"
		backgroundColor="white" border="inset"
		selectionMode="single"
		showCellFocusIndicator="false"
		alwaysShowOpenCloseSymbol="true"
		contextMenu="contextMenuAuthConfig"

		sortChildNodesBy="javascript:{'label':'asc'}"
		sortAfterDrop="true"
		allowDragOut="false"
		enableDragDrop="true"
		dragAction="javascript:['move','copy']"
		
		dataBinding="true"
		serviceName="sample_app.auth.authConfig"
		serviceMethodUpdateClient="getRolesAndPermissions">
   				
		<qx:virtualTreeColumn heading="Roles/Permissions" width="10*" minWidth="200"/>

		<!-- SECURITY POLICIES -->
		
		<qx:security>

			<qx:permission name="qcl.auth.permissions.role.create"
				updateOnMessage="qcl.auth.messages.changeItem">
				<qx:condition>
					return (authConfigWindow.getUserData("currentTree") == this);
				</qx:condition>
			</qx:permission>

			<qx:permission name="qcl.auth.permissions.permission.create"
				updateOnMessage="qcl.auth.messages.changeItem">
				<qx:condition>
					<![CDATA[
					return (
						authConfigWindow.getUserData("currentTree") == this
						&& authConfigWindow.getUserData("currentNodeType") == "qcl.auth.types.Role"
					);
					]]>
				</qx:condition>
			</qx:permission>

		</qx:security>
			
		<!-- EVENTS & MESSAGES -->	
		
		<qx:eventListener type="focus" >
		
			// we are in focus
			authConfigWindow.setUserData("currentTree",this); 
			
			// set drag policy
			var user = qcl.auth.user.Manager.getInstance().getActiveUser();  
			if ( user.hasPermission("qcl.auth.permissions.manage") )
			{
				this.setAllowDragTypes(['qcl.auth.types.Permission']);
				this.setAllowDropTypes([['qcl.auth.types.Permission', 'qcl.auth.types.Role']]);
			}
			else
			{
				this.setAllowDragTypes(null);
				this.setAllowDropTypes(null);
			}
		</qx:eventListener>
		
		<!-- change selection event -->
		<qx:eventListener type="changeSelection" >
			var node = event.getData()[0];
			if ( ! node ) return;
			
			// determine and save node type
			var nodeType = this.getNodeType(node);  
			authConfigWindow.setUserData("currentNodeType",nodeType);
			
			var item = null;
			switch (nodeType)
			{
				case "qcl.auth.types.Role":
					item = {
						service : "sample_app.auth.role",
						id			: node.data.id
					};
					break;
					
				case "qcl.auth.types.Permission":
					item = {
						service : "sample_app.auth.permission",
						id			: node.data.id
					};
					break;
			}
			authConfigWindow.setUserData("currentItem",item);
			authConfigWindow.setUserData("currentNode",node);
			node.data.sourceTree = this;
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeItem",item );
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeSelection",node );
			
		</qx:eventListener>

		<!-- clear selection when clicked in other tree -->

		<qx:messageSubscriber filter="qcl.auth.messages.changeSelection">
			if (authConfigWindow.getUserData("currentTree") != this) 
			{ 
				this.getSelectionModel().clearSelection();
			}
		</qx:messageSubscriber>
		
		<!-- drag and  drop -->
		
		<qxt:script>
			// additional supportsDrop check (hooks into MDragAndDropSupport)
			// to prevent to drop on parents that already contain a reference/copy of itself
			authConfigRightTree.supportsDropCallback = authConfigLeftTree.supportsDropCallback; 
		</qxt:script>
		
		<qx:eventListener type="dragdrop">
			<![CDATA[
		
			var dropData 	 = this.getDropData(event);
			var action		 = event.getAction();
			var selection  = dropData.nodeData;
			var targetNode = dropData.targetNode;
			if ( this.getNodeType(targetNode) != "qcl.auth.types.Role" ) return;
			
			var targetNodeRoleId = parseInt(targetNode.data.id);
			
			selection.forEach(function(sourceNode){	
				var permissionId 		 		= parseInt(sourceNode.data.id);
				var sourceNodeRoleId   	= parseInt(this.nodeGet(sourceNode.parentNodeId).data.id);
				if ( action == "move" )
				{
					this.updateServer("sample_app.auth.permission.removeFromRole", permissionId, sourceNodeRoleId );
				}
				this.updateServer("sample_app.auth.permission.addToRole", 			permissionId, targetNodeRoleId );
			}, this);
			
			this.setUserData("dropData",dropData);
		  ]]>					
		</qx:eventListener>	
		
		<qx:messageSubscriber filter="qcl.auth.messages.permission.roleAdded">
			<![CDATA[
			var dropData = this.getUserData("dropData");
			if (dropData && dropData.nodeData[0].data.id == message.getData() )
			{
			 this.moveNode(dropData);
			 this.setUserData("dropData",null);
			}
			]]>
		</qx:messageSubscriber>		

		<!-- create a new role -->
		
		<qx:messageSubscriber filter="qcl.auth.commands.role.create">
			var newName = prompt(this.tr("Please enter dot-separated named id (foo.roles.mySpecialRole) of role"));
			if ( ! newName ) return;
			roleNode = authConfigWindow.getUserData("currentNode");
			this.updateServer("sample_app.auth.role.create", newName, roleNode.data.id );
		</qx:messageSubscriber>		

		<qx:messageSubscriber filter="qcl.auth.messages.role.created">
			var id   = message.getData();
			var parentNodeId = authConfigWindow.getUserData("currentNode").data.id;
			var item = { id	: id, service : "sample_app.auth.role"	};
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeItem",item );		
			qx.event.message.Bus.dispatch( "qcl.auth.messages.reload" );
		</qx:messageSubscriber>
		
		<!-- create a new permission -->
		
		<qx:messageSubscriber filter="qcl.auth.commands.permission.create">
			var newName = prompt(this.tr("Please enter dot-separated named id (foo.permissions.doFoo) of permission"));
			if ( ! newName ) return;
			var roleNode = authConfigWindow.getUserData("currentNode");
			var nodeType = this.getNodeType(roleNode) ; 
			if ( nodeType != "qcl.auth.types.Role" )
			{
				qx.event.message.Bus.dispatch("error-client", "Cannot create permission - invalid parent node type " + nodeType );
				return;
			}
			this.updateServer("sample_app.auth.permission.create", newName, roleNode.data.id );
		</qx:messageSubscriber>		

		<qx:messageSubscriber filter="qcl.auth.messages.permission.created">
			var id   = message.getData();
			var parentNodeId = authConfigWindow.getUserData("currentNode").data.id;
			var item = { id	: id, service : "sample_app.auth.permission"	};
			qx.event.message.Bus.dispatch( "qcl.auth.messages.changeItem",item );
			this.getDataModel().clearData(); this.updateClient();
		</qx:messageSubscriber>		
		
		<!-- delete or remove items. the server calls are handled in the left tree, we need only handle the response -->
		
		<qx:messageSubscriber filter="qcl.auth.messages.role.deleted">
			qx.event.message.Bus.dispatch( "qcl.auth.messages.reload" );
		</qx:messageSubscriber>
		
		<qx:messageSubscriber filter="qcl.auth.messages.permission.deleted">
			this.getDataModel().clearData(); this.updateClient();
		</qx:messageSubscriber>
				
		<qx:messageSubscriber filter="qcl.auth.messages.permission.roleRemoved">
			// listen to message only if this is not a drag and drop session
			if ( ! this.getUserData("dropData") )
			{
				console.log("permission removed");
				this.getDataModel().prune(authConfigWindow.getUserData("currentNode"),true);
				this.getDataModel().setData();
			}
		</qx:messageSubscriber>

		<!-- messages triggering a reload -->
		
		<qx:messageSubscriber filter="qcl.auth.messages.reload">
			this.getDataModel().clearData();this.updateClient();
		</qx:messageSubscriber>
		
	</qx:virtualTree>	
	
</qxt:include-definition>