<?xml version='1.0'?>
<!-- 

	QxTransformer
	Converts QXML to Javascript
	
	License: LGPL
	Autors: Siarhei Barysiuk <s.barysiuk@gmail.com>	
			Christian Boulanger <info@bibliograph.org>

	templates for "widget" widget processing
	
 -->
<!-- xml entities -->
<!DOCTYPE stylesheet [
	<!ENTITY UPPERCASE 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'>
	<!ENTITY NUMBER "1234567890">
	<!ENTITY LOWERCASE 'abcdefghijklmnopqrstuvwxyz'>
	<!ENTITY UPPER_TO_LOWER " '&UPPERCASE;' , '&LOWERCASE;' ">
	<!ENTITY LOWER_TO_UPPER " '&LOWERCASE;' , '&UPPERCASE;' ">
	<!ENTITY CR '&#13;&#10;'>
	<!ENTITY CLASS_PREFIX 'Qx'>
	<!ENTITY PREFIX 'qx_'>
	<!ENTITY DEBUG 'no'>

	<!ENTITY DEFAULT_ADD_TEMPLATE 'defaultAddWidgetHandler'>
	<!ENTITY EMPTY_WIDGET_HANDLER 'emptyWidgetHandler'>
	
	<!ENTITY MACRO_SRC_ATTRIBUTE 'src'>
	<!ENTITY MACRO_NAME_ATTRIBUTE 'name'>
	<!ENTITY MACRO_DEFINITION_TAG 'qxt:define-macro'>
	<!ENTITY MACRO_USAGE_TAG 'qxt:use-macro'>

	<!ENTITY INCLUDE_SRC_ATTRIBUTE 'src'>
]>

<xsl:stylesheet version="1.0" 
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:qx="http://www.qxtransformer.org/qooxdoo"
	xmlns:qxti="http://www.qxtransformer.org/internal"
	xmlns:qxt="http://www.qxtransformer.org/extension"
	xmlns:exsl="http://exslt.org/common">


	<xsl:template match="qx:widget">
		
		<!-- widget namespace -->
        <xsl:variable name="namespace">
            <xsl:choose>
                <xsl:when test="./@namespace">
                    <xsl:value-of select="./@namespace"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$applicationNamespace"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>   
		
		<xsl:call-template name="log.info">
			<xsl:with-param name="message">
				<xsl:text>Starting processing top widget </xsl:text>
				<xsl:value-of select="$namespace"/>.<xsl:value-of select="./@className"/>
				<xsl:text>content...</xsl:text>
			</xsl:with-param>
		</xsl:call-template>
		
		<!-- create document with preprocessed includes
			and macros -->
<xsl:if test="'&DEBUG;'='yes'">			
		<xsl:call-template name="log.info">
			<xsl:with-param name="message">
			<xsl:text>Starting processing of static includes and macros...</xsl:text>
			</xsl:with-param>
		</xsl:call-template>
</xsl:if>	
	
		<xsl:variable name="expandedDocumentRTF">
			<xsl:copy>
				<xsl:attribute name="id">
					<xsl:value-of select="$clientDocumentVar"/>  
				</xsl:attribute>
				<xsl:copy-of select="./@*"/> 
				<xsl:call-template name="preprocessStaticIncludes">
					<xsl:with-param name="widget" select="."/>
				</xsl:call-template>
			</xsl:copy>
        </xsl:variable>

		<xsl:variable name="expandedDocument" select="exsl:node-set($expandedDocumentRTF)"/>
<xsl:if test="'&DEBUG;'='yes'">		
		<xsl:call-template name="log.info">
			<xsl:with-param name="message">
				<xsl:text>Done processing of static includes and macros.</xsl:text>
			</xsl:with-param>
		</xsl:call-template>
</xsl:if>
		
        <xsl:text>/* ************************************************************************&CR;</xsl:text>
        <xsl:text>&CR;    </xsl:text>
        <xsl:value-of select="$applicationNamespace"/>
        <xsl:text>.</xsl:text>
        <xsl:value-of select="./@className"/>
        <xsl:if test="./@title">
            <xsl:text>&CR;&CR;    </xsl:text>
            <xsl:value-of select="./@title"/>
        </xsl:if>
        <xsl:if test="./@authors">
            <xsl:text>&CR;&CR;    Authors: </xsl:text>
            <xsl:value-of select="./@authors"/>
        </xsl:if>
        <xsl:text>&CR;&CR;    qooxdoo v.</xsl:text>
        <xsl:value-of select="$qooxdooVersion"/>
        <xsl:text> code generated by QxTransformer v.</xsl:text>
        <xsl:value-of select="$qxtransformerVersion"/>
        <xsl:text>&CR;&CR;************************************************************************ */&CR;</xsl:text>
        
        <!--  resources -->
        <xsl:text>&CR;&CR;/* ************************************************************************&CR;</xsl:text>
        <!-- embed icons, but only once -->
        <xsl:for-each select="$expandedDocument//*/@icon[contains(.,'icon/')  and not(.=../preceding-sibling::*/@icon)]">
            <xsl:text>#embed(qx.icontheme/</xsl:text>
            <xsl:value-of select="substring(.,6)"/>
            <xsl:text>)&CR;</xsl:text>
        </xsl:for-each>
        <!-- todo: class dependencies -->
        <xsl:text>&CR;************************************************************************ */&CR;</xsl:text>
            
        
        <![CDATA[
/**
 * Class declaration
 */]]>     
        <!-- define class -->
        <xsl:text>&CR;qx.Class.define("</xsl:text>
        <xsl:value-of select="$namespace"/>
        <xsl:text>.</xsl:text>
        <xsl:value-of select="./@className"/><![CDATA[",
{
  extend : ]]><xsl:choose>
  <xsl:when test="./@inherit">
	<xsl:value-of select="./@inherit"/>
  </xsl:when>
  <xsl:otherwise>
	<xsl:text>qx.core.Object</xsl:text>
  </xsl:otherwise>
  </xsl:choose><![CDATA[,

  properties : {
        widget : { check : "Object" }
  },
  
  construct : function()
  {]]>
        
		<![CDATA[
		// client document instance or dummy stub, depends on setToClientDocument property
		var ]]><xsl:value-of select="$clientDocumentVar" />    
        <xsl:choose>
			<xsl:when test="(./@setToClientDocument='false') ">
				<xsl:text> = { add: function(widget){ return false;} };&CR;</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text> = qx.ui.core.ClientDocument.getInstance();&CR;</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		
        <![CDATA[
        // generate all child widgets and add them to document ]]>
	
<xsl:if test="'&DEBUG;'='yes'">
		<xsl:call-template name="log.info">
			<xsl:with-param name="message">
				<xsl:text>Starting processing of widgets...</xsl:text>
			</xsl:with-param>
		</xsl:call-template>
</xsl:if>
		
		<!-- apply templates to result document -->
		<xsl:apply-templates select="$expandedDocument/*/*">
		   	<xsl:with-param name="expandedDocument" select="$expandedDocument"/>
		</xsl:apply-templates>

    <xsl:if test="'&DEBUG;'='yes'">		
    		<xsl:call-template name="log.info">
    			<xsl:with-param name="message">
    				<xsl:text>Done processing of widgets.</xsl:text>
    			</xsl:with-param>
    		</xsl:call-template>
    </xsl:if>
		
        <![CDATA[
        // set widget object
        this.setWidget(]]><xsl:call-template name="variableName">
            <xsl:with-param name="widget" select="./*[1]"/>
        </xsl:call-template><![CDATA[);
  },
  
  members : 
  {
  ]]>
  
<xsl:if test="'&DEBUG;'='yes'">
	<xsl:call-template name="log.info">
		<xsl:with-param name="message">
			<xsl:text>Starting generating event handlers...</xsl:text>
		</xsl:with-param>
	</xsl:call-template>
</xsl:if>
  
      <!-- event handler as member functions -->
      
      <xsl:for-each select="$expandedDocument//qx:eventHandler">
        <xsl:text>&CR;    /**</xsl:text>
        <xsl:text>&CR;     * </xsl:text>
        <xsl:value-of select="./@description"/>
        <xsl:text>&CR;     * </xsl:text>
        <xsl:text>&CR;     **/ </xsl:text>
        <xsl:text>&CR;    </xsl:text>
        <xsl:value-of select="./@name"/>
        <xsl:text> : function(event) {&CR;</xsl:text>
        <xsl:value-of select="." disable-output-escaping="yes" />
        <xsl:text>&CR;    },&CR;</xsl:text>
      </xsl:for-each>
	 
<xsl:if test="'&DEBUG;'='yes'">
	<xsl:call-template name="log.info">
		<xsl:with-param name="message">
			<xsl:text>Done generating event handlers.</xsl:text>
		</xsl:with-param>
	</xsl:call-template>
</xsl:if>

<![CDATA[
    dummyFunction : function(){}
  }
});
]]>

<xsl:if test="'&DEBUG;'='yes'">	
	<xsl:call-template name="log.info">
		<xsl:with-param name="message">
			<xsl:text>Done processing top widget content.</xsl:text>
		</xsl:with-param>
	</xsl:call-template>
</xsl:if>

	<xsl:text>&CR;&CR;</xsl:text>

<xsl:if test="'&DEBUG;'='yes'">
	<xsl:call-template name="log.info">
		<xsl:with-param name="message">
			<xsl:text>Starting processing of brodcasters...</xsl:text>
		</xsl:with-param>
	</xsl:call-template>
</xsl:if>
	
	<!-- define all broadcaster classes -->
	<xsl:call-template name="processBroadcasters">
		<xsl:with-param name="document" select="$expandedDocument"/>
		<xsl:with-param name="namespace" select="$namespace"/>
	</xsl:call-template>

<xsl:if test="'&DEBUG;'='yes'">
	<xsl:call-template name="log.info">
		<xsl:with-param name="message">
			<xsl:text>Done processing of brodcasters.</xsl:text>
		</xsl:with-param>
	</xsl:call-template>
</xsl:if>

	<xsl:call-template name="log.info">
		<xsl:with-param name="message">
			<xsl:text>Done processing widget content.</xsl:text>
		</xsl:with-param>
	</xsl:call-template>

	</xsl:template>

</xsl:stylesheet>