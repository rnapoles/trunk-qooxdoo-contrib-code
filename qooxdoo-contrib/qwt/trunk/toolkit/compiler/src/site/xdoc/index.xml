<document>
  <properties>
    <title>Qwt Compiler</title>
  </properties>
  <body>
    <section name="Translation">
      <p>Ignores synchronization, wait/notify: JavaScript is single threaded.</p>
      <p>Ignores generics: they're compile-time only.</p>
	  <p>Strings: augments Java Scripts String class. Converting objects before passing them
	    to native code/Qooxdoo is not feasible because this code might access compiled objects
	    (possibly using references from previous invokations) - it impossible to convert everything.
		Thus: converting is not a option. </p>
    </section>
    <section name="Code Generation">
      <p>A Java class or Interface <code>my.pkg.Name</code> compiles to a class <code>my.pkg.Name</code>.
      A class is a construction function object with the following properties:
      <source>
        myClass
         - (static fields and methods): A static method <code>m</code> for class <code>pkg.Name</code> translates to a function <code>pkg_Name.m</code>.
         - interfaces: list of class functions of the interfaces implemented by this class
         - prototype : instance of the base class
           - (none-static fields and methods): A non-static method <code>m</code> a function <code>pkg_Name.prototype.m</code>.
           - constructor: myClass
         - metadata: Java Class name (String) (or Class object, assigned by the runtime system (TODO))
      </source>
      Obtain the class of a given object:
      <source>
        myInstance.__proto__ = myClass.prototype
      </source>
      
      Classes are the only functions defined in the form <code>function name() {}</code>, all other
      code is defined in the form <code>SomeName = function() {}</code>.
      </p>
      <p>A constructor translates like a static method with name <code>init</code>,
		  <code>call</code> is used to pass <code>this</code> in constructors invokation.
	  </p>
      <p>Overloading is resolved at compile time by altering the constructor or method name.</p>
      <p>Annotations are ignored.</p>
      <p><code>char</code> is translated to integers.</p>
      <p>The global namespace is only polluted by runtime code and class object.</p>
    </section>
	<section name="Java/JS Compatibility">
      <p>Java and the resulting JS code is at least compile compatible: you can compile Java to 
	  detect JavaScript errors. If you don't use native JavaScript, the Java Script code is
	  runtime compatible: running the Java code yields the same results as running the
	  JavaScript code. In particular, you can test the Java code to detect JavaScript errors.</p>
	</section>
  </body>
</document>

