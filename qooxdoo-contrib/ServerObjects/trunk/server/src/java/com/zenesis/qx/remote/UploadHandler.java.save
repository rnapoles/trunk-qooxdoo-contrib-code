/**
 * ************************************************************************
 * 
 *    server-objects - a contrib to the Qooxdoo project that makes server 
 *    and client objects operate seamlessly; like Qooxdoo, server objects 
 *    have properties, events, and methods all of which can be access from
 *    either server or client, regardless of where the original object was
 *    created.
 * 
 *    http://qooxdoo.org
 * 
 *    Copyright:
 *      2010 Zenesis Limited, http://www.zenesis.com
 * 
 *    License:
 *      LGPL: http://www.gnu.org/licenses/lgpl.html
 *      EPL: http://www.eclipse.org/org/documents/epl-v10.php
 *      
 *      This software is provided under the same licensing terms as Qooxdoo,
 *      please see the LICENSE file in the Qooxdoo project's top-level directory 
 *      for details.
 * 
 *    Authors:
 *      * John Spackman (john.spackman@zenesis.com)
 * 
 * ************************************************************************
 */
package com.zenesis.qx.remote;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;
import java.util.Map.Entry;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import com.oreilly.servlet.multipart.FilePart;
import com.oreilly.servlet.multipart.MultipartParser;
import com.oreilly.servlet.multipart.ParamPart;
import com.oreilly.servlet.multipart.Part;

/**
 * Handles file uploads and attaches them to a ProxySessionTracker
 * 
 * @author "John Spackman <john.spackman@zenesis.com>"
 */
public class UploadHandler {
	
	private static final Logger log = Logger.getLogger(UploadHandler.class);

	public static final int MAX_UPLOAD_SIZE = 1024 * 1024 * 50; // 50Mb

	private final ProxySessionTracker tracker;
	private long maxUploadSize = MAX_UPLOAD_SIZE;

	/**
	 * @param tracker
	 */
	public UploadHandler(ProxySessionTracker tracker) {
		super();
		this.tracker = tracker;
	}
	
	public void processUpload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String contentType = request.getContentType();
        if (contentType == null || !contentType.startsWith("multipart/form-data")) {
        	log.error("Unsuitable content type: " + contentType);
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST, "Unsuitable content type " + contentType);
        	return;
        }
        
        HashMap<String, Object> result = new HashMap<String, Object>();
        ArrayList<HashMap<String, Object>> files = new ArrayList<HashMap<String,Object>>();
        result.put("files", files);
        
		File file = null;
		try {
			// Create the parser and figure out our maximum upload size
			MultipartParser parser = new MultipartParser(request, Integer.MAX_VALUE, true, true, null);
			if (maxUploadSize > -1 && request.getContentLength() > maxUploadSize) {
	        	log.error("Upload is too big: " + request.getContentLength() + " exceeds " + maxUploadSize);
				response.setStatus(HttpServletResponse.SC_NOT_ACCEPTABLE, "Upload is too big: " + request.getContentLength() + " exceeds " + maxUploadSize);
	        	return;
			}
	
			HashMap<String, String> params = new HashMap<String, String>();
			
		    // Get query parameters
			if (request.getQueryString() != null)
				parseQuery(params, request.getQueryString());
	
			// Read the parts in the upload
			Part part;
			while ((part = parser.readNextPart()) != null) {
				String name = part.getName();
				
				// It's a parameter part, add the parameters to the request object
				if (part.isParam()) {
					ParamPart paramPart = (ParamPart) part;
					String value = paramPart.getStringValue();
					params.put(name, String.valueOf(value));
				
				// Otherwise it's a file
				} else if (part.isFile()) {
					String uploadId = params.get("uploadId");
					
					// Get the group and serial number
					log.info("Received upload with id " + uploadId);
					
					FilePart filePart = (FilePart) part;
					String fileName = filePart.getFileName();
					if (fileName == null)
						fileName = "unnamed-upload";
					file = ProxyManager.getInstance().createTemporaryFile(fileName);
					filePart.setRenamePolicy(null);
					UploadingFile uploading = new UploadingFile(uploadId, file);
					tracker.beginUploadingFile(uploading);

					log.info("Starting receive of " + file.getAbsolutePath());
					FileOutputStream os = null;
					InputStream is = null;
					try {
						os = new FileOutputStream(file);
						is = filePart.getInputStream();
						byte[] buffer = new byte[32 * 1024];
						int length;
						while ((length = is.read(buffer)) > -1) {
							uploading.addBytesUploaded(length);
							os.write(buffer, 0, length);
						}
						is.close();
						is = null;
						os.close();
						os = null;
						log.info("Receive complete");
						tracker.endUploadingFile(uploading, true);
					}catch(IOException e) {
						tracker.endUploadingFile(uploading, false);
						file.delete();
						if (is != null)
							try {
								is.close();
							} catch(IOException e2) {
								
							}
						if (os != null)
							try {
								os.close();
							} catch(IOException e2) {
								
							}
						throw e;
					}
				}
			}
		}catch(IOException e) {
			String str;
			if (file != null)
				str = "Failed to upload " + file.getName() + ": " + e.getMessage();
			else
				str = "Error during upload: " + e.getMessage();
			log.error(str, e);
			result.put("status", "aborted");
			result.put("cause", str);
		}
		result.put("status", "complete");
		String str = tracker.toJSON(result);
		response.getWriter().write(str);
		response.setStatus(HttpServletResponse.SC_OK);
	}
    
    /**
     * Helper function which converts a query string into a map of
     * parameters
     * @param query
     * @return
     */
    private static void parseQuery(HashMap<String, String> params, String query) {
    	if (query == null || query.length() == 0)
    		return;
		StringTokenizer st = new StringTokenizer(query, "&");
		while (st.hasMoreTokens()) {
			String name = st.nextToken();
			String value = "";
			int pos = name.indexOf('=');
			if (pos > -1) {
				value = name.substring(pos + 1);
				name = name.substring(0, pos);
			}
			
			params.put(name, value);
		}
    }
}
